08:15:34 **** Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCLNative <= transferCLinterface.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= predict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= train.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNet.cpp
In file included from jni/trainEngine/../TransferCL/src/TransferCL.h:6:0,
                 from jni/trainEngine/train.cpp:11:
jni/trainEngine/train.cpp: In member function 'void TrainModel::compare_two_binary_files(FILE*, FILE*)':
jni/trainEngine/../TransferCL/src/dependencies.h:11:85: warning: format '%d' expects argument of type 'int', but argument 4 has type 'long int' [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/trainEngine/train.cpp:773:9: note: in expansion of macro 'LOGI'
         LOGI("Two files are not equal :  byte poistion at which two files differ is %d\n", ftell(fp1)+1);
         ^
[armeabi-v7a] Compile++ arm  : transferCL <= TransferCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGD.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedLayer.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
make.exe: *** Access is denied.

.  Stop.
make.exe: *** Waiting for unfinished jobs....
jni/TransferCL/src/conv/ConvolutionalLayer.cpp: In member function 'virtual void ConvolutionalLayer::forward()':
jni/TransferCL/src/conv/ConvolutionalLayer.cpp:1886:78: error: no matching function for call to 'EasyCL::wrap(int, unsigned char**&)'
     dataStorageWrapper8Bit= (CLWrapper*) cl->wrap(inputWrapper->size(), test3);
                                                                              ^
jni/TransferCL/src/conv/ConvolutionalLayer.cpp:1886:78: note: candidates are:
In file included from jni/TransferCL/src/conv/../layer/Layer.h:20:0,
                 from jni/TransferCL/src/conv/ConvolutionalLayer.h:11,
                 from jni/TransferCL/src/conv/ConvolutionalLayer.cpp:3:
jni/TransferCL/src/conv/../layer/../../EasyCL/EasyCL.h:128:19: note: CLIntWrapper* EasyCL::wrap(int, int*)
     CLIntWrapper *wrap(int N, int *source);
                   ^
jni/TransferCL/src/conv/../layer/../../EasyCL/EasyCL.h:128:19: note:   no known conversion for argument 2 from 'unsigned char**' to 'int*'
jni/TransferCL/src/conv/../layer/../../EasyCL/EasyCL.h:129:21: note: CLUCharWrapper* EasyCL::wrap(int, unsigned char*)
     CLUCharWrapper *wrap(int N, unsigned char *source);
                     ^
jni/TransferCL/src/conv/../layer/../../EasyCL/EasyCL.h:129:21: note:   no known conversion for argument 2 from 'unsigned char**' to 'unsigned char*'
jni/TransferCL/src/conv/../layer/../../EasyCL/EasyCL.h:130:21: note: CLFloatWrapper* EasyCL::wrap(int, float*)
     CLFloatWrapper *wrap(int N, float *source);
                     ^
jni/TransferCL/src/conv/../layer/../../EasyCL/EasyCL.h:130:21: note:   no known conversion for argument 2 from 'unsigned char**' to 'float*'
jni/TransferCL/src/conv/../layer/../../EasyCL/EasyCL.h:131:20: note: CLHalfWrapper* EasyCL::wrap(int, half*)
     CLHalfWrapper *wrap(int N, half *source);
                    ^
jni/TransferCL/src/conv/../layer/../../EasyCL/EasyCL.h:131:20: note:   no known conversion for argument 2 from 'unsigned char**' to 'half* {aka short unsigned int*}'
jni/TransferCL/src/conv/../layer/../../EasyCL/EasyCL.h:133:26: note: CLFloatWrapperConst* EasyCL::wrap(int, const float*)
     CLFloatWrapperConst *wrap(int N, float const*source);
                          ^
jni/TransferCL/src/conv/../layer/../../EasyCL/EasyCL.h:133:26: note:   no known conversion for argument 2 from 'unsigned char**' to 'const float*'
make.exe: *** [obj/local/armeabi-v7a/objs/transferCL/TransferCL/src/conv/ConvolutionalLayer.o] Error 1
Command canceled
08:16:32 **** Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
08:18:32 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
08:19:49 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
08:21:05 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
jni/TransferCL/src/conv/ConvolutionalLayer.cpp: In member function 'virtual void ConvolutionalLayer::forward()':
jni/TransferCL/src/conv/ConvolutionalLayer.cpp:1889:72: error: cannot convert 'unsigned char*' to 'float*' in initialization
     float * p=dataStorageWrapper8Bit->map_ZeroCopyObject_WriteFlag8Bit();
                                                                        ^
jni/TransferCL/src/conv/ConvolutionalLayer.cpp:1890:66: error: cannot convert 'unsigned char*' to 'float*' in initialization
     float * p2=inputWrapper8Bit->map_ZeroCopyObject_ReadFlag8Bit();
                                                                  ^
jni/TransferCL/src/conv/ConvolutionalLayer.cpp:1892:59: error: no matching function for call to 'CLWrapper::unMap_ZeroCopyObject_ReadFlag8Bit(float*&)'
     inputWrapper8Bit->unMap_ZeroCopyObject_ReadFlag8Bit(p2);
                                                           ^
jni/TransferCL/src/conv/ConvolutionalLayer.cpp:1892:59: note: candidate is:
In file included from jni/TransferCL/src/conv/../layer/../../EasyCL/CLIntWrapper.h:11:0,
                 from jni/TransferCL/src/conv/../layer/../../EasyCL/EasyCL.h:166,
                 from jni/TransferCL/src/conv/../layer/Layer.h:20,
                 from jni/TransferCL/src/conv/ConvolutionalLayer.h:11,
                 from jni/TransferCL/src/conv/ConvolutionalLayer.cpp:3:
jni/TransferCL/src/conv/../layer/../../EasyCL/CLWrapper.h:65:18: note: virtual void CLWrapper::unMap_ZeroCopyObject_ReadFlag8Bit(unsigned char*)
     virtual void unMap_ZeroCopyObject_ReadFlag8Bit(unsigned char *ptr);
                  ^
jni/TransferCL/src/conv/../layer/../../EasyCL/CLWrapper.h:65:18: note:   no known conversion for argument 1 from 'float*' to 'unsigned char*'
jni/TransferCL/src/conv/ConvolutionalLayer.cpp:1893:65: error: no matching function for call to 'CLWrapper::unMap_ZeroCopyObject_WriteFlag8Bit(float*&)'
     dataStorageWrapper8Bit->unMap_ZeroCopyObject_WriteFlag8Bit(p);
                                                                 ^
jni/TransferCL/src/conv/ConvolutionalLayer.cpp:1893:65: note: candidate is:
In file included from jni/TransferCL/src/conv/../layer/../../EasyCL/CLIntWrapper.h:11:0,
                 from jni/TransferCL/src/conv/../layer/../../EasyCL/EasyCL.h:166,
                 from jni/TransferCL/src/conv/../layer/Layer.h:20,
                 from jni/TransferCL/src/conv/ConvolutionalLayer.h:11,
                 from jni/TransferCL/src/conv/ConvolutionalLayer.cpp:3:
jni/TransferCL/src/conv/../layer/../../EasyCL/CLWrapper.h:63:18: note: virtual void CLWrapper::unMap_ZeroCopyObject_WriteFlag8Bit(unsigned char*)
     virtual void unMap_ZeroCopyObject_WriteFlag8Bit(unsigned char *ptr);
                  ^
jni/TransferCL/src/conv/../layer/../../EasyCL/CLWrapper.h:63:18: note:   no known conversion for argument 1 from 'float*' to 'unsigned char*'
make.exe: *** [obj/local/armeabi-v7a/objs/transferCL/TransferCL/src/conv/ConvolutionalLayer.o] Error 1
08:21:27 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
08:46:21 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCLNative <= transferCLinterface.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetdefToNet.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= train.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= predict.cpp
In file included from jni/trainEngine/../TransferCL/src/TransferCL.h:6:0,
                 from jni/trainEngine/train.cpp:11:
jni/trainEngine/train.cpp: In member function 'void TrainModel::compare_two_binary_files(FILE*, FILE*)':
jni/trainEngine/../TransferCL/src/dependencies.h:11:85: warning: format '%d' expects argument of type 'int', but argument 4 has type 'long int' [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/trainEngine/train.cpp:773:9: note: in expansion of macro 'LOGI'
         LOGI("Two files are not equal :  byte poistion at which two files differ is %d\n", ftell(fp1)+1);
         ^
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ManifestLoaderv1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Loader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv1Wrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= JpegHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FileHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= stringhelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= RandomSingleton.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainable.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNetMould.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNet.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TransferCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemandv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchData.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp: In member function 'virtual void NetLearnerOnDemandv2::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:186:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: postEpochTesting: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
[armeabi-v7a] Compile++ arm  : transferCL <= EpochMaker.cpp
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:193:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcherv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchProcess.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearner.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayerMaker.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp: In member function 'virtual void NetLearnerOnDemand::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:183:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:188:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CrossEntropyLoss.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SquareLossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayerPredict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= IAcceptsLabels.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Layer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainingContext.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGD.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsPersister.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OriginalInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= UniformInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CppRuntimeBoundary.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackpropWeightsNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
jni/TransferCL/src/conv/ConvolutionalLayer.cpp:2135:0: error: unterminated #if
 #if EIGHT_BIT_ACCURACY==1
 ^
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalMaker.cpp
make.exe: *** [obj/local/armeabi-v7a/objs/transferCL/TransferCL/src/conv/ConvolutionalLayer.o] Error 1
make.exe: *** Waiting for unfinished jobs....
08:47:40 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerDimensions.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= deviceinfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DevicesInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DeviceInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= EasyCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TemplatedKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= platforminfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLWrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConfigManager.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= MnistLoader.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
08:49:14 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
08:49:55 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
08:51:55 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCLNative <= transferCLinterface.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= predict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= train.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetdefToNet.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv2.cpp
In file included from jni/trainEngine/../TransferCL/src/TransferCL.h:6:0,
                 from jni/trainEngine/train.cpp:11:
jni/trainEngine/train.cpp: In member function 'void TrainModel::compare_two_binary_files(FILE*, FILE*)':
jni/trainEngine/../TransferCL/src/dependencies.h:11:85: warning: format '%d' expects argument of type 'int', but argument 4 has type 'long int' [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/trainEngine/train.cpp:773:9: note: in expansion of macro 'LOGI'
         LOGI("Two files are not equal :  byte poistion at which two files differ is %d\n", ftell(fp1)+1);
         ^
[armeabi-v7a] Compile++ arm  : transferCL <= ManifestLoaderv1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Loader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv1Wrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= JpegHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FileHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= stringhelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= RandomSingleton.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainable.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNetMould.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNet.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TransferCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemandv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchData.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= EpochMaker.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp: In member function 'virtual void NetLearnerOnDemandv2::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:186:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: postEpochTesting: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:193:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcherv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchProcess.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearner.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayer.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp: In member function 'virtual void NetLearnerOnDemand::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:183:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:188:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CrossEntropyLoss.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayerPredict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SquareLossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= IAcceptsLabels.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Layer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainingContext.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGD.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsPersister.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OriginalInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= UniformInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CppRuntimeBoundary.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackpropWeightsNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerDimensions.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= deviceinfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DevicesInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DeviceInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= EasyCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TemplatedKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= platforminfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLWrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= MnistLoader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConfigManager.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
09:01:28 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCLNative <= transferCLinterface.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= train.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= predict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardGpuNaive.cpp
In file included from jni/trainEngine/../TransferCL/src/TransferCL.h:6:0,
                 from jni/trainEngine/train.cpp:11:
jni/trainEngine/train.cpp: In member function 'void TrainModel::compare_two_binary_files(FILE*, FILE*)':
jni/trainEngine/../TransferCL/src/dependencies.h:11:85: warning: format '%d' expects argument of type 'int', but argument 4 has type 'long int' [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/trainEngine/train.cpp:773:9: note: in expansion of macro 'LOGI'
         LOGI("Two files are not equal :  byte poistion at which two files differ is %d\n", ftell(fp1)+1);
         ^
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNet.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TransferCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGD.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedLayer.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
09:03:27 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCLNative <= transferCLinterface.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
jni/TransferCL/src/conv/ConvolutionalLayer.cpp:16:23: fatal error: Eigen/Dense: No such file or directory
 #include <Eigen/Dense>
                       ^
compilation terminated.
make.exe: *** [obj/local/armeabi-v7a/objs/transferCL/TransferCL/src/conv/ConvolutionalLayer.o] Error 1
make.exe: *** Waiting for unfinished jobs....
jni/transferCLinterface.cpp:25:23: fatal error: Eigen/Dense: No such file or directory
 #include <Eigen/Dense>
                       ^
compilation terminated.
make.exe: *** [obj/local/armeabi-v7a/objs/transferCLNative/transferCLinterface.o] Error 1
09:05:53 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCLNative <= transferCLinterface.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
jni/TransferCL/src/conv/ConvolutionalLayer.cpp:23:7: error: 'Eigen' has not been declared
 using Eigen::MatrixXf;
       ^
make.exe: *** [obj/local/armeabi-v7a/objs/transferCL/TransferCL/src/conv/ConvolutionalLayer.o] Error 1
make.exe: *** Waiting for unfinished jobs....
09:06:27 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
09:09:38 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
09:12:22 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCLNative <= transferCLinterface.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= predict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= train.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardGpuNaive.cpp
In file included from jni/trainEngine/../TransferCL/src/TransferCL.h:6:0,
                 from jni/trainEngine/train.cpp:11:
jni/trainEngine/train.cpp: In member function 'void TrainModel::compare_two_binary_files(FILE*, FILE*)':
jni/trainEngine/../TransferCL/src/dependencies.h:11:85: warning: format '%d' expects argument of type 'int', but argument 4 has type 'long int' [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/trainEngine/train.cpp:773:9: note: in expansion of macro 'LOGI'
         LOGI("Two files are not equal :  byte poistion at which two files differ is %d\n", ftell(fp1)+1);
         ^
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNet.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TransferCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGD.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedLayer.cpp
jni/TransferCL/src/conv/ConvolutionalLayer.cpp: In destructor 'virtual ConvolutionalLayer::~ConvolutionalLayer()':
jni/TransferCL/src/conv/ConvolutionalLayer.cpp:754:10: error: 'dataStorageWrapper8Bit' was not declared in this scope
   delete dataStorageWrapper8Bit;
          ^
jni/TransferCL/src/conv/ConvolutionalLayer.cpp: In member function 'virtual void ConvolutionalLayer::forward()':
jni/TransferCL/src/conv/ConvolutionalLayer.cpp:1891:5: error: 'dataStorageWrapper8Bit' was not declared in this scope
     dataStorageWrapper8Bit= (CLWrapper*) cl->wrap8Bit(previousLayer->getOutputNumElements(), test3);
     ^
jni/TransferCL/src/conv/ConvolutionalLayer.cpp:2113:263: error: 'dataStorageWrapper8Bit' was not declared in this scope
     forwardImpl->forwardChooseMethod(batchSize, inputWrapper, weightsWrapper, biasWrapper, outputWrapper,selectorWrapper,gradInput_poolingLayer_Wrapper, dataStorageWrapper, weightsWrapperHalf, biasWrapperHalf,outputWrapperTest,gradInput_poolingLayer_WrapperHalf,dataStorageWrapper8Bit, weightsWrapper8Bit, biasWrapper8Bit,outputWrapper8Bit);
                                                                                                                                                                                                                                                                       ^
make.exe: *** [obj/local/armeabi-v7a/objs/transferCL/TransferCL/src/conv/ConvolutionalLayer.o] Error 1
make.exe: *** Waiting for unfinished jobs....
09:12:54 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCLNative <= transferCLinterface.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= predict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= train.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardGpuNaive.cpp
In file included from jni/trainEngine/../TransferCL/src/TransferCL.h:6:0,
                 from jni/trainEngine/train.cpp:11:
jni/trainEngine/train.cpp: In member function 'void TrainModel::compare_two_binary_files(FILE*, FILE*)':
jni/trainEngine/../TransferCL/src/dependencies.h:11:85: warning: format '%d' expects argument of type 'int', but argument 4 has type 'long int' [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/trainEngine/train.cpp:773:9: note: in expansion of macro 'LOGI'
         LOGI("Two files are not equal :  byte poistion at which two files differ is %d\n", ftell(fp1)+1);
         ^
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNet.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TransferCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGD.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedLayer.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
09:17:22 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
09:19:19 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
09:21:29 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
09:23:04 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
09:24:08 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
09:27:47 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
09:30:08 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
09:33:37 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
09:38:54 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
09:39:46 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
09:41:16 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
09:42:49 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
09:44:21 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
09:55:10 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= train.cpp
[armeabi-v7a] Compile++ arm  : transferCLNative <= transferCLinterface.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= predict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingLayer.cpp
In file included from jni/trainEngine/../TransferCL/src/TransferCL.h:6:0,
                 from jni/trainEngine/train.cpp:11:
jni/trainEngine/train.cpp: In member function 'void TrainModel::compare_two_binary_files(FILE*, FILE*)':
jni/trainEngine/../TransferCL/src/dependencies.h:11:85: warning: format '%d' expects argument of type 'int', but argument 4 has type 'long int' [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/trainEngine/train.cpp:773:9: note: in expansion of macro 'LOGI'
         LOGI("Two files are not equal :  byte poistion at which two files differ is %d\n", ftell(fp1)+1);
         ^
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNet.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TransferCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGD.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackpropWeightsNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackwardGpuNaive.cpp
jni/TransferCL/src/conv/ConvolutionalLayer.cpp: In constructor 'ConvolutionalLayer::ConvolutionalLayer(EasyCL*, Layer*, ConvolutionalMaker*)':
jni/TransferCL/src/conv/ConvolutionalLayer.cpp:169:6: error: 'class LayerDimensions' has no member named 'dim'
  dim.dim.inDataStore8Bit=false;
      ^
jni/TransferCL/src/conv/ConvolutionalLayer.cpp: In constructor 'ConvolutionalLayer::ConvolutionalLayer(EasyCL*, Layer*, ConvolutionalMaker*, std::string)':
jni/TransferCL/src/conv/ConvolutionalLayer.cpp:384:7: error: 'class LayerDimensions' has no member named 'dim'
   dim.dim.inDataStore8Bit=false;
       ^
jni/TransferCL/src/conv/ConvolutionalLayer.cpp: In member function 'virtual void ConvolutionalLayer::forward()':
jni/TransferCL/src/conv/ConvolutionalLayer.cpp:1891:33: error: 'class LayerDimensions' has no member named 'dim'
    if ((dim.isLast==true)&&(dim.dim.inDataStore8Bit ==false)){
                                 ^
jni/TransferCL/src/conv/ConvolutionalLayer.cpp:1902:9: error: 'class LayerDimensions' has no member named 'dim'
     dim.dim.inDataStore8Bit=true;
         ^
In file included from jni/TransferCL/src/conv/ConvolutionalLayer.h:10:0,
                 from jni/TransferCL/src/conv/ConvolutionalLayer.cpp:3:
jni/TransferCL/src/conv/ConvolutionalLayer.cpp:2112:41: error: 'class LayerDimensions' has no member named 'dim'
   LOGI("dim.dim.inDataStore8Bit %d",dim.dim.inDataStore8Bit);
                                         ^
jni/TransferCL/src/conv/../dependencies.h:11:74: note: in definition of macro 'LOGI'
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                          ^
jni/TransferCL/src/conv/ConvolutionalLayer.cpp:2114:12: error: 'class LayerDimensions' has no member named 'dim'
    if (dim.dim.inDataStore8Bit==false)
            ^
make.exe: *** [obj/local/armeabi-v7a/objs/transferCL/TransferCL/src/conv/ConvolutionalLayer.o] Error 1
make.exe: *** Waiting for unfinished jobs....
09:56:18 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerDimensions.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedLayer.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
10:28:12 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
10:31:44 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
10:33:14 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
10:40:00 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCLNative <= transferCLinterface.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= train.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= predict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetdefToNet.cpp
In file included from jni/trainEngine/../TransferCL/src/TransferCL.h:6:0,
                 from jni/trainEngine/train.cpp:11:
jni/trainEngine/train.cpp: In member function 'void TrainModel::compare_two_binary_files(FILE*, FILE*)':
jni/trainEngine/../TransferCL/src/dependencies.h:11:85: warning: format '%d' expects argument of type 'int', but argument 4 has type 'long int' [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/trainEngine/train.cpp:773:9: note: in expansion of macro 'LOGI'
         LOGI("Two files are not equal :  byte poistion at which two files differ is %d\n", ftell(fp1)+1);
         ^
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ManifestLoaderv1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Loader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv1Wrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= JpegHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FileHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= stringhelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= RandomSingleton.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainable.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNetMould.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNet.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TransferCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemandv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchData.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= EpochMaker.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp: In member function 'virtual void NetLearnerOnDemandv2::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:186:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: postEpochTesting: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:193:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcherv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchProcess.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearner.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayerMaker.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp: In member function 'virtual void NetLearnerOnDemand::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:183:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:188:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CrossEntropyLoss.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SquareLossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayerPredict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= IAcceptsLabels.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Layer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainingContext.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGD.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsPersister.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OriginalInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= UniformInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CppRuntimeBoundary.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackpropWeightsNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerDimensions.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= deviceinfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DevicesInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DeviceInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TemplatedKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= EasyCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= platforminfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLWrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConfigManager.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= MnistLoader.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
10:55:28 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
10:58:31 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
11:00:37 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
11:08:36 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
11:16:07 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
11:17:14 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
11:20:51 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
11:21:32 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
11:23:06 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
11:24:50 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
11:26:38 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
11:27:56 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
11:29:59 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
11:32:09 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
11:33:23 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
12:26:54 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCLNative <= transferCLinterface.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= train.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetdefToNet.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= predict.cpp
In file included from jni/trainEngine/../TransferCL/src/TransferCL.h:6:0,
                 from jni/trainEngine/train.cpp:11:
jni/trainEngine/train.cpp: In member function 'void TrainModel::compare_two_binary_files(FILE*, FILE*)':
jni/trainEngine/../TransferCL/src/dependencies.h:11:85: warning: format '%d' expects argument of type 'int', but argument 4 has type 'long int' [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/trainEngine/train.cpp:773:9: note: in expansion of macro 'LOGI'
         LOGI("Two files are not equal :  byte poistion at which two files differ is %d\n", ftell(fp1)+1);
         ^
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ManifestLoaderv1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Loader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv1Wrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= JpegHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FileHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= stringhelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= RandomSingleton.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainable.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNetMould.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNet.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TransferCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemandv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchData.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp: In member function 'virtual void NetLearnerOnDemandv2::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:186:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: postEpochTesting: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:193:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= EpochMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcherv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchProcess.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearner.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayer.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp: In member function 'virtual void NetLearnerOnDemand::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:183:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:188:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CrossEntropyLoss.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayerPredict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SquareLossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= IAcceptsLabels.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Layer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainingContext.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGD.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsPersister.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OriginalInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= UniformInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CppRuntimeBoundary.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackpropWeightsNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerDimensions.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedLayer.cpp
jni/TransferCL/src/conv/Forward1.cpp: In member function 'virtual void Forward1::forwardChooseMethod(int, CLWrapper*, CLWrapper*, CLWrapper*, CLWrapper*, CLWrapper*, CLWrapper*, CLWrapper*, CLWrapper*, CLWrapper*, CLWrapper*, CLWrapper*, CLWrapper*, CLWrapper*, CLWrapper*, CLWrapper*)':
jni/TransferCL/src/conv/Forward1.cpp:1780:8: error: cannot convert 'half* {aka short unsigned int*}' to 'float*' in assignment
   temp8=outputWrapper8Bit->map_ZeroCopyObject_ReadFlagHalf();
        ^
jni/TransferCL/src/conv/Forward1.cpp:1797:61: error: no matching function for call to 'CLWrapper::unMap_ZeroCopyObject_ReadFlagHalf(float*&)'
   outputWrapper8Bit->unMap_ZeroCopyObject_ReadFlagHalf(temp8);
                                                             ^
jni/TransferCL/src/conv/Forward1.cpp:1797:61: note: candidate is:
In file included from jni/TransferCL/src/conv/../../EasyCL/CLIntWrapper.h:11:0,
                 from jni/TransferCL/src/conv/../../EasyCL/EasyCL.h:166,
                 from jni/TransferCL/src/conv/Forward1.h:17,
                 from jni/TransferCL/src/conv/Forward1.cpp:7:
jni/TransferCL/src/conv/../../EasyCL/CLWrapper.h:60:18: note: virtual void CLWrapper::unMap_ZeroCopyObject_ReadFlagHalf(half*)
     virtual void unMap_ZeroCopyObject_ReadFlagHalf(half *ptr);
                  ^
jni/TransferCL/src/conv/../../EasyCL/CLWrapper.h:60:18: note:   no known conversion for argument 1 from 'float*' to 'half* {aka short unsigned int*}'
make.exe: *** [obj/local/armeabi-v7a/objs/transferCL/TransferCL/src/conv/Forward1.o] Error 1
make.exe: *** Waiting for unfinished jobs....
12:27:44 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= deviceinfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DevicesInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DeviceInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= EasyCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= platforminfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TemplatedKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLWrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConfigManager.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= MnistLoader.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
12:31:25 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
12:32:54 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
12:35:41 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
12:36:54 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
12:40:48 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
12:41:01 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
jni/TransferCL/src/conv/Forward1.cpp: In member function 'virtual void Forward1::forwardChooseMethod(int, CLWrapper*, CLWrapper*, CLWrapper*, CLWrapper*, CLWrapper*, CLWrapper*, CLWrapper*, CLWrapper*, CLWrapper*, CLWrapper*, CLWrapper*, CLWrapper*, CLWrapper*, CLWrapper*, CLWrapper*)':
jni/TransferCL/src/conv/Forward1.cpp:1782:15: error: cannot convert 'half* {aka short unsigned int*}' to 'float*' in assignment
   tempOriginal=tempOutput->map_ZeroCopyObject_ReadFlagHalf();
               ^
make.exe: *** [obj/local/armeabi-v7a/objs/transferCL/TransferCL/src/conv/Forward1.o] Error 1
12:41:27 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
12:43:08 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
12:45:37 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
12:49:05 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
12:50:54 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
12:52:54 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
12:55:48 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
13:34:57 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
13:36:05 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
13:43:12 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
13:44:04 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
13:52:34 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
14:10:34 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCLNative <= transferCLinterface.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= train.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetdefToNet.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= predict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv2.cpp
In file included from jni/trainEngine/../TransferCL/src/TransferCL.h:6:0,
                 from jni/trainEngine/train.cpp:11:
jni/trainEngine/train.cpp: In member function 'void TrainModel::compare_two_binary_files(FILE*, FILE*)':
jni/trainEngine/../TransferCL/src/dependencies.h:11:85: warning: format '%d' expects argument of type 'int', but argument 4 has type 'long int' [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/trainEngine/train.cpp:773:9: note: in expansion of macro 'LOGI'
         LOGI("Two files are not equal :  byte poistion at which two files differ is %d\n", ftell(fp1)+1);
         ^
[armeabi-v7a] Compile++ arm  : transferCL <= ManifestLoaderv1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Loader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv1Wrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= JpegHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FileHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= stringhelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= RandomSingleton.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainable.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNetMould.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNet.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TransferCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemandv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchData.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= EpochMaker.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp: In member function 'virtual void NetLearnerOnDemandv2::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:186:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: postEpochTesting: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:193:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcherv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchProcess.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearner.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayerMaker.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp: In member function 'virtual void NetLearnerOnDemand::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:183:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:188:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CrossEntropyLoss.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayerPredict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SquareLossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= IAcceptsLabels.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Layer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainingContext.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGD.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsPersister.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OriginalInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= UniformInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CppRuntimeBoundary.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackpropWeightsNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerDimensions.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= deviceinfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DevicesInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= EasyCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DeviceInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TemplatedKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= platforminfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLWrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConfigManager.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= MnistLoader.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
14:19:13 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
14:20:33 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
14:29:14 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
14:33:29 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
14:36:01 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= train.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= predict.cpp
[armeabi-v7a] Compile++ arm  : transferCLNative <= transferCLinterface.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetdefToNet.cpp
In file included from jni/trainEngine/../TransferCL/src/TransferCL.h:6:0,
                 from jni/trainEngine/train.cpp:11:
jni/trainEngine/train.cpp: In member function 'void TrainModel::compare_two_binary_files(FILE*, FILE*)':
jni/trainEngine/../TransferCL/src/dependencies.h:11:85: warning: format '%d' expects argument of type 'int', but argument 4 has type 'long int' [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/trainEngine/train.cpp:773:9: note: in expansion of macro 'LOGI'
         LOGI("Two files are not equal :  byte poistion at which two files differ is %d\n", ftell(fp1)+1);
         ^
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ManifestLoaderv1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv1Wrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Loader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= JpegHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FileHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= stringhelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainable.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= RandomSingleton.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNetMould.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNet.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TransferCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemandv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchData.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp: In member function 'virtual void NetLearnerOnDemandv2::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:186:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: postEpochTesting: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:193:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= EpochMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcherv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchProcess.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearner.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayer.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp: In member function 'virtual void NetLearnerOnDemand::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:183:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:188:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CrossEntropyLoss.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayerPredict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= IAcceptsLabels.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SquareLossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Layer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainingContext.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGD.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsPersister.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OriginalInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= UniformInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CppRuntimeBoundary.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackpropWeightsNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerDimensions.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= deviceinfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DeviceInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DevicesInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= EasyCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TemplatedKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= platforminfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLWrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConfigManager.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= MnistLoader.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
Command canceled
14:36:51 **** Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
14:39:32 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
14:40:55 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
14:42:09 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationLayer.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
14:43:37 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCLNative <= transferCLinterface.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= predict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetdefToNet.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= train.cpp
In file included from jni/trainEngine/../TransferCL/src/TransferCL.h:6:0,
                 from jni/trainEngine/train.cpp:11:
jni/trainEngine/train.cpp: In member function 'void TrainModel::compare_two_binary_files(FILE*, FILE*)':
jni/trainEngine/../TransferCL/src/dependencies.h:11:85: warning: format '%d' expects argument of type 'int', but argument 4 has type 'long int' [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/trainEngine/train.cpp:773:9: note: in expansion of macro 'LOGI'
         LOGI("Two files are not equal :  byte poistion at which two files differ is %d\n", ftell(fp1)+1);
         ^
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ManifestLoaderv1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Loader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv1Wrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= JpegHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FileHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= stringhelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= RandomSingleton.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainable.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNetMould.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNet.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TransferCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemandv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchData.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp: In member function 'virtual void NetLearnerOnDemandv2::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:186:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: postEpochTesting: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:193:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= EpochMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcherv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchProcess.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearner.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayer.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp: In member function 'virtual void NetLearnerOnDemand::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:183:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:188:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CrossEntropyLoss.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayerPredict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SquareLossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= IAcceptsLabels.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Layer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainingContext.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGD.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsPersister.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OriginalInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= UniformInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CppRuntimeBoundary.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackpropWeightsNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerDimensions.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= deviceinfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DevicesInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DeviceInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= EasyCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TemplatedKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= platforminfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLWrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConfigManager.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= MnistLoader.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
14:45:23 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
14:51:45 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCLNative <= transferCLinterface.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
14:55:28 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= train.cpp
[armeabi-v7a] Compile++ arm  : transferCLNative <= transferCLinterface.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= predict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetdefToNet.cpp
In file included from jni/trainEngine/../TransferCL/src/TransferCL.h:6:0,
                 from jni/trainEngine/train.cpp:11:
jni/trainEngine/train.cpp: In member function 'void TrainModel::compare_two_binary_files(FILE*, FILE*)':
jni/trainEngine/../TransferCL/src/dependencies.h:11:85: warning: format '%d' expects argument of type 'int', but argument 4 has type 'long int' [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/trainEngine/train.cpp:773:9: note: in expansion of macro 'LOGI'
         LOGI("Two files are not equal :  byte poistion at which two files differ is %d\n", ftell(fp1)+1);
         ^
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ManifestLoaderv1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Loader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv1Wrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= JpegHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FileHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= stringhelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= RandomSingleton.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainable.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNetMould.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNet.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TransferCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemandv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchData.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= EpochMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp: In member function 'virtual void NetLearnerOnDemandv2::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:186:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: postEpochTesting: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:193:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcherv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchProcess.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearner.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayerMaker.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp: In member function 'virtual void NetLearnerOnDemand::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:183:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:188:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CrossEntropyLoss.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SquareLossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayerPredict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= IAcceptsLabels.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Layer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainingContext.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGD.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsPersister.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OriginalInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= UniformInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CppRuntimeBoundary.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackpropWeightsNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerDimensions.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= deviceinfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DevicesInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DeviceInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= EasyCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TemplatedKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= platforminfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLWrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConfigManager.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= MnistLoader.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
14:59:42 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCLNative <= transferCLinterface.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
15:06:27 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCLNative <= transferCLinterface.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= predict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= train.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetdefToNet.cpp
In file included from jni/trainEngine/../TransferCL/src/TransferCL.h:6:0,
                 from jni/trainEngine/train.cpp:11:
jni/trainEngine/train.cpp: In member function 'void TrainModel::compare_two_binary_files(FILE*, FILE*)':
jni/trainEngine/../TransferCL/src/dependencies.h:11:85: warning: format '%d' expects argument of type 'int', but argument 4 has type 'long int' [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/trainEngine/train.cpp:773:9: note: in expansion of macro 'LOGI'
         LOGI("Two files are not equal :  byte poistion at which two files differ is %d\n", ftell(fp1)+1);
         ^
[armeabi-v7a] Compile++ arm  : transferCL <= ManifestLoaderv1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Loader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv1Wrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= JpegHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FileHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= stringhelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= RandomSingleton.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainable.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNetMould.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNet.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TransferCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemandv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchData.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp: In member function 'virtual void NetLearnerOnDemandv2::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:186:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: postEpochTesting: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:193:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= EpochMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcherv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchProcess.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearner.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayer.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp: In member function 'virtual void NetLearnerOnDemand::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:183:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:188:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CrossEntropyLoss.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayerPredict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SquareLossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= IAcceptsLabels.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Layer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainingContext.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGD.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsPersister.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OriginalInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= UniformInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CppRuntimeBoundary.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackpropWeightsNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerDimensions.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= deviceinfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DevicesInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DeviceInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= EasyCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TemplatedKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= platforminfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLWrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConfigManager.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= MnistLoader.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
15:24:06 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
15:25:26 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
15:33:44 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCLNative <= transferCLinterface.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= predict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= train.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetdefToNet.cpp
In file included from jni/trainEngine/../TransferCL/src/TransferCL.h:6:0,
                 from jni/trainEngine/train.cpp:11:
jni/trainEngine/train.cpp: In member function 'void TrainModel::compare_two_binary_files(FILE*, FILE*)':
jni/trainEngine/../TransferCL/src/dependencies.h:11:85: warning: format '%d' expects argument of type 'int', but argument 4 has type 'long int' [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/trainEngine/train.cpp:773:9: note: in expansion of macro 'LOGI'
         LOGI("Two files are not equal :  byte poistion at which two files differ is %d\n", ftell(fp1)+1);
         ^
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ManifestLoaderv1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Loader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv1Wrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= JpegHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FileHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= stringhelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= RandomSingleton.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainable.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNetMould.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNet.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TransferCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemandv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchData.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp: In member function 'virtual void NetLearnerOnDemandv2::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:186:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: postEpochTesting: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:193:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= EpochMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcherv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchProcess.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearner.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayerMaker.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp: In member function 'virtual void NetLearnerOnDemand::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:183:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:188:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CrossEntropyLoss.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayerPredict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SquareLossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= IAcceptsLabels.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Layer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainingContext.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGD.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsPersister.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OriginalInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= UniformInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CppRuntimeBoundary.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackpropWeightsNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerDimensions.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= deviceinfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DevicesInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DeviceInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= EasyCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TemplatedKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= platforminfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLWrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConfigManager.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= MnistLoader.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
15:37:14 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
15:39:46 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
15:43:44 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
15:50:37 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
15:54:47 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
15:56:42 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
16:00:15 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCLNative <= transferCLinterface.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= predict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= train.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetdefToNet.cpp
In file included from jni/trainEngine/../TransferCL/src/TransferCL.h:6:0,
                 from jni/trainEngine/train.cpp:11:
jni/trainEngine/train.cpp: In member function 'void TrainModel::compare_two_binary_files(FILE*, FILE*)':
jni/trainEngine/../TransferCL/src/dependencies.h:11:85: warning: format '%d' expects argument of type 'int', but argument 4 has type 'long int' [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/trainEngine/train.cpp:773:9: note: in expansion of macro 'LOGI'
         LOGI("Two files are not equal :  byte poistion at which two files differ is %d\n", ftell(fp1)+1);
         ^
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ManifestLoaderv1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Loader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv1Wrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= JpegHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FileHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= stringhelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= RandomSingleton.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainable.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNetMould.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNet.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TransferCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemandv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchData.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= EpochMaker.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp: In member function 'virtual void NetLearnerOnDemandv2::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:186:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: postEpochTesting: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:193:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcherv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchProcess.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearner.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayer.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp: In member function 'virtual void NetLearnerOnDemand::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:183:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:188:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CrossEntropyLoss.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayerPredict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SquareLossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= IAcceptsLabels.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Layer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainingContext.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGD.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsPersister.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OriginalInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= UniformInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CppRuntimeBoundary.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackpropWeightsNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerDimensions.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= deviceinfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DevicesInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DeviceInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= EasyCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TemplatedKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= platforminfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLWrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConfigManager.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= MnistLoader.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
16:04:26 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
16:04:57 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCLNative <= transferCLinterface.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= predict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= train.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetdefToNet.cpp
In file included from jni/trainEngine/../TransferCL/src/TransferCL.h:6:0,
                 from jni/trainEngine/train.cpp:11:
jni/trainEngine/train.cpp: In member function 'void TrainModel::compare_two_binary_files(FILE*, FILE*)':
jni/trainEngine/../TransferCL/src/dependencies.h:11:85: warning: format '%d' expects argument of type 'int', but argument 4 has type 'long int' [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/trainEngine/train.cpp:773:9: note: in expansion of macro 'LOGI'
         LOGI("Two files are not equal :  byte poistion at which two files differ is %d\n", ftell(fp1)+1);
         ^
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ManifestLoaderv1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Loader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv1Wrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= JpegHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FileHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= stringhelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= RandomSingleton.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainable.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNetMould.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNet.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TransferCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemandv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchData.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp: In member function 'virtual void NetLearnerOnDemandv2::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:186:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: postEpochTesting: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:193:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= EpochMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcherv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchProcess.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearner.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayer.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp: In member function 'virtual void NetLearnerOnDemand::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:183:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:188:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CrossEntropyLoss.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayerPredict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SquareLossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= IAcceptsLabels.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Layer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainingContext.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGD.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsPersister.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OriginalInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CppRuntimeBoundary.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= UniformInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackpropWeightsNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerDimensions.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= deviceinfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DevicesInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DeviceInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= EasyCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TemplatedKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= platforminfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLWrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConfigManager.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= MnistLoader.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
16:11:30 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCLNative <= transferCLinterface.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= predict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetdefToNet.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= train.cpp
In file included from jni/trainEngine/../TransferCL/src/TransferCL.h:6:0,
                 from jni/trainEngine/train.cpp:11:
jni/trainEngine/train.cpp: In member function 'void TrainModel::compare_two_binary_files(FILE*, FILE*)':
jni/trainEngine/../TransferCL/src/dependencies.h:11:85: warning: format '%d' expects argument of type 'int', but argument 4 has type 'long int' [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/trainEngine/train.cpp:773:9: note: in expansion of macro 'LOGI'
         LOGI("Two files are not equal :  byte poistion at which two files differ is %d\n", ftell(fp1)+1);
         ^
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ManifestLoaderv1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv1Wrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Loader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= JpegHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FileHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= stringhelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= RandomSingleton.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainable.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNet.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNetMould.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TransferCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemandv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchData.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp: In member function 'virtual void NetLearnerOnDemandv2::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:186:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: postEpochTesting: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:193:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= EpochMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcherv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchProcess.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearner.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayer.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp: In member function 'virtual void NetLearnerOnDemand::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:183:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:188:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CrossEntropyLoss.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayerPredict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SquareLossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= IAcceptsLabels.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Layer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainingContext.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGD.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsPersister.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= UniformInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OriginalInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CppRuntimeBoundary.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackpropWeightsNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerDimensions.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= deviceinfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DevicesInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DeviceInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= EasyCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TemplatedKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= platforminfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLWrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConfigManager.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= MnistLoader.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
16:14:44 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCLNative <= transferCLinterface.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= train.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= predict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetdefToNet.cpp
In file included from jni/trainEngine/../TransferCL/src/TransferCL.h:6:0,
                 from jni/trainEngine/train.cpp:11:
jni/trainEngine/train.cpp: In member function 'void TrainModel::compare_two_binary_files(FILE*, FILE*)':
jni/trainEngine/../TransferCL/src/dependencies.h:11:85: warning: format '%d' expects argument of type 'int', but argument 4 has type 'long int' [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/trainEngine/train.cpp:773:9: note: in expansion of macro 'LOGI'
         LOGI("Two files are not equal :  byte poistion at which two files differ is %d\n", ftell(fp1)+1);
         ^
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ManifestLoaderv1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Loader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv1Wrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= JpegHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FileHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= stringhelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= RandomSingleton.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainable.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNetMould.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNet.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TransferCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemandv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchData.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp: In member function 'virtual void NetLearnerOnDemandv2::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:186:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: postEpochTesting: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:193:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= EpochMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcherv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchProcess.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearner.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayerMaker.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp: In member function 'virtual void NetLearnerOnDemand::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:183:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:188:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CrossEntropyLoss.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayerPredict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SquareLossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= IAcceptsLabels.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Layer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainingContext.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGD.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsPersister.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= UniformInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OriginalInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CppRuntimeBoundary.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackpropWeightsNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerDimensions.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= deviceinfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DevicesInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DeviceInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= EasyCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TemplatedKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= platforminfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLWrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConfigManager.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] Compile++ arm  : transferCL <= MnistLoader.cpp
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
16:16:12 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCLNative <= transferCLinterface.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
16:18:01 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
16:18:58 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
16:19:36 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
16:26:47 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNet.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
16:36:08 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCLNative <= transferCLinterface.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= train.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= predict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetdefToNet.cpp
In file included from jni/trainEngine/../TransferCL/src/TransferCL.h:6:0,
                 from jni/trainEngine/train.cpp:11:
jni/trainEngine/train.cpp: In member function 'void TrainModel::compare_two_binary_files(FILE*, FILE*)':
jni/trainEngine/../TransferCL/src/dependencies.h:11:85: warning: format '%d' expects argument of type 'int', but argument 4 has type 'long int' [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/trainEngine/train.cpp:773:9: note: in expansion of macro 'LOGI'
         LOGI("Two files are not equal :  byte poistion at which two files differ is %d\n", ftell(fp1)+1);
         ^
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ManifestLoaderv1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Loader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv1Wrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= JpegHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FileHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= stringhelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= RandomSingleton.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainable.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNetMould.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNet.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TransferCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemandv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchData.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp: In member function 'virtual void NetLearnerOnDemandv2::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:186:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: postEpochTesting: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:193:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= EpochMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcherv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchProcess.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearner.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayerMaker.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp: In member function 'virtual void NetLearnerOnDemand::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:183:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:188:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CrossEntropyLoss.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayerPredict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= IAcceptsLabels.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SquareLossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Layer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainingContext.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGD.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsPersister.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OriginalInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= UniformInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CppRuntimeBoundary.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackpropWeightsNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerDimensions.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= deviceinfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DevicesInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DeviceInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= EasyCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TemplatedKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= platforminfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLWrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConfigManager.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= MnistLoader.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
16:38:45 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
16:39:43 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
16:42:44 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
16:43:49 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCLNative <= transferCLinterface.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= train.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= predict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetdefToNet.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv2.cpp
In file included from jni/trainEngine/../TransferCL/src/TransferCL.h:6:0,
                 from jni/trainEngine/train.cpp:11:
jni/trainEngine/train.cpp: In member function 'void TrainModel::compare_two_binary_files(FILE*, FILE*)':
jni/trainEngine/../TransferCL/src/dependencies.h:11:85: warning: format '%d' expects argument of type 'int', but argument 4 has type 'long int' [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/trainEngine/train.cpp:773:9: note: in expansion of macro 'LOGI'
         LOGI("Two files are not equal :  byte poistion at which two files differ is %d\n", ftell(fp1)+1);
         ^
[armeabi-v7a] Compile++ arm  : transferCL <= ManifestLoaderv1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Loader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv1Wrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FileHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= JpegHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= stringhelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= RandomSingleton.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainable.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNetMould.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNet.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TransferCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemandv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchData.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp: In member function 'virtual void NetLearnerOnDemandv2::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:186:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: postEpochTesting: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:193:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= EpochMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcherv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchProcess.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearner.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayerMaker.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp: In member function 'virtual void NetLearnerOnDemand::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:183:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:188:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CrossEntropyLoss.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SquareLossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayerPredict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= IAcceptsLabels.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Layer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainingContext.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGD.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsPersister.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OriginalInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= UniformInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CppRuntimeBoundary.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackpropWeightsNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerDimensions.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= deviceinfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DevicesInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DeviceInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= EasyCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TemplatedKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= platforminfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLWrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= MnistLoader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConfigManager.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
16:45:54 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCLNative <= transferCLinterface.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= train.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetdefToNet.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= predict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv2.cpp
In file included from jni/trainEngine/../TransferCL/src/TransferCL.h:6:0,
                 from jni/trainEngine/train.cpp:11:
jni/trainEngine/train.cpp: In member function 'void TrainModel::compare_two_binary_files(FILE*, FILE*)':
jni/trainEngine/../TransferCL/src/dependencies.h:11:85: warning: format '%d' expects argument of type 'int', but argument 4 has type 'long int' [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/trainEngine/train.cpp:773:9: note: in expansion of macro 'LOGI'
         LOGI("Two files are not equal :  byte poistion at which two files differ is %d\n", ftell(fp1)+1);
         ^
[armeabi-v7a] Compile++ arm  : transferCL <= ManifestLoaderv1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Loader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv1Wrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= JpegHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FileHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= stringhelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= RandomSingleton.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainable.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNetMould.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNet.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TransferCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemandv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchData.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp: In member function 'virtual void NetLearnerOnDemandv2::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:186:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: postEpochTesting: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:193:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= EpochMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcherv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchProcess.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearner.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayer.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp: In member function 'virtual void NetLearnerOnDemand::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:183:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:188:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CrossEntropyLoss.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayerPredict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SquareLossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= IAcceptsLabels.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Layer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainingContext.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGD.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsPersister.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OriginalInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= UniformInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CppRuntimeBoundary.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackpropWeightsNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerDimensions.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= deviceinfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DevicesInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DeviceInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= EasyCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TemplatedKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= platforminfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLWrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConfigManager.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= MnistLoader.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
16:48:03 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCLNative <= transferCLinterface.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= train.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetdefToNet.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= predict.cpp
In file included from jni/trainEngine/../TransferCL/src/TransferCL.h:6:0,
                 from jni/trainEngine/train.cpp:11:
jni/trainEngine/train.cpp: In member function 'void TrainModel::compare_two_binary_files(FILE*, FILE*)':
jni/trainEngine/../TransferCL/src/dependencies.h:11:85: warning: format '%d' expects argument of type 'int', but argument 4 has type 'long int' [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/trainEngine/train.cpp:773:9: note: in expansion of macro 'LOGI'
         LOGI("Two files are not equal :  byte poistion at which two files differ is %d\n", ftell(fp1)+1);
         ^
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ManifestLoaderv1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Loader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv1Wrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= JpegHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FileHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= stringhelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= RandomSingleton.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainable.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNetMould.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNet.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TransferCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemandv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcher.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp: In member function 'virtual void NetLearnerOnDemandv2::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:186:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: postEpochTesting: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:193:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= BatchData.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= EpochMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcherv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchProcess.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearner.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayer.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp: In member function 'virtual void NetLearnerOnDemand::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:183:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:188:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CrossEntropyLoss.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayerPredict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SquareLossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= IAcceptsLabels.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Layer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainingContext.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGD.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsPersister.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OriginalInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= UniformInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CppRuntimeBoundary.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackpropWeightsNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerDimensions.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= deviceinfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DevicesInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DeviceInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= EasyCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TemplatedKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= platforminfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLWrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConfigManager.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= MnistLoader.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
16:58:16 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayer.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
17:05:47 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCLNative <= transferCLinterface.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= predict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetdefToNet.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= train.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv2.cpp
In file included from jni/trainEngine/../TransferCL/src/TransferCL.h:6:0,
                 from jni/trainEngine/train.cpp:11:
jni/trainEngine/train.cpp: In member function 'void TrainModel::compare_two_binary_files(FILE*, FILE*)':
jni/trainEngine/../TransferCL/src/dependencies.h:11:85: warning: format '%d' expects argument of type 'int', but argument 4 has type 'long int' [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/trainEngine/train.cpp:773:9: note: in expansion of macro 'LOGI'
         LOGI("Two files are not equal :  byte poistion at which two files differ is %d\n", ftell(fp1)+1);
         ^
[armeabi-v7a] Compile++ arm  : transferCL <= ManifestLoaderv1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Loader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv1Wrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= JpegHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FileHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= stringhelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= RandomSingleton.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainable.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNet.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNetMould.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TransferCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemandv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchData.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= EpochMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp: In member function 'virtual void NetLearnerOnDemandv2::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:186:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: postEpochTesting: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:193:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcherv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchProcess.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearner.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayer.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp: In member function 'virtual void NetLearnerOnDemand::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:183:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:188:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= LossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CrossEntropyLoss.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayerPredict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SquareLossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= IAcceptsLabels.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Layer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainingContext.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGD.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsPersister.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= UniformInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OriginalInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CppRuntimeBoundary.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackpropWeightsNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerDimensions.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= deviceinfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DevicesInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DeviceInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= EasyCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TemplatedKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= platforminfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLWrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConfigManager.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= MnistLoader.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
17:17:36 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
17:42:17 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCLNative <= transferCLinterface.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= predict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= train.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetdefToNet.cpp
In file included from jni/trainEngine/../TransferCL/src/TransferCL.h:6:0,
                 from jni/trainEngine/train.cpp:11:
jni/trainEngine/train.cpp: In member function 'void TrainModel::compare_two_binary_files(FILE*, FILE*)':
jni/trainEngine/../TransferCL/src/dependencies.h:11:85: warning: format '%d' expects argument of type 'int', but argument 4 has type 'long int' [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/trainEngine/train.cpp:773:9: note: in expansion of macro 'LOGI'
         LOGI("Two files are not equal :  byte poistion at which two files differ is %d\n", ftell(fp1)+1);
         ^
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ManifestLoaderv1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Loader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv1Wrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= JpegHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FileHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= stringhelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= RandomSingleton.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainable.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNetMould.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNet.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TransferCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemandv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchData.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp: In member function 'virtual void NetLearnerOnDemandv2::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:186:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: postEpochTesting: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:193:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= EpochMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcherv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchProcess.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearner.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayer.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp: In member function 'virtual void NetLearnerOnDemand::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:183:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:188:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CrossEntropyLoss.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayerPredict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SquareLossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= IAcceptsLabels.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Layer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainingContext.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGD.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsPersister.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OriginalInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= UniformInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CppRuntimeBoundary.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackpropWeightsNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackwardGpuNaive.cpp
jni/TransferCL/src/conv/BackpropWeightsNaive.cpp: In member function 'void BackpropWeightsNaive::buildKernelBackward(std::string)':
jni/TransferCL/src/conv/BackpropWeightsNaive.cpp:1140:11: error: base operand of '->' has non-pointer type 'TemplatedKernel'
    builder->set("gInput_scale", (1/multI));
           ^
jni/TransferCL/src/conv/BackpropWeightsNaive.cpp:1140:36: error: 'multI' was not declared in this scope
    builder->set("gInput_scale", (1/multI));
                                    ^
jni/TransferCL/src/conv/BackpropWeightsNaive.cpp:1141:11: error: base operand of '->' has non-pointer type 'TemplatedKernel'
    builder->set("gInput_zero_point", (minI));
           ^
jni/TransferCL/src/conv/BackpropWeightsNaive.cpp:1141:39: error: 'minI' was not declared in this scope
    builder->set("gInput_zero_point", (minI));
                                       ^
make.exe: *** [obj/local/armeabi-v7a/objs/transferCL/TransferCL/src/conv/BackpropWeightsNaive.o] Error 1
make.exe: *** Waiting for unfinished jobs....
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalMaker.cpp
17:43:28 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= BackpropWeightsNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerDimensions.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= deviceinfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DevicesInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DeviceInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= EasyCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TemplatedKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= platforminfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLWrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConfigManager.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= MnistLoader.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
17:45:55 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= BackpropWeightsNaive.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
17:50:13 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackpropWeightsNaive.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
17:52:09 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
17:53:46 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= BackpropWeightsNaive.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
19:11:27 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= BackpropWeightsNaive.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
jni/TransferCL/src/conv/BackpropWeightsNaive.cpp: In constructor 'BackpropWeightsNaive::BackpropWeightsNaive(EasyCL*, LayerDimensions)':
jni/TransferCL/src/conv/BackpropWeightsNaive.cpp:547:28: error: 'minW' was not declared in this scope
     ExtractMinMultFromFile(minW, multW,minI, multI,minR, multR);
                            ^
jni/TransferCL/src/conv/BackpropWeightsNaive.cpp:547:34: error: 'multW' was not declared in this scope
     ExtractMinMultFromFile(minW, multW,minI, multI,minR, multR);
                                  ^
jni/TransferCL/src/conv/BackpropWeightsNaive.cpp:547:40: error: 'minI' was not declared in this scope
     ExtractMinMultFromFile(minW, multW,minI, multI,minR, multR);
                                        ^
jni/TransferCL/src/conv/BackpropWeightsNaive.cpp:547:46: error: 'multI' was not declared in this scope
     ExtractMinMultFromFile(minW, multW,minI, multI,minR, multR);
                                              ^
jni/TransferCL/src/conv/BackpropWeightsNaive.cpp:547:52: error: 'minR' was not declared in this scope
     ExtractMinMultFromFile(minW, multW,minI, multI,minR, multR);
                                                    ^
jni/TransferCL/src/conv/BackpropWeightsNaive.cpp:547:58: error: 'multR' was not declared in this scope
     ExtractMinMultFromFile(minW, multW,minI, multI,minR, multR);
                                                          ^
jni/TransferCL/src/conv/BackpropWeightsNaive.cpp:547:63: error: 'ExtractMinMultFromFile' was not declared in this scope
     ExtractMinMultFromFile(minW, multW,minI, multI,minR, multR);
                                                               ^
make.exe: *** [obj/local/armeabi-v7a/objs/transferCL/TransferCL/src/conv/BackpropWeightsNaive.o] Error 1
19:12:00 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCLNative <= transferCLinterface.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= predict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= train.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardGpuNaive.cpp
In file included from jni/trainEngine/../TransferCL/src/TransferCL.h:6:0,
                 from jni/trainEngine/train.cpp:11:
jni/trainEngine/train.cpp: In member function 'void TrainModel::compare_two_binary_files(FILE*, FILE*)':
jni/trainEngine/../TransferCL/src/dependencies.h:11:85: warning: format '%d' expects argument of type 'int', but argument 4 has type 'long int' [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/trainEngine/train.cpp:773:9: note: in expansion of macro 'LOGI'
         LOGI("Two files are not equal :  byte poistion at which two files differ is %d\n", ftell(fp1)+1);
         ^
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNet.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TransferCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGD.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackpropWeightsNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalMaker.cpp
jni/TransferCL/src/conv/BackpropWeightsNaive.cpp: In constructor 'BackpropWeightsNaive::BackpropWeightsNaive(EasyCL*, LayerDimensions)':
jni/TransferCL/src/conv/BackpropWeightsNaive.cpp:547:63: error: 'ExtractMinMultFromFile' was not declared in this scope
     ExtractMinMultFromFile(minW, multW,minI, multI,minR, multR);
                                                               ^
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedMaker.cpp
make.exe: *** [obj/local/armeabi-v7a/objs/transferCL/TransferCL/src/conv/BackpropWeightsNaive.o] Error 1
make.exe: *** Waiting for unfinished jobs....
19:13:32 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCLNative <= transferCLinterface.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= predict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= train.cpp
In file included from jni/TransferCL/src/pooling/../activate/../conv/ConvolutionalLayer.h:25:0,
                 from jni/TransferCL/src/pooling/../activate/ActivationLayer.h:14,
                 from jni/TransferCL/src/pooling/PoolingLayer.h:12,
                 from jni/TransferCL/src/pooling/PoolingLayer.cpp:13:
jni/TransferCL/src/pooling/../activate/../conv/BackpropWeightsNaive.h:78:15: error: extra qualification 'BackpropWeightsNaive::' on member 'ExtractMinMultFromFile' [-fpermissive]
  VIRTUAL void BackpropWeightsNaive::ExtractMinMultFromFile(float &minW, float &multW,float &minI, float &multI,float &minR, float &multR);
               ^
make.exe: *** [obj/local/armeabi-v7a/objs/transferCL/TransferCL/src/pooling/PoolingLayer.o] Error 1
make.exe: *** Waiting for unfinished jobs....
In file included from jni/trainEngine/../TransferCL/src/trainers/../fc/../conv/ConvolutionalLayer.h:25:0,
                 from jni/trainEngine/../TransferCL/src/trainers/../fc/FullyConnectedLayer.h:13,
                 from jni/trainEngine/../TransferCL/src/trainers/SGD.h:12,
                 from jni/trainEngine/../TransferCL/src/TransferCL.h:15,
                 from jni/trainEngine/train.cpp:11:
jni/trainEngine/../TransferCL/src/trainers/../fc/../conv/BackpropWeightsNaive.h:78:15: error: extra qualification 'BackpropWeightsNaive::' on member 'ExtractMinMultFromFile' [-fpermissive]
  VIRTUAL void BackpropWeightsNaive::ExtractMinMultFromFile(float &minW, float &multW,float &minI, float &multI,float &minR, float &multR);
               ^
In file included from jni/predictEngine/../TransferCL/src/trainers/../fc/../conv/ConvolutionalLayer.h:25:0,
                 from jni/predictEngine/../TransferCL/src/trainers/../fc/FullyConnectedLayer.h:13,
                 from jni/predictEngine/../TransferCL/src/trainers/SGD.h:12,
                 from jni/predictEngine/../TransferCL/src/TransferCL.h:15,
                 from jni/predictEngine/predict.h:53,
                 from jni/predictEngine/predict.cpp:17:
jni/predictEngine/../TransferCL/src/trainers/../fc/../conv/BackpropWeightsNaive.h:78:15: error: extra qualification 'BackpropWeightsNaive::' on member 'ExtractMinMultFromFile' [-fpermissive]
  VIRTUAL void BackpropWeightsNaive::ExtractMinMultFromFile(float &minW, float &multW,float &minI, float &multI,float &minR, float &multR);
               ^
In file included from jni/trainEngine/../TransferCL/src/TransferCL.h:6:0,
                 from jni/trainEngine/train.cpp:11:
jni/trainEngine/train.cpp: In member function 'void TrainModel::compare_two_binary_files(FILE*, FILE*)':
jni/trainEngine/../TransferCL/src/dependencies.h:11:85: warning: format '%d' expects argument of type 'int', but argument 4 has type 'long int' [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/trainEngine/train.cpp:773:9: note: in expansion of macro 'LOGI'
         LOGI("Two files are not equal :  byte poistion at which two files differ is %d\n", ftell(fp1)+1);
         ^
In file included from jni/predictEngine/../TransferCL/src/trainers/../fc/../conv/ConvolutionalLayer.h:25:0,
                 from jni/predictEngine/../TransferCL/src/trainers/../fc/FullyConnectedLayer.h:13,
                 from jni/predictEngine/../TransferCL/src/trainers/SGD.h:12,
                 from jni/predictEngine/../TransferCL/src/TransferCL.h:15,
                 from jni/predictEngine/predict.h:53,
                 from jni/transferCLinterface.cpp:10:
jni/predictEngine/../TransferCL/src/trainers/../fc/../conv/BackpropWeightsNaive.h:78:15: error: extra qualification 'BackpropWeightsNaive::' on member 'ExtractMinMultFromFile' [-fpermissive]
  VIRTUAL void BackpropWeightsNaive::ExtractMinMultFromFile(float &minW, float &multW,float &minI, float &multI,float &minR, float &multR);
               ^
make.exe: *** [obj/local/armeabi-v7a/objs/transferCL/trainEngine/train.o] Error 1
make.exe: *** [obj/local/armeabi-v7a/objs/transferCL/predictEngine/predict.o] Error 1
make.exe: *** [obj/local/armeabi-v7a/objs/transferCLNative/transferCLinterface.o] Error 1
19:13:45 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCLNative <= transferCLinterface.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= train.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= predict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingLayer.cpp
In file included from jni/trainEngine/../TransferCL/src/TransferCL.h:6:0,
                 from jni/trainEngine/train.cpp:11:
jni/trainEngine/train.cpp: In member function 'void TrainModel::compare_two_binary_files(FILE*, FILE*)':
jni/trainEngine/../TransferCL/src/dependencies.h:11:85: warning: format '%d' expects argument of type 'int', but argument 4 has type 'long int' [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/trainEngine/train.cpp:773:9: note: in expansion of macro 'LOGI'
         LOGI("Two files are not equal :  byte poistion at which two files differ is %d\n", ftell(fp1)+1);
         ^
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNet.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TransferCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGD.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackpropWeightsNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedLayer.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
19:14:38 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
19:16:56 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= BackpropWeightsNaive.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
19:18:18 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= BackpropWeightsNaive.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
19:21:08 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
19:27:31 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCLNative <= transferCLinterface.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= train.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= predict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetdefToNet.cpp
In file included from jni/trainEngine/../TransferCL/src/TransferCL.h:6:0,
                 from jni/trainEngine/train.cpp:11:
jni/trainEngine/train.cpp: In member function 'void TrainModel::compare_two_binary_files(FILE*, FILE*)':
jni/trainEngine/../TransferCL/src/dependencies.h:11:85: warning: format '%d' expects argument of type 'int', but argument 4 has type 'long int' [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/trainEngine/train.cpp:773:9: note: in expansion of macro 'LOGI'
         LOGI("Two files are not equal :  byte poistion at which two files differ is %d\n", ftell(fp1)+1);
         ^
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ManifestLoaderv1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Loader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv1Wrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= JpegHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= stringhelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FileHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= RandomSingleton.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainable.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNetMould.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNet.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TransferCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemandv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchData.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= EpochMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp: In member function 'virtual void NetLearnerOnDemandv2::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:186:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: postEpochTesting: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:193:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcherv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchProcess.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearner.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayer.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp: In member function 'virtual void NetLearnerOnDemand::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:183:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:188:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CrossEntropyLoss.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayerPredict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SquareLossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= IAcceptsLabels.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Layer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainingContext.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGD.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsPersister.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OriginalInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= UniformInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CppRuntimeBoundary.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackpropWeightsNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerDimensions.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= deviceinfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DevicesInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DeviceInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= EasyCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TemplatedKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= platforminfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLWrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConfigManager.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] Compile++ arm  : transferCL <= MnistLoader.cpp
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
19:34:50 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= BackpropWeightsNaive.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
19:36:23 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= BackpropWeightsNaive.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
19:47:20 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= BackpropWeightsNaive.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
19:54:09 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
19:57:40 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
19:58:59 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
20:11:49 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
20:12:52 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
20:15:02 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
20:16:34 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
20:17:51 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayer.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
20:18:52 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
20:19:40 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
20:31:27 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
jni/TransferCL/src/conv/ConvolutionalLayer.cpp: In member function 'virtual void ConvolutionalLayer::persistToArray(int, float*)':
jni/TransferCL/src/conv/ConvolutionalLayer.cpp:1206:23: error: 'i1' was not declared in this scope
    array[i]=(float)(p[i1])/multW+minW;
                       ^
make.exe: *** [obj/local/armeabi-v7a/objs/transferCL/TransferCL/src/conv/ConvolutionalLayer.o] Error 1
20:31:57 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
20:33:14 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
20:34:24 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
20:35:01 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCLNative <= transferCLinterface.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= train.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetdefToNet.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= predict.cpp
In file included from jni/trainEngine/../TransferCL/src/TransferCL.h:6:0,
                 from jni/trainEngine/train.cpp:11:
jni/trainEngine/train.cpp: In member function 'void TrainModel::compare_two_binary_files(FILE*, FILE*)':
jni/trainEngine/../TransferCL/src/dependencies.h:11:85: warning: format '%d' expects argument of type 'int', but argument 4 has type 'long int' [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/trainEngine/train.cpp:773:9: note: in expansion of macro 'LOGI'
         LOGI("Two files are not equal :  byte poistion at which two files differ is %d\n", ftell(fp1)+1);
         ^
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ManifestLoaderv1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Loader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv1Wrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= JpegHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FileHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= stringhelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= RandomSingleton.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainable.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNetMould.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNet.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TransferCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemandv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchData.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp: In member function 'virtual void NetLearnerOnDemandv2::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:186:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: postEpochTesting: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:193:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= EpochMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcherv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchProcess.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearner.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayerMaker.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp: In member function 'virtual void NetLearnerOnDemand::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:183:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:188:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CrossEntropyLoss.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayerPredict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SquareLossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= IAcceptsLabels.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Layer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainingContext.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGD.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsPersister.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OriginalInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= UniformInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CppRuntimeBoundary.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackpropWeightsNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerDimensions.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= deviceinfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DevicesInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DeviceInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= EasyCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TemplatedKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= platforminfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLWrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConfigManager.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= MnistLoader.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
20:38:58 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCLNative <= transferCLinterface.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= train.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= predict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetdefToNet.cpp
In file included from jni/trainEngine/../TransferCL/src/TransferCL.h:6:0,
                 from jni/trainEngine/train.cpp:11:
jni/trainEngine/train.cpp: In member function 'void TrainModel::compare_two_binary_files(FILE*, FILE*)':
jni/trainEngine/../TransferCL/src/dependencies.h:11:85: warning: format '%d' expects argument of type 'int', but argument 4 has type 'long int' [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/trainEngine/train.cpp:773:9: note: in expansion of macro 'LOGI'
         LOGI("Two files are not equal :  byte poistion at which two files differ is %d\n", ftell(fp1)+1);
         ^
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ManifestLoaderv1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Loader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv1Wrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= JpegHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FileHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= stringhelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= RandomSingleton.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainable.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNetMould.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNet.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TransferCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemandv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchData.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp: In member function 'virtual void NetLearnerOnDemandv2::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:186:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: postEpochTesting: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:193:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= EpochMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcherv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchProcess.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearner.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayer.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp: In member function 'virtual void NetLearnerOnDemand::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:183:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:188:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CrossEntropyLoss.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayerPredict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SquareLossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= IAcceptsLabels.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Layer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainingContext.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGD.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsPersister.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OriginalInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= UniformInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CppRuntimeBoundary.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackpropWeightsNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerDimensions.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= deviceinfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DevicesInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DeviceInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= EasyCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TemplatedKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLWrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= platforminfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConfigManager.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= MnistLoader.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
20:43:54 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
20:44:49 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCLNative <= transferCLinterface.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= train.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetdefToNet.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= predict.cpp
In file included from jni/trainEngine/../TransferCL/src/TransferCL.h:6:0,
                 from jni/trainEngine/train.cpp:11:
jni/trainEngine/train.cpp: In member function 'void TrainModel::compare_two_binary_files(FILE*, FILE*)':
jni/trainEngine/../TransferCL/src/dependencies.h:11:85: warning: format '%d' expects argument of type 'int', but argument 4 has type 'long int' [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/trainEngine/train.cpp:773:9: note: in expansion of macro 'LOGI'
         LOGI("Two files are not equal :  byte poistion at which two files differ is %d\n", ftell(fp1)+1);
         ^
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ManifestLoaderv1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Loader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv1Wrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= JpegHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FileHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= stringhelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= RandomSingleton.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNetMould.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainable.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNet.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TransferCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemandv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchData.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp: In member function 'virtual void NetLearnerOnDemandv2::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:186:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: postEpochTesting: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:193:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= EpochMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcherv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchProcess.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearner.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayer.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp: In member function 'virtual void NetLearnerOnDemand::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:183:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:188:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CrossEntropyLoss.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayerPredict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SquareLossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= IAcceptsLabels.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Layer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainingContext.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGD.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsPersister.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OriginalInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= UniformInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CppRuntimeBoundary.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackpropWeightsNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerDimensions.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= deviceinfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DevicesInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DeviceInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= EasyCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TemplatedKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= platforminfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLWrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConfigManager.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= MnistLoader.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
20:53:39 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
20:55:11 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
20:56:31 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCLNative <= transferCLinterface.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= predict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetdefToNet.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= train.cpp
In file included from jni/trainEngine/../TransferCL/src/TransferCL.h:6:0,
                 from jni/trainEngine/train.cpp:11:
jni/trainEngine/train.cpp: In member function 'void TrainModel::compare_two_binary_files(FILE*, FILE*)':
jni/trainEngine/../TransferCL/src/dependencies.h:11:85: warning: format '%d' expects argument of type 'int', but argument 4 has type 'long int' [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/trainEngine/train.cpp:773:9: note: in expansion of macro 'LOGI'
         LOGI("Two files are not equal :  byte poistion at which two files differ is %d\n", ftell(fp1)+1);
         ^
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ManifestLoaderv1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Loader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv1Wrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= JpegHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FileHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= stringhelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= RandomSingleton.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainable.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNet.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNetMould.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TransferCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemandv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchData.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp: In member function 'virtual void NetLearnerOnDemandv2::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:186:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: postEpochTesting: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:193:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= EpochMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcherv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchProcess.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearner.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayer.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp: In member function 'virtual void NetLearnerOnDemand::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:183:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:188:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CrossEntropyLoss.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayerPredict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SquareLossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= IAcceptsLabels.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Layer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainingContext.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGD.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsPersister.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OriginalInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= UniformInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CppRuntimeBoundary.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackpropWeightsNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerDimensions.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= deviceinfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DevicesInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DeviceInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= EasyCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TemplatedKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= platforminfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLWrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConfigManager.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= MnistLoader.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
20:59:07 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCLNative <= transferCLinterface.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= train.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= predict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetdefToNet.cpp
In file included from jni/trainEngine/../TransferCL/src/TransferCL.h:6:0,
                 from jni/trainEngine/train.cpp:11:
jni/trainEngine/train.cpp: In member function 'void TrainModel::compare_two_binary_files(FILE*, FILE*)':
jni/trainEngine/../TransferCL/src/dependencies.h:11:85: warning: format '%d' expects argument of type 'int', but argument 4 has type 'long int' [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/trainEngine/train.cpp:773:9: note: in expansion of macro 'LOGI'
         LOGI("Two files are not equal :  byte poistion at which two files differ is %d\n", ftell(fp1)+1);
         ^
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ManifestLoaderv1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Loader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv1Wrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= JpegHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FileHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= stringhelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= RandomSingleton.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainable.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNetMould.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNet.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TransferCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemandv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchData.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= EpochMaker.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp: In member function 'virtual void NetLearnerOnDemandv2::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:186:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: postEpochTesting: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:193:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcherv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchProcess.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearner.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayer.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp: In member function 'virtual void NetLearnerOnDemand::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:183:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:188:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CrossEntropyLoss.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayerPredict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SquareLossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= IAcceptsLabels.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Layer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainingContext.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGD.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsPersister.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OriginalInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= UniformInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CppRuntimeBoundary.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackpropWeightsNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerDimensions.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= deviceinfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DevicesInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DeviceInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= EasyCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TemplatedKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= platforminfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLWrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConfigManager.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= MnistLoader.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
21:03:03 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
21:04:08 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCLNative <= transferCLinterface.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= predict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= train.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetdefToNet.cpp
In file included from jni/trainEngine/../TransferCL/src/TransferCL.h:6:0,
                 from jni/trainEngine/train.cpp:11:
jni/trainEngine/train.cpp: In member function 'void TrainModel::compare_two_binary_files(FILE*, FILE*)':
jni/trainEngine/../TransferCL/src/dependencies.h:11:85: warning: format '%d' expects argument of type 'int', but argument 4 has type 'long int' [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/trainEngine/train.cpp:773:9: note: in expansion of macro 'LOGI'
         LOGI("Two files are not equal :  byte poistion at which two files differ is %d\n", ftell(fp1)+1);
         ^
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ManifestLoaderv1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Loader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv1Wrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= JpegHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FileHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= stringhelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainable.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= RandomSingleton.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNetMould.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNet.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TransferCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemandv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchData.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp: In member function 'virtual void NetLearnerOnDemandv2::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:186:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: postEpochTesting: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:193:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= EpochMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcherv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchProcess.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearner.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayer.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp: In member function 'virtual void NetLearnerOnDemand::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:183:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:188:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CrossEntropyLoss.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayerPredict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SquareLossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= IAcceptsLabels.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Layer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainingContext.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGD.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsPersister.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OriginalInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CppRuntimeBoundary.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= UniformInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackpropWeightsNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerDimensions.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= deviceinfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DevicesInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DeviceInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= EasyCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TemplatedKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLWrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= platforminfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConfigManager.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= MnistLoader.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
21:06:41 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
21:07:58 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCLNative <= transferCLinterface.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= train.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetdefToNet.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= predict.cpp
In file included from jni/trainEngine/../TransferCL/src/TransferCL.h:6:0,
                 from jni/trainEngine/train.cpp:11:
jni/trainEngine/train.cpp: In member function 'void TrainModel::compare_two_binary_files(FILE*, FILE*)':
jni/trainEngine/../TransferCL/src/dependencies.h:11:85: warning: format '%d' expects argument of type 'int', but argument 4 has type 'long int' [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/trainEngine/train.cpp:773:9: note: in expansion of macro 'LOGI'
         LOGI("Two files are not equal :  byte poistion at which two files differ is %d\n", ftell(fp1)+1);
         ^
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ManifestLoaderv1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Loader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv1Wrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= JpegHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FileHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= stringhelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= RandomSingleton.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainable.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNetMould.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNet.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TransferCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemandv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchData.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp: In member function 'virtual void NetLearnerOnDemandv2::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:186:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: postEpochTesting: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:193:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= EpochMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcherv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchProcess.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearner.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayer.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp: In member function 'virtual void NetLearnerOnDemand::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:183:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:188:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CrossEntropyLoss.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayerPredict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SquareLossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= IAcceptsLabels.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Layer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainingContext.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGD.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsPersister.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OriginalInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CppRuntimeBoundary.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= UniformInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackpropWeightsNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerDimensions.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= deviceinfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DevicesInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DeviceInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= EasyCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TemplatedKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= platforminfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLWrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConfigManager.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= MnistLoader.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
21:11:41 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCLNative <= transferCLinterface.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= predict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= train.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetdefToNet.cpp
In file included from jni/trainEngine/../TransferCL/src/TransferCL.h:6:0,
                 from jni/trainEngine/train.cpp:11:
jni/trainEngine/train.cpp: In member function 'void TrainModel::compare_two_binary_files(FILE*, FILE*)':
jni/trainEngine/../TransferCL/src/dependencies.h:11:85: warning: format '%d' expects argument of type 'int', but argument 4 has type 'long int' [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/trainEngine/train.cpp:773:9: note: in expansion of macro 'LOGI'
         LOGI("Two files are not equal :  byte poistion at which two files differ is %d\n", ftell(fp1)+1);
         ^
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ManifestLoaderv1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Loader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv1Wrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= JpegHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FileHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= stringhelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= RandomSingleton.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainable.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNetMould.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNet.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TransferCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemandv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchData.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp: In member function 'virtual void NetLearnerOnDemandv2::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:186:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: postEpochTesting: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:193:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= EpochMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcherv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchProcess.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearner.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayer.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp: In member function 'virtual void NetLearnerOnDemand::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:183:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:188:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CrossEntropyLoss.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayerPredict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SquareLossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= IAcceptsLabels.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Layer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainingContext.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGD.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsPersister.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OriginalInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= UniformInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CppRuntimeBoundary.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackpropWeightsNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerDimensions.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= deviceinfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DevicesInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DeviceInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= EasyCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TemplatedKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= platforminfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLWrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConfigManager.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= MnistLoader.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
21:14:30 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCLNative <= transferCLinterface.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= train.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= predict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetdefToNet.cpp
In file included from jni/trainEngine/../TransferCL/src/TransferCL.h:6:0,
                 from jni/trainEngine/train.cpp:11:
jni/trainEngine/train.cpp: In member function 'void TrainModel::compare_two_binary_files(FILE*, FILE*)':
jni/trainEngine/../TransferCL/src/dependencies.h:11:85: warning: format '%d' expects argument of type 'int', but argument 4 has type 'long int' [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/trainEngine/train.cpp:773:9: note: in expansion of macro 'LOGI'
         LOGI("Two files are not equal :  byte poistion at which two files differ is %d\n", ftell(fp1)+1);
         ^
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ManifestLoaderv1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Loader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv1Wrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= JpegHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FileHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= stringhelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= RandomSingleton.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainable.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNetMould.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNet.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TransferCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemandv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchData.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= EpochMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp: In member function 'virtual void NetLearnerOnDemandv2::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:186:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: postEpochTesting: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:193:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcherv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchProcess.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearner.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayer.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp: In member function 'virtual void NetLearnerOnDemand::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:183:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:188:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CrossEntropyLoss.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayerPredict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SquareLossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= IAcceptsLabels.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Layer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainingContext.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGD.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsPersister.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OriginalInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= UniformInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CppRuntimeBoundary.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackpropWeightsNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerDimensions.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= deviceinfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DevicesInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= EasyCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DeviceInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TemplatedKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= platforminfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLWrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConfigManager.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= MnistLoader.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
21:20:14 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCLNative <= transferCLinterface.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= train.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetdefToNet.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= predict.cpp
In file included from jni/trainEngine/../TransferCL/src/TransferCL.h:6:0,
                 from jni/trainEngine/train.cpp:11:
jni/trainEngine/train.cpp: In member function 'void TrainModel::compare_two_binary_files(FILE*, FILE*)':
jni/trainEngine/../TransferCL/src/dependencies.h:11:85: warning: format '%d' expects argument of type 'int', but argument 4 has type 'long int' [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/trainEngine/train.cpp:773:9: note: in expansion of macro 'LOGI'
         LOGI("Two files are not equal :  byte poistion at which two files differ is %d\n", ftell(fp1)+1);
         ^
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ManifestLoaderv1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Loader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv1Wrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= JpegHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FileHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= stringhelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= RandomSingleton.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainable.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNetMould.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNet.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TransferCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemandv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchData.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp: In member function 'virtual void NetLearnerOnDemandv2::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:186:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: postEpochTesting: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:193:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= EpochMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcherv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchProcess.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearner.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayer.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp: In member function 'virtual void NetLearnerOnDemand::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:183:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:188:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CrossEntropyLoss.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayerPredict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SquareLossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= IAcceptsLabels.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Layer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainingContext.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGD.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsPersister.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OriginalInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= UniformInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CppRuntimeBoundary.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackpropWeightsNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerDimensions.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= deviceinfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DevicesInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DeviceInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= EasyCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TemplatedKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= platforminfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLWrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConfigManager.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= MnistLoader.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
21:29:04 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayer.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
21:30:08 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayer.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
21:33:49 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayer.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
21:38:21 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayer.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
21:39:28 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
21:39:44 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
21:42:48 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
21:43:38 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayer.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
21:44:29 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayer.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
21:47:01 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
21:50:05 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayer.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
21:52:57 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
22:00:45 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
22:01:43 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
22:02:52 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
22:03:59 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayer.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
22:04:49 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCLNative <= transferCLinterface.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= train.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetdefToNet.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= predict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ManifestLoaderv1.cpp
In file included from jni/trainEngine/../TransferCL/src/TransferCL.h:6:0,
                 from jni/trainEngine/train.cpp:11:
jni/trainEngine/train.cpp: In member function 'void TrainModel::compare_two_binary_files(FILE*, FILE*)':
jni/trainEngine/../TransferCL/src/dependencies.h:11:85: warning: format '%d' expects argument of type 'int', but argument 4 has type 'long int' [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/trainEngine/train.cpp:773:9: note: in expansion of macro 'LOGI'
         LOGI("Two files are not equal :  byte poistion at which two files differ is %d\n", ftell(fp1)+1);
         ^
[armeabi-v7a] Compile++ arm  : transferCL <= Loader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv1Wrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= JpegHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FileHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= stringhelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainable.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= RandomSingleton.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNetMould.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNet.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TransferCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemandv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchData.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= EpochMaker.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp: In member function 'virtual void NetLearnerOnDemandv2::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:186:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: postEpochTesting: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:193:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcherv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchProcess.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearner.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayer.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp: In member function 'virtual void NetLearnerOnDemand::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:183:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:188:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CrossEntropyLoss.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayerPredict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SquareLossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= IAcceptsLabels.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Layer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainingContext.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGD.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsPersister.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OriginalInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= UniformInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CppRuntimeBoundary.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackpropWeightsNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerDimensions.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= deviceinfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DevicesInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DeviceInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= EasyCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TemplatedKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= platforminfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLWrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConfigManager.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= MnistLoader.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
22:07:18 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCLNative <= transferCLinterface.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= train.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetdefToNet.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= predict.cpp
In file included from jni/trainEngine/../TransferCL/src/TransferCL.h:6:0,
                 from jni/trainEngine/train.cpp:11:
jni/trainEngine/train.cpp: In member function 'void TrainModel::compare_two_binary_files(FILE*, FILE*)':
jni/trainEngine/../TransferCL/src/dependencies.h:11:85: warning: format '%d' expects argument of type 'int', but argument 4 has type 'long int' [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/trainEngine/train.cpp:773:9: note: in expansion of macro 'LOGI'
         LOGI("Two files are not equal :  byte poistion at which two files differ is %d\n", ftell(fp1)+1);
         ^
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ManifestLoaderv1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Loader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv1Wrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= JpegHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FileHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= stringhelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainable.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= RandomSingleton.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNetMould.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNet.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TransferCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemandv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchData.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp: In member function 'virtual void NetLearnerOnDemandv2::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:186:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: postEpochTesting: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:193:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= EpochMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcherv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchProcess.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearner.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayer.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp: In member function 'virtual void NetLearnerOnDemand::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:183:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:188:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CrossEntropyLoss.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SquareLossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayerPredict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= IAcceptsLabels.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Layer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainingContext.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGD.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsPersister.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OriginalInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= UniformInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CppRuntimeBoundary.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackpropWeightsNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerDimensions.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= deviceinfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DevicesInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DeviceInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= EasyCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TemplatedKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= platforminfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLWrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConfigManager.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= MnistLoader.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
22:11:26 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
In file included from jni/TransferCL/src/conv/Forward1.h:10:0,
                 from jni/TransferCL/src/conv/Forward1.cpp:7:
jni/TransferCL/src/conv/Forward1.cpp: In member function 'virtual void Forward1::ExtractMinMultFromData(int, CLWrapper*, CLWrapper*, CLWrapper*, CLWrapper*, CLWrapper*, CLWrapper*, CLWrapper*, CLWrapper*)':
jni/TransferCL/src/conv/../dependencies.h:11:85: warning: format '%d' expects argument of type 'int', but argument 4 has type 'const char*' [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/conv/Forward1.cpp:1344:1: note: in expansion of macro 'LOGI'
 LOGI("--------------------------- %d",s.c_str());
 ^
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
22:12:04 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
22:12:39 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
22:15:45 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
22:17:37 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCLNative <= transferCLinterface.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= train.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetdefToNet.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= predict.cpp
In file included from jni/trainEngine/../TransferCL/src/TransferCL.h:6:0,
                 from jni/trainEngine/train.cpp:11:
jni/trainEngine/train.cpp: In member function 'void TrainModel::compare_two_binary_files(FILE*, FILE*)':
jni/trainEngine/../TransferCL/src/dependencies.h:11:85: warning: format '%d' expects argument of type 'int', but argument 4 has type 'long int' [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/trainEngine/train.cpp:773:9: note: in expansion of macro 'LOGI'
         LOGI("Two files are not equal :  byte poistion at which two files differ is %d\n", ftell(fp1)+1);
         ^
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ManifestLoaderv1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Loader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv1Wrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= JpegHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FileHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= stringhelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= RandomSingleton.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainable.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNetMould.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNet.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TransferCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemandv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchData.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= EpochMaker.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp: In member function 'virtual void NetLearnerOnDemandv2::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:186:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: postEpochTesting: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:193:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcherv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchProcess.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearner.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayer.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp: In member function 'virtual void NetLearnerOnDemand::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:183:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:188:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CrossEntropyLoss.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayerPredict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SquareLossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= IAcceptsLabels.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Layer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainingContext.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGD.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsPersister.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OriginalInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= UniformInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CppRuntimeBoundary.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackpropWeightsNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerDimensions.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= deviceinfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DevicesInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DeviceInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= EasyCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TemplatedKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= platforminfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLWrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConfigManager.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= MnistLoader.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
22:19:53 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
22:22:32 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
22:26:07 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCLNative <= transferCLinterface.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= predict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= train.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetdefToNet.cpp
In file included from jni/trainEngine/../TransferCL/src/TransferCL.h:6:0,
                 from jni/trainEngine/train.cpp:11:
jni/trainEngine/train.cpp: In member function 'void TrainModel::compare_two_binary_files(FILE*, FILE*)':
jni/trainEngine/../TransferCL/src/dependencies.h:11:85: warning: format '%d' expects argument of type 'int', but argument 4 has type 'long int' [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/trainEngine/train.cpp:773:9: note: in expansion of macro 'LOGI'
         LOGI("Two files are not equal :  byte poistion at which two files differ is %d\n", ftell(fp1)+1);
         ^
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ManifestLoaderv1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Loader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv1Wrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= JpegHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FileHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= stringhelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= RandomSingleton.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainable.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNetMould.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNet.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TransferCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemandv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchData.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp: In member function 'virtual void NetLearnerOnDemandv2::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:186:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: postEpochTesting: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:193:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= EpochMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcherv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchProcess.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearner.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayer.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp: In member function 'virtual void NetLearnerOnDemand::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:183:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:188:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CrossEntropyLoss.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayerPredict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SquareLossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= IAcceptsLabels.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Layer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainingContext.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGD.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsPersister.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OriginalInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= UniformInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CppRuntimeBoundary.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackpropWeightsNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerDimensions.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= deviceinfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DevicesInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DeviceInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= EasyCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TemplatedKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= platforminfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLWrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConfigManager.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= MnistLoader.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
22:27:31 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
22:28:39 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCLNative <= transferCLinterface.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= predict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= train.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetdefToNet.cpp
In file included from jni/trainEngine/../TransferCL/src/TransferCL.h:6:0,
                 from jni/trainEngine/train.cpp:11:
jni/trainEngine/train.cpp: In member function 'void TrainModel::compare_two_binary_files(FILE*, FILE*)':
jni/trainEngine/../TransferCL/src/dependencies.h:11:85: warning: format '%d' expects argument of type 'int', but argument 4 has type 'long int' [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/trainEngine/train.cpp:773:9: note: in expansion of macro 'LOGI'
         LOGI("Two files are not equal :  byte poistion at which two files differ is %d\n", ftell(fp1)+1);
         ^
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ManifestLoaderv1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Loader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv1Wrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= JpegHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FileHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= stringhelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainable.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= RandomSingleton.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNetMould.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNet.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TransferCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemandv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchData.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp: In member function 'virtual void NetLearnerOnDemandv2::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:186:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: postEpochTesting: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:193:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= EpochMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcherv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchProcess.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearner.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayerMaker.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp: In member function 'virtual void NetLearnerOnDemand::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:183:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:188:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CrossEntropyLoss.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayerPredict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SquareLossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= IAcceptsLabels.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Layer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainingContext.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGD.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsPersister.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OriginalInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= UniformInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CppRuntimeBoundary.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackpropWeightsNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerDimensions.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= deviceinfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DevicesInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DeviceInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TemplatedKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= EasyCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= platforminfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLWrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConfigManager.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] Compile++ arm  : transferCL <= MnistLoader.cpp
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
22:31:29 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
22:33:56 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
22:35:14 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
22:36:13 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
22:38:25 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
22:40:18 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCLNative <= transferCLinterface.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetdefToNet.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= predict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= train.cpp
In file included from jni/trainEngine/../TransferCL/src/TransferCL.h:6:0,
                 from jni/trainEngine/train.cpp:11:
jni/trainEngine/train.cpp: In member function 'void TrainModel::compare_two_binary_files(FILE*, FILE*)':
jni/trainEngine/../TransferCL/src/dependencies.h:11:85: warning: format '%d' expects argument of type 'int', but argument 4 has type 'long int' [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/trainEngine/train.cpp:773:9: note: in expansion of macro 'LOGI'
         LOGI("Two files are not equal :  byte poistion at which two files differ is %d\n", ftell(fp1)+1);
         ^
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ManifestLoaderv1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Loader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv1Wrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= JpegHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FileHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= stringhelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= RandomSingleton.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainable.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNetMould.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNet.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TransferCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemandv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchData.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp: In member function 'virtual void NetLearnerOnDemandv2::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:186:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: postEpochTesting: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:193:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= EpochMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcherv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchProcess.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearner.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayer.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp: In member function 'virtual void NetLearnerOnDemand::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:183:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:188:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CrossEntropyLoss.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayerPredict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SquareLossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= IAcceptsLabels.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Layer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainingContext.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGD.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsPersister.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OriginalInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= UniformInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CppRuntimeBoundary.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackpropWeightsNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerDimensions.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= deviceinfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DevicesInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DeviceInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= EasyCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TemplatedKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= platforminfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLWrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConfigManager.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= MnistLoader.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
22:46:46 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCLNative <= transferCLinterface.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= train.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= predict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetdefToNet.cpp
In file included from jni/trainEngine/../TransferCL/src/TransferCL.h:6:0,
                 from jni/trainEngine/train.cpp:11:
jni/trainEngine/train.cpp: In member function 'void TrainModel::compare_two_binary_files(FILE*, FILE*)':
jni/trainEngine/../TransferCL/src/dependencies.h:11:85: warning: format '%d' expects argument of type 'int', but argument 4 has type 'long int' [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/trainEngine/train.cpp:773:9: note: in expansion of macro 'LOGI'
         LOGI("Two files are not equal :  byte poistion at which two files differ is %d\n", ftell(fp1)+1);
         ^
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Loader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ManifestLoaderv1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv1Wrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingLayer.cpp
jni/TransferCL/src/pooling/PoolingLayer.cpp:436:18: error: operator '==' has no left operand
 #if HALF_ACCURACY==1
                  ^
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardGpuNaive.cpp
make.exe: *** [obj/local/armeabi-v7a/objs/transferCL/TransferCL/src/pooling/PoolingLayer.o] Error 1
make.exe: *** Waiting for unfinished jobs....
22:47:19 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackward.cpp
jni/TransferCL/src/pooling/PoolingLayer.cpp:436:18: error: operator '==' has no left operand
 #if HALF_ACCURACY==1
                  ^
make.exe: *** [obj/local/armeabi-v7a/objs/transferCL/TransferCL/src/pooling/PoolingLayer.o] Error 1
make.exe: *** Waiting for unfinished jobs....
22:47:32 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= JpegHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FileHelper.cpp
jni/TransferCL/src/pooling/PoolingLayer.cpp:436:19: error: operator '==' has no left operand
 #if HALF_ACCURACY == 1
                   ^
make.exe: *** [obj/local/armeabi-v7a/objs/transferCL/TransferCL/src/pooling/PoolingLayer.o] Error 1
make.exe: *** Waiting for unfinished jobs....
22:48:23 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= stringhelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainable.cpp
jni/TransferCL/src/pooling/PoolingLayer.cpp:436:19: error: operator '==' has no left operand
 #if HALF_ACCURACY == 1
                   ^
[armeabi-v7a] Compile++ arm  : transferCL <= RandomSingleton.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNetMould.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNet.cpp
make.exe: *** [obj/local/armeabi-v7a/objs/transferCL/TransferCL/src/pooling/PoolingLayer.o] Error 1
make.exe: *** Waiting for unfinished jobs....
22:48:37 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCLNative <= transferCLinterface.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= train.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetdefToNet.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= predict.cpp
In file included from jni/trainEngine/../TransferCL/src/TransferCL.h:6:0,
                 from jni/trainEngine/train.cpp:11:
jni/trainEngine/train.cpp: In member function 'void TrainModel::compare_two_binary_files(FILE*, FILE*)':
jni/trainEngine/../TransferCL/src/dependencies.h:11:85: warning: format '%d' expects argument of type 'int', but argument 4 has type 'long int' [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/trainEngine/train.cpp:773:9: note: in expansion of macro 'LOGI'
         LOGI("Two files are not equal :  byte poistion at which two files differ is %d\n", ftell(fp1)+1);
         ^
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ManifestLoaderv1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Loader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv1Wrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= JpegHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FileHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= stringhelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= RandomSingleton.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainable.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNetMould.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNet.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TransferCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemandv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchData.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= EpochMaker.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp: In member function 'virtual void NetLearnerOnDemandv2::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:186:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: postEpochTesting: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:193:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcherv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchProcess.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearner.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayer.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp: In member function 'virtual void NetLearnerOnDemand::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:183:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:188:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CrossEntropyLoss.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayerPredict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SquareLossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= IAcceptsLabels.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Layer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainingContext.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGD.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsPersister.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OriginalInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= UniformInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CppRuntimeBoundary.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackpropWeightsNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerDimensions.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= deviceinfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DevicesInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DeviceInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= EasyCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TemplatedKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= platforminfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLWrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConfigManager.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= MnistLoader.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
22:50:16 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
22:50:55 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
22:51:26 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
22:54:27 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
22:55:29 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
22:56:38 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
22:59:25 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= predict.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
23:00:22 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= predict.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
23:00:49 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
23:01:26 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= predict.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
23:04:01 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
23:05:09 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
23:11:24 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCLNative <= transferCLinterface.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= train.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= predict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetdefToNet.cpp
In file included from jni/trainEngine/../TransferCL/src/TransferCL.h:6:0,
                 from jni/trainEngine/train.cpp:11:
jni/trainEngine/train.cpp: In member function 'void TrainModel::compare_two_binary_files(FILE*, FILE*)':
jni/trainEngine/../TransferCL/src/dependencies.h:11:85: warning: format '%d' expects argument of type 'int', but argument 4 has type 'long int' [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/trainEngine/train.cpp:773:9: note: in expansion of macro 'LOGI'
         LOGI("Two files are not equal :  byte poistion at which two files differ is %d\n", ftell(fp1)+1);
         ^
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ManifestLoaderv1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Loader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv1Wrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= JpegHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FileHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= stringhelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= RandomSingleton.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainable.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNetMould.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNet.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TransferCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemandv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchData.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp: In member function 'virtual void NetLearnerOnDemandv2::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:186:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: postEpochTesting: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:193:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= EpochMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcherv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchProcess.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearner.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayer.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp: In member function 'virtual void NetLearnerOnDemand::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:183:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:188:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CrossEntropyLoss.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayerPredict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SquareLossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= IAcceptsLabels.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Layer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainingContext.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGD.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsPersister.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OriginalInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= UniformInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CppRuntimeBoundary.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackpropWeightsNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerDimensions.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= deviceinfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DevicesInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DeviceInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= EasyCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TemplatedKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= platforminfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLWrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConfigManager.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= MnistLoader.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
18:24:12 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
18:30:55 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCLNative <= transferCLinterface.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= train.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= predict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetdefToNet.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ManifestLoaderv1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Loader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv1Wrapper.cpp
In file included from jni/trainEngine/../TransferCL/src/TransferCL.h:6:0,
                 from jni/trainEngine/train.cpp:11:
jni/trainEngine/train.cpp: In member function 'void TrainModel::compare_two_binary_files(FILE*, FILE*)':
jni/trainEngine/../TransferCL/src/dependencies.h:11:85: warning: format '%d' expects argument of type 'int', but argument 4 has type 'long int' [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/trainEngine/train.cpp:773:9: note: in expansion of macro 'LOGI'
         LOGI("Two files are not equal :  byte poistion at which two files differ is %d\n", ftell(fp1)+1);
         ^
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FileHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= JpegHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= stringhelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= RandomSingleton.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainable.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNet.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNetMould.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TransferCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemandv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchData.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= EpochMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp: In member function 'virtual void NetLearnerOnDemandv2::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:186:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: postEpochTesting: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:193:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcherv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchProcess.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearner.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayer.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp: In member function 'virtual void NetLearnerOnDemand::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:183:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:188:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CrossEntropyLoss.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayerPredict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SquareLossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= IAcceptsLabels.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Layer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainingContext.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGD.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsPersister.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OriginalInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= UniformInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CppRuntimeBoundary.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackpropWeightsNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerDimensions.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= deviceinfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DevicesInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DeviceInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= EasyCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TemplatedKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= platforminfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLWrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConfigManager.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= MnistLoader.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
18:39:25 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCLNative <= transferCLinterface.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= predict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= train.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetdefToNet.cpp
In file included from jni/trainEngine/../TransferCL/src/TransferCL.h:6:0,
                 from jni/trainEngine/train.cpp:11:
jni/trainEngine/train.cpp: In member function 'void TrainModel::compare_two_binary_files(FILE*, FILE*)':
jni/trainEngine/../TransferCL/src/dependencies.h:11:85: warning: format '%d' expects argument of type 'int', but argument 4 has type 'long int' [-Wformat=]
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv2.cpp
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/trainEngine/train.cpp:773:9: note: in expansion of macro 'LOGI'
         LOGI("Two files are not equal :  byte poistion at which two files differ is %d\n", ftell(fp1)+1);
         ^
[armeabi-v7a] Compile++ arm  : transferCL <= ManifestLoaderv1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Loader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv1Wrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= JpegHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FileHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= stringhelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= RandomSingleton.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainable.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNetMould.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNet.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TransferCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemandv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchData.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp: In member function 'virtual void NetLearnerOnDemandv2::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:186:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: postEpochTesting: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:193:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= EpochMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcherv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchProcess.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearner.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayerMaker.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp: In member function 'virtual void NetLearnerOnDemand::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:183:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:188:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CrossEntropyLoss.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayerPredict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= IAcceptsLabels.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SquareLossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Layer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainingContext.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGD.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsPersister.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OriginalInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= UniformInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CppRuntimeBoundary.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackpropWeightsNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerDimensions.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= deviceinfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DevicesInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DeviceInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= EasyCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TemplatedKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= platforminfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLWrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConfigManager.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= MnistLoader.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
18:59:46 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
19:03:52 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
19:07:45 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
19:16:57 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
19:23:39 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCLNative <= transferCLinterface.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= train.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= predict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetdefToNet.cpp
In file included from jni/trainEngine/../TransferCL/src/TransferCL.h:6:0,
                 from jni/trainEngine/train.cpp:11:
jni/trainEngine/train.cpp: In member function 'void TrainModel::compare_two_binary_files(FILE*, FILE*)':
jni/trainEngine/../TransferCL/src/dependencies.h:11:85: warning: format '%d' expects argument of type 'int', but argument 4 has type 'long int' [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/trainEngine/train.cpp:773:9: note: in expansion of macro 'LOGI'
         LOGI("Two files are not equal :  byte poistion at which two files differ is %d\n", ftell(fp1)+1);
         ^
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ManifestLoaderv1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Loader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv1Wrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= JpegHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FileHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= stringhelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= RandomSingleton.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainable.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNetMould.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNet.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TransferCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemandv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchData.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= EpochMaker.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp: In member function 'virtual void NetLearnerOnDemandv2::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:186:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: postEpochTesting: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:193:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcherv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchProcess.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearner.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayer.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp: In member function 'virtual void NetLearnerOnDemand::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:183:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:188:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= LossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CrossEntropyLoss.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayerPredict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SquareLossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= IAcceptsLabels.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Layer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainingContext.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGD.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsPersister.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OriginalInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= UniformInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CppRuntimeBoundary.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackpropWeightsNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalMaker.cpp
jni/TransferCL/src/conv/ConvolutionalLayer.cpp: In member function 'virtual void ConvolutionalLayer::backward()':
jni/TransferCL/src/conv/ConvolutionalLayer.cpp:2111:49: error: qualified-id in declaration before '(' token
 VIRTUAL std::string ConvolutionalLayer::asString() const {
                                                 ^
jni/TransferCL/src/conv/ConvolutionalLayer.cpp:2119:51: error: qualified-id in declaration before '(' token
 VIRTUAL bool ConvolutionalLayer::needsTrainerState() const {
                                                   ^
jni/TransferCL/src/conv/ConvolutionalLayer.cpp:2127:40: error: qualified-id in declaration before '(' token
 VIRTUAL bool ConvolutionalLayer::biased() {
                                        ^
jni/TransferCL/src/conv/ConvolutionalLayer.cpp:2135:58: error: qualified-id in declaration before '(' token
 VIRTUAL TrainerState *ConvolutionalLayer::getTrainerState() {
                                                          ^
jni/TransferCL/src/conv/ConvolutionalLayer.cpp:2143:62: error: qualified-id in declaration before '(' token
 VIRTUAL TrainerState *ConvolutionalLayer::getBiasTrainerState() {
                                                              ^
jni/TransferCL/src/conv/ConvolutionalLayer.cpp:2151:49: error: qualified-id in declaration before '(' token
 VIRTUAL void ConvolutionalLayer::setTrainerState(TrainerStateMaker *trainerStateMaker) {
                                                 ^
jni/TransferCL/src/conv/ConvolutionalLayer.cpp:2182:1: error: expected '}' at end of input
 }
 ^
make.exe: *** [obj/local/armeabi-v7a/objs/transferCL/TransferCL/src/conv/ConvolutionalLayer.o] Error 1
make.exe: *** Waiting for unfinished jobs....
19:26:40 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCLNative <= transferCLinterface.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetdefToNet.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= predict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= train.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv2.cpp
In file included from jni/trainEngine/../TransferCL/src/TransferCL.h:6:0,
                 from jni/trainEngine/train.cpp:11:
jni/trainEngine/train.cpp: In member function 'void TrainModel::compare_two_binary_files(FILE*, FILE*)':
jni/trainEngine/../TransferCL/src/dependencies.h:11:85: warning: format '%d' expects argument of type 'int', but argument 4 has type 'long int' [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/trainEngine/train.cpp:773:9: note: in expansion of macro 'LOGI'
         LOGI("Two files are not equal :  byte poistion at which two files differ is %d\n", ftell(fp1)+1);
         ^
[armeabi-v7a] Compile++ arm  : transferCL <= ManifestLoaderv1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Loader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv1Wrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= JpegHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FileHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= stringhelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= RandomSingleton.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainable.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNetMould.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNet.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TransferCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemandv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcher.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp: In member function 'virtual void NetLearnerOnDemandv2::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:186:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: postEpochTesting: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:193:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= BatchData.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= EpochMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcherv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchProcess.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearner.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayer.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp: In member function 'virtual void NetLearnerOnDemand::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:183:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:188:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CrossEntropyLoss.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayerPredict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SquareLossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= IAcceptsLabels.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Layer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainingContext.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGD.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsPersister.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OriginalInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= UniformInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CppRuntimeBoundary.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackpropWeightsNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackwardGpuNaive.cpp
jni/TransferCL/src/conv/ConvolutionalLayer.cpp: In member function 'virtual void ConvolutionalLayer::backward()':
jni/TransferCL/src/conv/ConvolutionalLayer.cpp:2111:49: error: qualified-id in declaration before '(' token
 VIRTUAL std::string ConvolutionalLayer::asString() const {
                                                 ^
jni/TransferCL/src/conv/ConvolutionalLayer.cpp:2119:51: error: qualified-id in declaration before '(' token
 VIRTUAL bool ConvolutionalLayer::needsTrainerState() const {
                                                   ^
jni/TransferCL/src/conv/ConvolutionalLayer.cpp:2127:40: error: qualified-id in declaration before '(' token
 VIRTUAL bool ConvolutionalLayer::biased() {
                                        ^
jni/TransferCL/src/conv/ConvolutionalLayer.cpp:2135:58: error: qualified-id in declaration before '(' token
 VIRTUAL TrainerState *ConvolutionalLayer::getTrainerState() {
                                                          ^
jni/TransferCL/src/conv/ConvolutionalLayer.cpp:2143:62: error: qualified-id in declaration before '(' token
 VIRTUAL TrainerState *ConvolutionalLayer::getBiasTrainerState() {
                                                              ^
jni/TransferCL/src/conv/ConvolutionalLayer.cpp:2151:49: error: qualified-id in declaration before '(' token
 VIRTUAL void ConvolutionalLayer::setTrainerState(TrainerStateMaker *trainerStateMaker) {
                                                 ^
jni/TransferCL/src/conv/ConvolutionalLayer.cpp:2182:1: error: expected '}' at end of input
 }
 ^
make.exe: *** [obj/local/armeabi-v7a/objs/transferCL/TransferCL/src/conv/ConvolutionalLayer.o] Error 1
make.exe: *** Waiting for unfinished jobs....
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalMaker.cpp
19:28:39 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerDimensions.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedMaker.cpp
jni/TransferCL/src/conv/ConvolutionalLayer.cpp: In member function 'virtual void ConvolutionalLayer::backward()':
jni/TransferCL/src/conv/ConvolutionalLayer.cpp:2111:49: error: qualified-id in declaration before '(' token
 VIRTUAL std::string ConvolutionalLayer::asString() const {
                                                 ^
jni/TransferCL/src/conv/ConvolutionalLayer.cpp:2119:51: error: qualified-id in declaration before '(' token
 VIRTUAL bool ConvolutionalLayer::needsTrainerState() const {
                                                   ^
jni/TransferCL/src/conv/ConvolutionalLayer.cpp:2127:40: error: qualified-id in declaration before '(' token
 VIRTUAL bool ConvolutionalLayer::biased() {
                                        ^
jni/TransferCL/src/conv/ConvolutionalLayer.cpp:2135:58: error: qualified-id in declaration before '(' token
 VIRTUAL TrainerState *ConvolutionalLayer::getTrainerState() {
                                                          ^
jni/TransferCL/src/conv/ConvolutionalLayer.cpp:2143:62: error: qualified-id in declaration before '(' token
 VIRTUAL TrainerState *ConvolutionalLayer::getBiasTrainerState() {
                                                              ^
jni/TransferCL/src/conv/ConvolutionalLayer.cpp:2151:49: error: qualified-id in declaration before '(' token
 VIRTUAL void ConvolutionalLayer::setTrainerState(TrainerStateMaker *trainerStateMaker) {
                                                 ^
jni/TransferCL/src/conv/ConvolutionalLayer.cpp:2182:1: error: expected '}' at end of input
 }
 ^
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedLayer.cpp
make.exe: *** [obj/local/armeabi-v7a/objs/transferCL/TransferCL/src/conv/ConvolutionalLayer.o] Error 1
make.exe: *** Waiting for unfinished jobs....
19:31:47 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= deviceinfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DevicesInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DeviceInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= EasyCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TemplatedKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= platforminfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLWrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConfigManager.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= MnistLoader.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
19:39:01 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
19:39:13 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCLNative <= transferCLinterface.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
19:39:51 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
19:43:14 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
19:45:39 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
19:46:45 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
19:50:44 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
19:51:50 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
20:00:27 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
20:01:34 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCLNative <= transferCLinterface.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
20:07:07 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
20:08:01 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
20:16:45 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
20:22:49 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
jni/TransferCL/src/conv/Forward1.cpp: In member function 'void Forward1::testFloat(int, CLWrapper*, CLWrapper*, CLWrapper*, CLWrapper*, CLWrapper*, CLWrapper*, CLWrapper*, CLWrapper*)':
jni/TransferCL/src/conv/Forward1.cpp:872:4: error: expected ';' before 'float'
    float translate=dim.translate;
    ^
jni/TransferCL/src/conv/Forward1.cpp:874:16: error: 'translate' was not declared in this scope
    test->input(translate);
                ^
make.exe: *** [obj/local/armeabi-v7a/objs/transferCL/TransferCL/src/conv/Forward1.o] Error 1
20:23:01 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
20:26:10 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
20:27:34 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCLNative <= transferCLinterface.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= predict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= train.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetdefToNet.cpp
In file included from jni/trainEngine/../TransferCL/src/TransferCL.h:6:0,
                 from jni/trainEngine/train.cpp:11:
jni/trainEngine/train.cpp: In member function 'void TrainModel::compare_two_binary_files(FILE*, FILE*)':
jni/trainEngine/../TransferCL/src/dependencies.h:11:85: warning: format '%d' expects argument of type 'int', but argument 4 has type 'long int' [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/trainEngine/train.cpp:773:9: note: in expansion of macro 'LOGI'
         LOGI("Two files are not equal :  byte poistion at which two files differ is %d\n", ftell(fp1)+1);
         ^
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ManifestLoaderv1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Loader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv1Wrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= JpegHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FileHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= stringhelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= RandomSingleton.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainable.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNetMould.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TransferCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNet.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemandv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchData.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp: In member function 'virtual void NetLearnerOnDemandv2::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:186:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: postEpochTesting: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:193:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= EpochMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcherv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchProcess.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearner.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayer.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp: In member function 'virtual void NetLearnerOnDemand::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:183:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:188:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CrossEntropyLoss.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SquareLossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayerPredict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= IAcceptsLabels.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Layer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainingContext.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGD.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsPersister.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OriginalInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= UniformInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CppRuntimeBoundary.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackpropWeightsNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerDimensions.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= deviceinfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DevicesInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DeviceInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= EasyCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TemplatedKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= platforminfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLWrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConfigManager.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= MnistLoader.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
20:29:46 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
20:31:09 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
20:32:51 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCLNative <= transferCLinterface.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= predict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetdefToNet.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= train.cpp
In file included from jni/trainEngine/../TransferCL/src/TransferCL.h:6:0,
                 from jni/trainEngine/train.cpp:11:
jni/trainEngine/train.cpp: In member function 'void TrainModel::compare_two_binary_files(FILE*, FILE*)':
jni/trainEngine/../TransferCL/src/dependencies.h:11:85: warning: format '%d' expects argument of type 'int', but argument 4 has type 'long int' [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/trainEngine/train.cpp:773:9: note: in expansion of macro 'LOGI'
         LOGI("Two files are not equal :  byte poistion at which two files differ is %d\n", ftell(fp1)+1);
         ^
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ManifestLoaderv1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Loader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv1Wrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= JpegHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FileHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= stringhelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainable.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= RandomSingleton.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNetMould.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNet.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TransferCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemandv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchData.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp: In member function 'virtual void NetLearnerOnDemandv2::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:186:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: postEpochTesting: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:193:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= EpochMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcherv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchProcess.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearner.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayer.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp: In member function 'virtual void NetLearnerOnDemand::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:183:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:188:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CrossEntropyLoss.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayerPredict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SquareLossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= IAcceptsLabels.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Layer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainingContext.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGD.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsPersister.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= UniformInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CppRuntimeBoundary.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OriginalInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackpropWeightsNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerDimensions.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= deviceinfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DevicesInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DeviceInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= EasyCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TemplatedKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= platforminfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLWrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConfigManager.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= MnistLoader.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
20:34:48 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
20:36:08 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= predict.cpp
[armeabi-v7a] Compile++ arm  : transferCLNative <= transferCLinterface.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= train.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetdefToNet.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv2.cpp
In file included from jni/trainEngine/../TransferCL/src/TransferCL.h:6:0,
                 from jni/trainEngine/train.cpp:11:
jni/trainEngine/train.cpp: In member function 'void TrainModel::compare_two_binary_files(FILE*, FILE*)':
jni/trainEngine/../TransferCL/src/dependencies.h:11:85: warning: format '%d' expects argument of type 'int', but argument 4 has type 'long int' [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/trainEngine/train.cpp:773:9: note: in expansion of macro 'LOGI'
         LOGI("Two files are not equal :  byte poistion at which two files differ is %d\n", ftell(fp1)+1);
         ^
[armeabi-v7a] Compile++ arm  : transferCL <= ManifestLoaderv1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Loader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv1Wrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= JpegHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FileHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= stringhelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= RandomSingleton.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainable.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNetMould.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNet.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TransferCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemandv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchData.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= EpochMaker.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp: In member function 'virtual void NetLearnerOnDemandv2::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:186:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: postEpochTesting: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:193:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcherv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchProcess.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearner.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayer.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp: In member function 'virtual void NetLearnerOnDemand::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:183:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:188:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CrossEntropyLoss.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayerPredict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SquareLossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= IAcceptsLabels.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Layer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainingContext.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGD.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsPersister.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OriginalInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= UniformInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CppRuntimeBoundary.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackpropWeightsNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerDimensions.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= deviceinfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DevicesInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DeviceInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= EasyCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TemplatedKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= platforminfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLWrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConfigManager.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= MnistLoader.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
20:38:44 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCLNative <= transferCLinterface.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= train.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetdefToNet.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= predict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ManifestLoaderv1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv2.cpp
In file included from jni/trainEngine/../TransferCL/src/TransferCL.h:6:0,
                 from jni/trainEngine/train.cpp:11:
jni/trainEngine/train.cpp: In member function 'void TrainModel::compare_two_binary_files(FILE*, FILE*)':
jni/trainEngine/../TransferCL/src/dependencies.h:11:85: warning: format '%d' expects argument of type 'int', but argument 4 has type 'long int' [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/trainEngine/train.cpp:773:9: note: in expansion of macro 'LOGI'
         LOGI("Two files are not equal :  byte poistion at which two files differ is %d\n", ftell(fp1)+1);
         ^
[armeabi-v7a] Compile++ arm  : transferCL <= Loader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv1Wrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= JpegHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FileHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= stringhelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= RandomSingleton.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainable.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNetMould.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNet.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TransferCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemandv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchData.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp: In member function 'virtual void NetLearnerOnDemandv2::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:186:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: postEpochTesting: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:193:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= EpochMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcherv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchProcess.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearner.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayer.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp: In member function 'virtual void NetLearnerOnDemand::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:183:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:188:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CrossEntropyLoss.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayerPredict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SquareLossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= IAcceptsLabels.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Layer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainingContext.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGD.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsPersister.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OriginalInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= UniformInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CppRuntimeBoundary.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackpropWeightsNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerDimensions.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= deviceinfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DevicesInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DeviceInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= EasyCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TemplatedKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= platforminfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLWrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConfigManager.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= MnistLoader.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
20:41:22 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
20:53:34 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
20:57:16 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsPersister.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
20:57:42 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayer.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
21:03:07 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsPersister.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
21:10:28 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
21:11:59 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
21:13:19 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
21:15:37 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
21:19:40 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
21:23:32 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
21:29:53 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
21:30:46 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
21:32:30 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
21:33:31 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
21:36:01 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
21:43:13 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= predict.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
21:44:17 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= predict.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
21:46:35 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= predict.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
21:47:51 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
21:49:21 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
21:50:27 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= train.cpp
[armeabi-v7a] Compile++ arm  : transferCLNative <= transferCLinterface.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= predict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetdefToNet.cpp
In file included from jni/trainEngine/../TransferCL/src/TransferCL.h:6:0,
                 from jni/trainEngine/train.cpp:11:
jni/trainEngine/train.cpp: In member function 'void TrainModel::compare_two_binary_files(FILE*, FILE*)':
jni/trainEngine/../TransferCL/src/dependencies.h:11:85: warning: format '%d' expects argument of type 'int', but argument 4 has type 'long int' [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/trainEngine/train.cpp:773:9: note: in expansion of macro 'LOGI'
         LOGI("Two files are not equal :  byte poistion at which two files differ is %d\n", ftell(fp1)+1);
         ^
[armeabi-v7a] Compile++ arm  : transferCL <= ManifestLoaderv1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Loader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv1Wrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FileHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= JpegHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= stringhelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= RandomSingleton.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainable.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNetMould.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNet.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TransferCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemandv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchData.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= EpochMaker.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp: In member function 'virtual void NetLearnerOnDemandv2::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:186:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: postEpochTesting: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher.cpp
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:193:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcherv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchProcess.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearner.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayer.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp: In member function 'virtual void NetLearnerOnDemand::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:183:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:188:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CrossEntropyLoss.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayerPredict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SquareLossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= IAcceptsLabels.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Layer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainingContext.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGD.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsPersister.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OriginalInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= UniformInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CppRuntimeBoundary.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackpropWeightsNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerDimensions.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= deviceinfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DevicesInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DeviceInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= EasyCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TemplatedKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= platforminfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLWrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConfigManager.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= MnistLoader.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
21:58:25 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCLNative <= transferCLinterface.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= train.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= predict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetdefToNet.cpp
In file included from jni/trainEngine/../TransferCL/src/TransferCL.h:6:0,
                 from jni/trainEngine/train.cpp:11:
jni/trainEngine/train.cpp: In member function 'void TrainModel::compare_two_binary_files(FILE*, FILE*)':
jni/trainEngine/../TransferCL/src/dependencies.h:11:85: warning: format '%d' expects argument of type 'int', but argument 4 has type 'long int' [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/trainEngine/train.cpp:773:9: note: in expansion of macro 'LOGI'
         LOGI("Two files are not equal :  byte poistion at which two files differ is %d\n", ftell(fp1)+1);
         ^
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ManifestLoaderv1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Loader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv1Wrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= JpegHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FileHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= stringhelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= RandomSingleton.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNetMould.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainable.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNet.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TransferCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemandv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchData.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= EpochMaker.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp: In member function 'virtual void NetLearnerOnDemandv2::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:186:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: postEpochTesting: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:193:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcherv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchProcess.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearner.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayer.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayerMaker.cpp
                 from jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp: In member function 'virtual void NetLearnerOnDemand::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:183:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:188:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CrossEntropyLoss.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayerPredict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SquareLossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= IAcceptsLabels.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Layer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainingContext.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGD.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsPersister.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OriginalInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= UniformInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CppRuntimeBoundary.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackpropWeightsNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerDimensions.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= deviceinfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DevicesInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DeviceInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= EasyCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TemplatedKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= platforminfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLWrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConfigManager.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= MnistLoader.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
22:02:45 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
22:04:01 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCLNative <= transferCLinterface.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= train.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= predict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetdefToNet.cpp
In file included from jni/trainEngine/../TransferCL/src/TransferCL.h:6:0,
                 from jni/trainEngine/train.cpp:11:
jni/trainEngine/train.cpp: In member function 'void TrainModel::compare_two_binary_files(FILE*, FILE*)':
jni/trainEngine/../TransferCL/src/dependencies.h:11:85: warning: format '%d' expects argument of type 'int', but argument 4 has type 'long int' [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/trainEngine/train.cpp:773:9: note: in expansion of macro 'LOGI'
         LOGI("Two files are not equal :  byte poistion at which two files differ is %d\n", ftell(fp1)+1);
         ^
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ManifestLoaderv1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Loader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv1Wrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= JpegHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FileHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= stringhelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= RandomSingleton.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainable.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNetMould.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNet.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TransferCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemandv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchData.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= EpochMaker.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp: In member function 'virtual void NetLearnerOnDemandv2::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:186:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: postEpochTesting: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:193:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcherv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchProcess.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearner.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayer.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp: In member function 'virtual void NetLearnerOnDemand::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:183:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:188:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CrossEntropyLoss.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayerPredict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SquareLossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= IAcceptsLabels.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Layer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainingContext.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGD.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsPersister.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OriginalInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= UniformInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CppRuntimeBoundary.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackpropWeightsNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerDimensions.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= deviceinfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DevicesInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= EasyCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DeviceInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TemplatedKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= platforminfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLWrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConfigManager.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= MnistLoader.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
22:05:45 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
22:06:33 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
22:07:30 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCLNative <= transferCLinterface.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= predict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= train.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetdefToNet.cpp
In file included from jni/trainEngine/../TransferCL/src/TransferCL.h:6:0,
                 from jni/trainEngine/train.cpp:11:
jni/trainEngine/train.cpp: In member function 'void TrainModel::compare_two_binary_files(FILE*, FILE*)':
jni/trainEngine/../TransferCL/src/dependencies.h:11:85: warning: format '%d' expects argument of type 'int', but argument 4 has type 'long int' [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/trainEngine/train.cpp:773:9: note: in expansion of macro 'LOGI'
         LOGI("Two files are not equal :  byte poistion at which two files differ is %d\n", ftell(fp1)+1);
         ^
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ManifestLoaderv1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv1Wrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Loader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= JpegHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= stringhelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FileHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= RandomSingleton.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainable.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNetMould.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TransferCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNet.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemandv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchData.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= EpochMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp: In member function 'virtual void NetLearnerOnDemandv2::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:186:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: postEpochTesting: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:193:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcherv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchProcess.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearner.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayer.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp: In member function 'virtual void NetLearnerOnDemand::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:183:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:188:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CrossEntropyLoss.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayerPredict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SquareLossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= IAcceptsLabels.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Layer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainingContext.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGD.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsPersister.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OriginalInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= UniformInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CppRuntimeBoundary.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackpropWeightsNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerDimensions.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= deviceinfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DevicesInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DeviceInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= EasyCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TemplatedKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= platforminfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLWrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConfigManager.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= MnistLoader.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
22:10:15 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCLNative <= transferCLinterface.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= train.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetdefToNet.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= predict.cpp
In file included from jni/trainEngine/../TransferCL/src/TransferCL.h:6:0,
                 from jni/trainEngine/train.cpp:11:
jni/trainEngine/train.cpp: In member function 'void TrainModel::compare_two_binary_files(FILE*, FILE*)':
jni/trainEngine/../TransferCL/src/dependencies.h:11:85: warning: format '%d' expects argument of type 'int', but argument 4 has type 'long int' [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/trainEngine/train.cpp:773:9: note: in expansion of macro 'LOGI'
         LOGI("Two files are not equal :  byte poistion at which two files differ is %d\n", ftell(fp1)+1);
         ^
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ManifestLoaderv1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Loader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv1Wrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= JpegHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FileHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= stringhelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= RandomSingleton.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainable.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNetMould.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNet.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TransferCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemandv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchData.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp: In member function 'virtual void NetLearnerOnDemandv2::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:186:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: postEpochTesting: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:193:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= EpochMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcherv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchProcess.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearner.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayer.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp: In member function 'virtual void NetLearnerOnDemand::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:183:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:188:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CrossEntropyLoss.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayerPredict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SquareLossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= IAcceptsLabels.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Layer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainingContext.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGD.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsPersister.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OriginalInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= UniformInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CppRuntimeBoundary.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackpropWeightsNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerDimensions.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= deviceinfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DevicesInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DeviceInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= EasyCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TemplatedKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= platforminfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLWrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConfigManager.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= MnistLoader.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
22:13:22 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
22:13:43 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
22:15:12 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
22:15:33 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
22:16:01 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
22:17:50 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCLNative <= transferCLinterface.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= train.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= predict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetdefToNet.cpp
In file included from jni/trainEngine/../TransferCL/src/TransferCL.h:6:0,
                 from jni/trainEngine/train.cpp:11:
jni/trainEngine/train.cpp: In member function 'void TrainModel::compare_two_binary_files(FILE*, FILE*)':
jni/trainEngine/../TransferCL/src/dependencies.h:11:85: warning: format '%d' expects argument of type 'int', but argument 4 has type 'long int' [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/trainEngine/train.cpp:773:9: note: in expansion of macro 'LOGI'
         LOGI("Two files are not equal :  byte poistion at which two files differ is %d\n", ftell(fp1)+1);
         ^
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ManifestLoaderv1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Loader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv1Wrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= JpegHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FileHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= stringhelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= RandomSingleton.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainable.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNetMould.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNet.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TransferCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemandv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchData.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp: In member function 'virtual void NetLearnerOnDemandv2::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:186:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: postEpochTesting: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:193:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= EpochMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcherv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchProcess.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearner.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayer.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp: In member function 'virtual void NetLearnerOnDemand::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:183:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:188:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CrossEntropyLoss.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayerPredict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SquareLossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= IAcceptsLabels.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Layer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainingContext.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGD.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsPersister.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OriginalInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= UniformInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CppRuntimeBoundary.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackpropWeightsNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerDimensions.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= deviceinfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DevicesInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DeviceInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= EasyCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TemplatedKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= platforminfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLWrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConfigManager.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= MnistLoader.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
22:19:36 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
22:21:06 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
22:36:58 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
22:37:54 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
22:40:36 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
22:49:30 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
23:01:41 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
23:02:50 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
23:03:54 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
23:07:33 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
23:08:39 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= predict.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
23:09:34 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= predict.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
23:16:14 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
23:32:29 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
23:38:03 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
23:38:55 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
23:40:44 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayer.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
23:42:53 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
23:47:08 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
23:55:50 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
23:58:20 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
00:04:46 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
00:08:03 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
00:10:17 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
00:11:28 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayer.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
00:18:25 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCLNative <= transferCLinterface.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= train.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetdefToNet.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= predict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv2.cpp
In file included from jni/trainEngine/../TransferCL/src/TransferCL.h:6:0,
                 from jni/trainEngine/train.cpp:11:
jni/trainEngine/train.cpp: In member function 'void TrainModel::compare_two_binary_files(FILE*, FILE*)':
jni/trainEngine/../TransferCL/src/dependencies.h:11:85: warning: format '%d' expects argument of type 'int', but argument 4 has type 'long int' [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/trainEngine/train.cpp:773:9: note: in expansion of macro 'LOGI'
         LOGI("Two files are not equal :  byte poistion at which two files differ is %d\n", ftell(fp1)+1);
         ^
[armeabi-v7a] Compile++ arm  : transferCL <= ManifestLoaderv1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Loader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv1Wrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= JpegHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FileHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= stringhelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= RandomSingleton.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNetMould.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainable.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNet.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TransferCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemandv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchData.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= EpochMaker.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp: In member function 'virtual void NetLearnerOnDemandv2::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:186:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: postEpochTesting: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:193:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcherv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchProcess.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearner.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayer.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp: In member function 'virtual void NetLearnerOnDemand::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:183:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:188:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CrossEntropyLoss.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayerPredict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SquareLossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= IAcceptsLabels.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Layer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainingContext.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGD.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsPersister.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OriginalInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CppRuntimeBoundary.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackpropWeightsNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= UniformInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalMaker.cpp
jni/TransferCL/src/conv/ConvolutionalLayer.cpp: In member function 'virtual void ConvolutionalLayer::persistToArray(int, float*)':
jni/TransferCL/src/conv/ConvolutionalLayer.cpp:1270:62: error: cannot convert 'half* {aka short unsigned int*}' to 'float*' in initialization
   float * p=biasWrapper8Bit->map_ZeroCopyObject_ReadFlagHalf();
                                                              ^
jni/TransferCL/src/conv/ConvolutionalLayer.cpp:1274:55: error: no matching function for call to 'CLWrapper::unMap_ZeroCopyObject_ReadFlagHalf(float*&)'
   biasWrapper8Bit->unMap_ZeroCopyObject_ReadFlagHalf(p);
                                                       ^
jni/TransferCL/src/conv/ConvolutionalLayer.cpp:1274:55: note: candidate is:
In file included from jni/TransferCL/src/conv/../layer/../../EasyCL/CLIntWrapper.h:11:0,
                 from jni/TransferCL/src/conv/../layer/../../EasyCL/EasyCL.h:166,
                 from jni/TransferCL/src/conv/../layer/Layer.h:20,
                 from jni/TransferCL/src/conv/ConvolutionalLayer.h:11,
                 from jni/TransferCL/src/conv/ConvolutionalLayer.cpp:3:
jni/TransferCL/src/conv/../layer/../../EasyCL/CLWrapper.h:60:18: note: virtual void CLWrapper::unMap_ZeroCopyObject_ReadFlagHalf(half*)
     virtual void unMap_ZeroCopyObject_ReadFlagHalf(half *ptr);
                  ^
jni/TransferCL/src/conv/../layer/../../EasyCL/CLWrapper.h:60:18: note:   no known conversion for argument 1 from 'float*' to 'half* {aka short unsigned int*}'
make.exe: *** [obj/local/armeabi-v7a/objs/transferCL/TransferCL/src/conv/ConvolutionalLayer.o] Error 1
make.exe: *** Waiting for unfinished jobs....
00:20:57 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= LayerDimensions.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= deviceinfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DevicesInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DeviceInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= EasyCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TemplatedKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= platforminfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLWrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConfigManager.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= MnistLoader.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
00:33:28 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCLNative <= transferCLinterface.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= predict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= train.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetdefToNet.cpp
jni/TransferCL/src/netdef/NetdefToNet.cpp: In static member function 'static void NetdefToNet::createConv(int, NeuralNet*, std::string, std::string, std::string, WeightsInitializer*)':
jni/TransferCL/src/netdef/NetdefToNet.cpp:259:374: error: expression cannot be used as a function
         net->addLayer(ConvolutionalMaker::instance()->stride(stride)->numFilters(numFilters)->filterSize(filterSize)->padZeros(padZeros)->biased()->weightsInitializer(weightsInitializer)->batchSize(batchsize)->activationLayer(activation_layerDef)->useMaxPooling(useMaxPoolingTemp)->maxPool_spatialExtent(poolingSize)->maxPool_strides(poolingSize)->iteration(net->interation) );
                                                                                                                                                                                                                                                                                                                                                                                      ^
make.exe: *** [obj/local/armeabi-v7a/objs/transferCL/TransferCL/src/netdef/NetdefToNet.o] Error 1
make.exe: *** Waiting for unfinished jobs....
jni/trainEngine/train.cpp: In member function 'void TrainModel::go(ConfigTraining)':
jni/trainEngine/train.cpp:284:22: error: 'iteration' was not declared in this scope
      net->interation=iteration=trainAllocateN/config.numTrain;
                      ^
In file included from jni/trainEngine/../TransferCL/src/TransferCL.h:6:0,
                 from jni/trainEngine/train.cpp:11:
jni/trainEngine/train.cpp: In member function 'void TrainModel::compare_two_binary_files(FILE*, FILE*)':
jni/trainEngine/../TransferCL/src/dependencies.h:11:85: warning: format '%d' expects argument of type 'int', but argument 4 has type 'long int' [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/trainEngine/train.cpp:775:9: note: in expansion of macro 'LOGI'
         LOGI("Two files are not equal :  byte poistion at which two files differ is %d\n", ftell(fp1)+1);
         ^
make.exe: *** [obj/local/armeabi-v7a/objs/transferCL/trainEngine/train.o] Error 1
00:36:23 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= train.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetdefToNet.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNetMould.cpp
jni/TransferCL/src/netdef/NetdefToNet.cpp: In static member function 'static void NetdefToNet::createConv(int, NeuralNet*, std::string, std::string, std::string, WeightsInitializer*)':
jni/TransferCL/src/netdef/NetdefToNet.cpp:259:374: error: expression cannot be used as a function
         net->addLayer(ConvolutionalMaker::instance()->stride(stride)->numFilters(numFilters)->filterSize(filterSize)->padZeros(padZeros)->biased()->weightsInitializer(weightsInitializer)->batchSize(batchsize)->activationLayer(activation_layerDef)->useMaxPooling(useMaxPoolingTemp)->maxPool_spatialExtent(poolingSize)->maxPool_strides(poolingSize)->iteration(net->interation) );
                                                                                                                                                                                                                                                                                                                                                                                      ^
make.exe: *** [obj/local/armeabi-v7a/objs/transferCL/TransferCL/src/netdef/NetdefToNet.o] Error 1
make.exe: *** Waiting for unfinished jobs....
In file included from jni/trainEngine/../TransferCL/src/TransferCL.h:6:0,
                 from jni/trainEngine/train.cpp:11:
jni/trainEngine/train.cpp: In member function 'void TrainModel::compare_two_binary_files(FILE*, FILE*)':
jni/trainEngine/../TransferCL/src/dependencies.h:11:85: warning: format '%d' expects argument of type 'int', but argument 4 has type 'long int' [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/trainEngine/train.cpp:775:9: note: in expansion of macro 'LOGI'
         LOGI("Two files are not equal :  byte poistion at which two files differ is %d\n", ftell(fp1)+1);
         ^
00:41:48 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCLNative <= transferCLinterface.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= train.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= predict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetdefToNet.cpp
In file included from jni/trainEngine/../TransferCL/src/TransferCL.h:6:0,
                 from jni/trainEngine/train.cpp:11:
jni/trainEngine/train.cpp: In member function 'void TrainModel::compare_two_binary_files(FILE*, FILE*)':
jni/trainEngine/../TransferCL/src/dependencies.h:11:85: warning: format '%d' expects argument of type 'int', but argument 4 has type 'long int' [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/trainEngine/train.cpp:775:9: note: in expansion of macro 'LOGI'
         LOGI("Two files are not equal :  byte poistion at which two files differ is %d\n", ftell(fp1)+1);
         ^
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNet.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TransferCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemandv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= EpochMaker.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp: In member function 'virtual void NetLearnerOnDemandv2::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:186:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: postEpochTesting: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:193:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearner.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerMaker.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp: In member function 'virtual void NetLearnerOnDemand::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:183:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:188:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= Trainer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGD.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsPersister.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalMaker.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
00:42:15 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
00:43:23 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
00:46:29 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
00:47:26 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
00:59:26 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCLNative <= transferCLinterface.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= train.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= predict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardGpuNaive.cpp
In file included from jni/trainEngine/../TransferCL/src/TransferCL.h:6:0,
                 from jni/trainEngine/train.cpp:11:
jni/trainEngine/train.cpp: In member function 'void TrainModel::compare_two_binary_files(FILE*, FILE*)':
jni/trainEngine/../TransferCL/src/dependencies.h:11:85: warning: format '%d' expects argument of type 'int', but argument 4 has type 'long int' [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/trainEngine/train.cpp:775:9: note: in expansion of macro 'LOGI'
         LOGI("Two files are not equal :  byte poistion at which two files differ is %d\n", ftell(fp1)+1);
         ^
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNet.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TransferCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGD.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedLayer.cpp
jni/TransferCL/src/conv/ConvolutionalLayer.cpp: In destructor 'virtual ConvolutionalLayer::~ConvolutionalLayer()':
jni/TransferCL/src/conv/ConvolutionalLayer.cpp:685:12: error: type 'class std::vector<CLWrapper>' argument given to 'delete', expected pointer
     delete dataStorageWrapper8Bit;
            ^
jni/TransferCL/src/conv/ConvolutionalLayer.cpp: In member function 'virtual void ConvolutionalLayer::forward()':
jni/TransferCL/src/conv/ConvolutionalLayer.cpp:1756:107: error: invalid cast to abstract class type 'CLWrapper'
     dataStorageWrapper8Bit.push_back((CLWrapper) cl->wrap8Bit(previousLayer->getOutputNumElements(), test3));
                                                                                                           ^
In file included from jni/TransferCL/src/conv/../layer/../../EasyCL/CLIntWrapper.h:11:0,
                 from jni/TransferCL/src/conv/../layer/../../EasyCL/EasyCL.h:166,
                 from jni/TransferCL/src/conv/../layer/Layer.h:20,
                 from jni/TransferCL/src/conv/ConvolutionalLayer.h:11,
                 from jni/TransferCL/src/conv/ConvolutionalLayer.cpp:3:
jni/TransferCL/src/conv/../layer/../../EasyCL/CLWrapper.h:19:21: note:   because the following virtual functions are pure within 'CLWrapper':
 class EasyCL_EXPORT CLWrapper {
                     ^
jni/TransferCL/src/conv/../layer/../../EasyCL/CLWrapper.h:33:17: note: 	virtual int CLWrapper::getElementSize()
     virtual int getElementSize() = 0;
                 ^
jni/TransferCL/src/conv/../layer/../../EasyCL/CLWrapper.h:34:19: note: 	virtual void* CLWrapper::getHostArray()
     virtual void *getHostArray() = 0;
                   ^
jni/TransferCL/src/conv/../layer/../../EasyCL/CLWrapper.h:35:25: note: 	virtual const void* CLWrapper::getHostArrayConst()
     virtual void const *getHostArrayConst() = 0;
                         ^
jni/TransferCL/src/conv/ConvolutionalLayer.cpp:1757:30: error: base operand of '->' has non-pointer type '__gnu_cxx::__alloc_traits<std::allocator<CLWrapper> >::value_type {aka CLWrapper}'
     dataStorageWrapper8Bit[0]->createZeroCopyObject_ReadWriteFlag_OnDevice();
                              ^
jni/TransferCL/src/conv/ConvolutionalLayer.cpp:1758:48: error: base operand of '->' has non-pointer type '__gnu_cxx::__alloc_traits<std::allocator<CLWrapper> >::value_type {aka CLWrapper}'
     unsigned char * p=dataStorageWrapper8Bit[0]->map_ZeroCopyObject_WriteFlag8Bit();
                                                ^
jni/TransferCL/src/conv/ConvolutionalLayer.cpp:1763:30: error: base operand of '->' has non-pointer type '__gnu_cxx::__alloc_traits<std::allocator<CLWrapper> >::value_type {aka CLWrapper}'
     dataStorageWrapper8Bit[0]->unMap_ZeroCopyObject_WriteFlag8Bit(p);
                              ^
jni/TransferCL/src/conv/ConvolutionalLayer.cpp:1980:343: error: no matching function for call to 'Forward1::forwardChooseMethod(int&, CLWrapper*&, CLWrapper*&, CLWrapper*&, CLWrapper*&, CLWrapper*&, CLWrapper*&, CLWrapper*&, CLWrapper*&, CLWrapper*&, CLWrapper*&, CLWrapper*&, __gnu_cxx::__alloc_traits<std::allocator<CLWrapper> >::value_type&, CLWrapper*&, CLWrapper*&, CLWrapper*&)'
     forwardImpl->forwardChooseMethod(batchSize, inputWrapper, weightsWrapper, biasWrapper, outputWrapper,selectorWrapper,gradInput_poolingLayer_Wrapper, dataStorageWrapper, weightsWrapperHalf, biasWrapperHalf,outputWrapperTest,gradInput_poolingLayer_WrapperHalf,dataStorageWrapper8Bit[0], weightsWrapper8Bit, biasWrapper8Bit,outputWrapper8Bit);
                                                                                                                                                                                                                                                                                                                                                       ^
jni/TransferCL/src/conv/ConvolutionalLayer.cpp:1980:343: note: candidate is:
In file included from jni/TransferCL/src/conv/ConvolutionalLayer.h:23:0,
                 from jni/TransferCL/src/conv/ConvolutionalLayer.cpp:3:
jni/TransferCL/src/conv/Forward1.h:133:18: note: virtual void Forward1::forwardChooseMethod(int, CLWrapper*, CLWrapper*, CLWrapper*, CLWrapper*, CLWrapper*, CLWrapper*, CLWrapper*, CLWrapper*, CLWrapper*, CLWrapper*, CLWrapper*, CLWrapper*, CLWrapper*, CLWrapper*, CLWrapper*)
     VIRTUAL void forwardChooseMethod(int batchSize, CLWrapper *dataWrapper, CLWrapper *weightsWrapper, CLWrapper *biasWrapper,
                  ^
jni/TransferCL/src/conv/Forward1.h:133:18: note:   no known conversion for argument 13 from '__gnu_cxx::__alloc_traits<std::allocator<CLWrapper> >::value_type {aka CLWrapper}' to 'CLWrapper*'
jni/TransferCL/src/conv/ConvolutionalLayer.cpp: In member function 'virtual void ConvolutionalLayer::backward()':
jni/TransferCL/src/conv/ConvolutionalLayer.cpp:2108:245: error: no matching function for call to 'BackpropWeightsNaive::calcGradWeightsHalf(int&, CLWrapper*&, std::vector<CLWrapper>&, CLWrapper*&, CLWrapper*&, CLWrapper*&, CLWrapper*&, CLWrapper*&, CLWrapper*&)'
       backpropWeightsImpl->calcGradWeightsHalf(batchSize, gradOutputWrapperHalf, dataStorageWrapper8Bit,  gradWeightsWrapper, gradBiasWrapper, weightsWrapper8Bit, previousStepVectorWrapperHalf , biasWrapper8Bit,previousStepBiasVectorWrapperHalf);
                                                                                                                                                                                                                                                     ^
jni/TransferCL/src/conv/ConvolutionalLayer.cpp:2108:245: note: candidate is:
In file included from jni/TransferCL/src/conv/ConvolutionalLayer.h:25:0,
                 from jni/TransferCL/src/conv/ConvolutionalLayer.cpp:3:
jni/TransferCL/src/conv/BackpropWeightsNaive.h:63:18: note: virtual void BackpropWeightsNaive::calcGradWeightsHalf(int, CLWrapper*, CLWrapper*, CLWrapper*, CLWrapper*, CLWrapper*, CLWrapper*, CLWrapper*, CLWrapper*)
     VIRTUAL void calcGradWeightsHalf(int batchSize, CLWrapper *gradOutputWrapper, CLWrapper *imagesWrapper, CLWrapper *gradWeightsWrapper, CLWrapper *gradBiasWrapper, CLWrapper *weightWrapper, CLWrapper *previousStepVectorWrapper, CLWrapper *biasWrapper, CLWrapper *previousStepBiasVectorWrapper);
                  ^
jni/TransferCL/src/conv/BackpropWeightsNaive.h:63:18: note:   no known conversion for argument 3 from 'std::vector<CLWrapper>' to 'CLWrapper*'
make.exe: *** [obj/local/armeabi-v7a/objs/transferCL/TransferCL/src/conv/ConvolutionalLayer.o] Error 1
make.exe: *** Waiting for unfinished jobs....
01:02:27 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCLNative <= transferCLinterface.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= predict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= train.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardGpuNaive.cpp
In file included from jni/trainEngine/../TransferCL/src/TransferCL.h:6:0,
                 from jni/trainEngine/train.cpp:11:
jni/trainEngine/train.cpp: In member function 'void TrainModel::compare_two_binary_files(FILE*, FILE*)':
jni/trainEngine/../TransferCL/src/dependencies.h:11:85: warning: format '%d' expects argument of type 'int', but argument 4 has type 'long int' [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/trainEngine/train.cpp:775:9: note: in expansion of macro 'LOGI'
         LOGI("Two files are not equal :  byte poistion at which two files differ is %d\n", ftell(fp1)+1);
         ^
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNet.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TransferCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGD.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedLayer.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
01:05:20 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
01:07:37 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
jni/TransferCL/src/conv/ConvolutionalLayer.cpp: In member function 'virtual void ConvolutionalLayer::forward()':
jni/TransferCL/src/conv/ConvolutionalLayer.cpp:1769:21: error: redeclaration of 'unsigned char* p'
     unsigned char * p=dataStorageWrapper8BitTEST[0]->map_ZeroCopyObject_WriteFlag8Bit();
                     ^
jni/TransferCL/src/conv/ConvolutionalLayer.cpp:1758:21: note: 'unsigned char* p' previously declared here
     unsigned char * p=dataStorageWrapper8Bit->map_ZeroCopyObject_WriteFlag8Bit();
                     ^
jni/TransferCL/src/conv/ConvolutionalLayer.cpp:1770:21: error: redeclaration of 'unsigned char* p2'
     unsigned char * p2=inputWrapper8Bit->map_ZeroCopyObject_ReadFlag8Bit();
                     ^
jni/TransferCL/src/conv/ConvolutionalLayer.cpp:1759:21: note: 'unsigned char* p2' previously declared here
     unsigned char * p2=inputWrapper8Bit->map_ZeroCopyObject_ReadFlag8Bit();
                     ^
make.exe: *** [obj/local/armeabi-v7a/objs/transferCL/TransferCL/src/conv/ConvolutionalLayer.o] Error 1
01:08:15 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
01:10:38 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
jni/TransferCL/src/conv/ConvolutionalLayer.cpp: In member function 'virtual void ConvolutionalLayer::forward()':
jni/TransferCL/src/conv/ConvolutionalLayer.cpp:1767:108: error: 'test3' was not declared in this scope
     dataStorageWrapper8BitTEST.push_back ((CLWrapper*) cl->wrap8Bit(previousLayer->getOutputNumElements(), test3));
                                                                                                            ^
make.exe: *** [obj/local/armeabi-v7a/objs/transferCL/TransferCL/src/conv/ConvolutionalLayer.o] Error 1
01:12:55 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
01:14:13 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
01:15:56 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
01:18:25 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
01:30:37 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCLNative <= transferCLinterface.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= predict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= train.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardGpuNaive.cpp
In file included from jni/trainEngine/../TransferCL/src/TransferCL.h:6:0,
                 from jni/trainEngine/train.cpp:11:
jni/trainEngine/train.cpp: In member function 'void TrainModel::compare_two_binary_files(FILE*, FILE*)':
jni/trainEngine/../TransferCL/src/dependencies.h:11:85: warning: format '%d' expects argument of type 'int', but argument 4 has type 'long int' [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/trainEngine/train.cpp:775:9: note: in expansion of macro 'LOGI'
         LOGI("Two files are not equal :  byte poistion at which two files differ is %d\n", ftell(fp1)+1);
         ^
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNet.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TransferCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGD.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedLayer.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
01:31:59 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
01:42:36 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCLNative <= transferCLinterface.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= train.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= predict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetdefToNet.cpp
In file included from jni/trainEngine/../TransferCL/src/TransferCL.h:6:0,
                 from jni/trainEngine/train.cpp:11:
jni/trainEngine/train.cpp: In member function 'void TrainModel::compare_two_binary_files(FILE*, FILE*)':
jni/trainEngine/../TransferCL/src/dependencies.h:11:85: warning: format '%d' expects argument of type 'int', but argument 4 has type 'long int' [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/trainEngine/train.cpp:775:9: note: in expansion of macro 'LOGI'
         LOGI("Two files are not equal :  byte poistion at which two files differ is %d\n", ftell(fp1)+1);
         ^
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNetMould.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNet.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TransferCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemandv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= EpochMaker.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp: In member function 'virtual void NetLearnerOnDemandv2::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:186:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: postEpochTesting: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:193:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher.cpp
In file included from jni/TransferCL/src/net/../util/Timer.h:10:0,
                 from jni/TransferCL/src/net/NeuralNet.cpp:10:
jni/TransferCL/src/net/NeuralNet.cpp: In member function 'virtual void NeuralNet::forward(const float*)':
jni/TransferCL/src/net/NeuralNet.cpp:417:32: error: 'iteration' was not declared in this scope
 LOGI("iteration: %d count: %d",iteration, count);
                                ^
jni/TransferCL/src/net/../util/../dependencies.h:11:74: note: in definition of macro 'LOGI'
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                          ^
make.exe: *** [obj/local/armeabi-v7a/objs/transferCL/TransferCL/src/net/NeuralNet.o] Error 1
make.exe: *** Waiting for unfinished jobs....
01:45:21 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCLNative <= transferCLinterface.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= train.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetdefToNet.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= predict.cpp
jni/TransferCL/src/netdef/NetdefToNet.cpp: In static member function 'static void NetdefToNet::createConv(int, NeuralNet*, std::string, std::string, std::string, WeightsInitializer*)':
jni/TransferCL/src/netdef/NetdefToNet.cpp:259:364: error: 'class NeuralNet' has no member named 'interation'
         net->addLayer(ConvolutionalMaker::instance()->stride(stride)->numFilters(numFilters)->filterSize(filterSize)->padZeros(padZeros)->biased()->weightsInitializer(weightsInitializer)->batchSize(batchsize)->activationLayer(activation_layerDef)->useMaxPooling(useMaxPoolingTemp)->maxPool_spatialExtent(poolingSize)->maxPool_strides(poolingSize)->iteration(net->interation) );
                                                                                                                                                                                                                                                                                                                                                                            ^
make.exe: *** [obj/local/armeabi-v7a/objs/transferCL/TransferCL/src/netdef/NetdefToNet.o] Error 1
make.exe: *** Waiting for unfinished jobs....
jni/trainEngine/train.cpp: In member function 'void TrainModel::go(ConfigTraining)':
jni/trainEngine/train.cpp:284:11: error: 'class NeuralNet' has no member named 'interation'
      net->interation=trainAllocateN/config.numTrain;
           ^
In file included from jni/trainEngine/../TransferCL/src/TransferCL.h:6:0,
                 from jni/trainEngine/train.cpp:11:
jni/trainEngine/train.cpp: In member function 'void TrainModel::compare_two_binary_files(FILE*, FILE*)':
jni/trainEngine/../TransferCL/src/dependencies.h:11:85: warning: format '%d' expects argument of type 'int', but argument 4 has type 'long int' [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/trainEngine/train.cpp:775:9: note: in expansion of macro 'LOGI'
         LOGI("Two files are not equal :  byte poistion at which two files differ is %d\n", ftell(fp1)+1);
         ^
make.exe: *** [obj/local/armeabi-v7a/objs/transferCL/trainEngine/train.o] Error 1
01:45:56 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= train.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetdefToNet.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNetMould.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNet.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TransferCL.cpp
In file included from jni/trainEngine/../TransferCL/src/TransferCL.h:6:0,
                 from jni/trainEngine/train.cpp:11:
jni/trainEngine/train.cpp: In member function 'void TrainModel::compare_two_binary_files(FILE*, FILE*)':
jni/trainEngine/../TransferCL/src/dependencies.h:11:85: warning: format '%d' expects argument of type 'int', but argument 4 has type 'long int' [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/trainEngine/train.cpp:775:9: note: in expansion of macro 'LOGI'
         LOGI("Two files are not equal :  byte poistion at which two files differ is %d\n", ftell(fp1)+1);
         ^
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemandv2.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp: In member function 'virtual void NetLearnerOnDemandv2::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:186:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: postEpochTesting: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:193:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= EpochMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearner.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerMaker.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp: In member function 'virtual void NetLearnerOnDemand::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:183:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:188:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= Trainer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGD.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsPersister.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedLayer.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
01:46:40 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
01:48:42 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= train.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
In file included from jni/trainEngine/../TransferCL/src/TransferCL.h:6:0,
                 from jni/trainEngine/train.cpp:11:
jni/trainEngine/train.cpp: In member function 'void TrainModel::compare_two_binary_files(FILE*, FILE*)':
jni/trainEngine/../TransferCL/src/dependencies.h:11:85: warning: format '%d' expects argument of type 'int', but argument 4 has type 'long int' [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/trainEngine/train.cpp:775:9: note: in expansion of macro 'LOGI'
         LOGI("Two files are not equal :  byte poistion at which two files differ is %d\n", ftell(fp1)+1);
         ^
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
01:55:55 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
01:56:10 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
01:57:06 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
02:01:00 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCLNative <= transferCLinterface.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= train.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetdefToNet.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= predict.cpp
In file included from jni/trainEngine/../TransferCL/src/TransferCL.h:6:0,
                 from jni/trainEngine/train.cpp:11:
jni/trainEngine/train.cpp: In member function 'void TrainModel::compare_two_binary_files(FILE*, FILE*)':
jni/trainEngine/../TransferCL/src/dependencies.h:11:85: warning: format '%d' expects argument of type 'int', but argument 4 has type 'long int' [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/trainEngine/train.cpp:775:9: note: in expansion of macro 'LOGI'
         LOGI("Two files are not equal :  byte poistion at which two files differ is %d\n", ftell(fp1)+1);
         ^
[armeabi-v7a] Compile++ arm  : transferCL <= TransferCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedLayer.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
02:03:02 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
02:03:58 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
02:04:44 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
02:06:02 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
02:07:20 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
02:08:41 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
02:09:36 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
02:12:16 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
02:21:20 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCLNative <= transferCLinterface.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= predict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= train.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingLayer.cpp
In file included from jni/trainEngine/../TransferCL/src/TransferCL.h:6:0,
                 from jni/trainEngine/train.cpp:11:
jni/trainEngine/train.cpp: In member function 'void TrainModel::compare_two_binary_files(FILE*, FILE*)':
jni/trainEngine/../TransferCL/src/dependencies.h:11:85: warning: format '%d' expects argument of type 'int', but argument 4 has type 'long int' [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/trainEngine/train.cpp:775:9: note: in expansion of macro 'LOGI'
         LOGI("Two files are not equal :  byte poistion at which two files differ is %d\n", ftell(fp1)+1);
         ^
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNet.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TransferCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGD.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedMaker.cpp
jni/TransferCL/src/conv/ConvolutionalLayer.cpp: In member function 'virtual void ConvolutionalLayer::forward()':
jni/TransferCL/src/conv/ConvolutionalLayer.cpp:1791:35: error: 'i' was not declared in this scope
        dataStorageWrapper8BitTEST[i]->unMap_ZeroCopyObject_ReadFlag8Bit(p21);
                                   ^
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedLayer.cpp
make.exe: *** [obj/local/armeabi-v7a/objs/transferCL/TransferCL/src/conv/ConvolutionalLayer.o] Error 1
make.exe: *** Waiting for unfinished jobs....
02:21:52 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
02:23:31 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
jni/TransferCL/src/conv/ConvolutionalLayer.cpp: In member function 'virtual void ConvolutionalLayer::forward()':
jni/TransferCL/src/conv/ConvolutionalLayer.cpp:2019:4: error: 'else' without a previous 'if'
    else
    ^
make.exe: *** [obj/local/armeabi-v7a/objs/transferCL/TransferCL/src/conv/ConvolutionalLayer.o] Error 1
02:23:51 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
02:24:58 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
02:28:15 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNet.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
02:29:03 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
02:30:27 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
02:33:37 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
02:35:32 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayer.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
02:37:41 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
02:39:59 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
02:41:09 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
02:43:17 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
02:45:16 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
02:51:23 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCLNative <= transferCLinterface.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= train.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= predict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardGpuNaive.cpp
In file included from jni/trainEngine/../TransferCL/src/TransferCL.h:6:0,
                 from jni/trainEngine/train.cpp:11:
jni/trainEngine/train.cpp: In member function 'void TrainModel::compare_two_binary_files(FILE*, FILE*)':
jni/trainEngine/../TransferCL/src/dependencies.h:11:85: warning: format '%d' expects argument of type 'int', but argument 4 has type 'long int' [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/trainEngine/train.cpp:775:9: note: in expansion of macro 'LOGI'
         LOGI("Two files are not equal :  byte poistion at which two files differ is %d\n", ftell(fp1)+1);
         ^
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNet.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TransferCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGD.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedLayer.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
02:56:34 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
02:58:38 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
03:00:50 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
03:02:52 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
03:05:35 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
03:08:17 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
03:11:13 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
03:12:08 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
03:13:07 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
03:14:03 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
03:18:31 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNet.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
03:19:46 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
03:22:20 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
14:41:06 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
18:39:22 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
18:41:48 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCLNative <= transferCLinterface.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
jni/transferCLinterface.cpp: In function 'jint Java_com_transferCL_TransferCLlib_training(JNIEnv*, jclass, jstring, jstring)':
jni/transferCLinterface.cpp:343:362: error: no matching function for call to 'TrainModel::trainCmd(const char [345])'
    t->trainCmd("./train datadir=/data/data/com.sony.openclexample1/app_execdir/ netdef=1s64c3z-relu-1s64c3z-mp2-1s128c3z-relu-1s128c3z-mp2-1s256c3z-relu-1s512c3z-mp2-1s512c3z-relu-1s512c3z-mp2-1s512c3z-relu-1s512c3z-mp2-4096n-relu-4096n-relu-2n numepochs=1 batchsize=4 trainfile=train-images-idx3-ubyte validatefile=t10k-images-idx3-ubyte numtrain=4  numtest=4");
                                                                                                                                                                                                                                                                                                                                                                          ^
jni/transferCLinterface.cpp:343:362: note: candidate is:
In file included from jni/transferCLinterface.cpp:9:0:
jni/trainEngine/train.h:115:6: note: int TrainModel::trainCmd(std::string, std::string)
  int trainCmd(std::string argument,string absolutePath);
      ^
jni/trainEngine/train.h:115:6: note:   candidate expects 2 arguments, 1 provided
make.exe: *** [obj/local/armeabi-v7a/objs/transferCLNative/transferCLinterface.o] Error 1
18:42:25 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCLNative <= transferCLinterface.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
18:43:24 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
18:45:56 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= train.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
In file included from jni/trainEngine/../TransferCL/src/TransferCL.h:6:0,
                 from jni/trainEngine/train.cpp:11:
jni/trainEngine/train.cpp: In member function 'void TrainModel::compare_two_binary_files(FILE*, FILE*)':
jni/trainEngine/../TransferCL/src/dependencies.h:11:85: warning: format '%d' expects argument of type 'int', but argument 4 has type 'long int' [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/trainEngine/train.cpp:775:9: note: in expansion of macro 'LOGI'
         LOGI("Two files are not equal :  byte poistion at which two files differ is %d\n", ftell(fp1)+1);
         ^
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
18:46:44 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCLNative <= transferCLinterface.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= train.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
In file included from jni/trainEngine/../TransferCL/src/TransferCL.h:6:0,
                 from jni/trainEngine/train.cpp:11:
jni/trainEngine/train.cpp: In member function 'void TrainModel::compare_two_binary_files(FILE*, FILE*)':
jni/trainEngine/../TransferCL/src/dependencies.h:11:85: warning: format '%d' expects argument of type 'int', but argument 4 has type 'long int' [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/trainEngine/train.cpp:775:9: note: in expansion of macro 'LOGI'
         LOGI("Two files are not equal :  byte poistion at which two files differ is %d\n", ftell(fp1)+1);
         ^
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
19:16:51 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
19:18:46 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= NetdefToNet.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
19:19:40 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= NetdefToNet.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
19:20:03 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= NetdefToNet.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
19:20:30 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= NetdefToNet.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
19:21:29 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCLNative <= transferCLinterface.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= train.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= predict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetdefToNet.cpp
In file included from jni/trainEngine/../TransferCL/src/TransferCL.h:6:0,
                 from jni/trainEngine/train.cpp:11:
jni/trainEngine/train.cpp: In member function 'void TrainModel::compare_two_binary_files(FILE*, FILE*)':
jni/trainEngine/../TransferCL/src/dependencies.h:11:85: warning: format '%d' expects argument of type 'int', but argument 4 has type 'long int' [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/trainEngine/train.cpp:775:9: note: in expansion of macro 'LOGI'
         LOGI("Two files are not equal :  byte poistion at which two files differ is %d\n", ftell(fp1)+1);
         ^
[armeabi-v7a] Compile++ arm  : transferCL <= TransferCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedLayer.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
19:23:42 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCLNative <= transferCLinterface.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= predict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= train.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetdefToNet.cpp
In file included from jni/trainEngine/../TransferCL/src/TransferCL.h:6:0,
                 from jni/trainEngine/train.cpp:11:
jni/trainEngine/train.cpp: In member function 'void TrainModel::compare_two_binary_files(FILE*, FILE*)':
jni/trainEngine/../TransferCL/src/dependencies.h:11:85: warning: format '%d' expects argument of type 'int', but argument 4 has type 'long int' [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/trainEngine/train.cpp:775:9: note: in expansion of macro 'LOGI'
         LOGI("Two files are not equal :  byte poistion at which two files differ is %d\n", ftell(fp1)+1);
         ^
[armeabi-v7a] Compile++ arm  : transferCL <= TransferCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedLayer.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
19:26:23 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
19:27:10 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
19:27:42 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
19:29:11 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
19:29:44 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
19:30:11 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
19:31:11 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
19:31:37 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
19:32:19 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
19:38:13 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCLNative <= transferCLinterface.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= train.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= predict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetdefToNet.cpp
In file included from jni/trainEngine/../TransferCL/src/TransferCL.h:6:0,
                 from jni/trainEngine/train.cpp:11:
jni/trainEngine/train.cpp: In member function 'void TrainModel::compare_two_binary_files(FILE*, FILE*)':
jni/trainEngine/../TransferCL/src/dependencies.h:11:85: warning: format '%d' expects argument of type 'int', but argument 4 has type 'long int' [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/trainEngine/train.cpp:775:9: note: in expansion of macro 'LOGI'
         LOGI("Two files are not equal :  byte poistion at which two files differ is %d\n", ftell(fp1)+1);
         ^
[armeabi-v7a] Compile++ arm  : transferCL <= TransferCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedLayer.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
19:44:16 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
19:49:24 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= NetdefToNet.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
19:51:25 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= BackpropWeightsNaive.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
19:52:07 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= train.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
In file included from jni/trainEngine/../TransferCL/src/TransferCL.h:6:0,
                 from jni/trainEngine/train.cpp:11:
jni/trainEngine/train.cpp: In member function 'void TrainModel::compare_two_binary_files(FILE*, FILE*)':
jni/trainEngine/../TransferCL/src/dependencies.h:11:85: warning: format '%d' expects argument of type 'int', but argument 4 has type 'long int' [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/trainEngine/train.cpp:775:9: note: in expansion of macro 'LOGI'
         LOGI("Two files are not equal :  byte poistion at which two files differ is %d\n", ftell(fp1)+1);
         ^
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
19:54:00 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= train.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackpropWeightsNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
In file included from jni/trainEngine/../TransferCL/src/TransferCL.h:6:0,
                 from jni/trainEngine/train.cpp:11:
jni/trainEngine/train.cpp: In member function 'void TrainModel::compare_two_binary_files(FILE*, FILE*)':
jni/trainEngine/../TransferCL/src/dependencies.h:11:85: warning: format '%d' expects argument of type 'int', but argument 4 has type 'long int' [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/trainEngine/train.cpp:775:9: note: in expansion of macro 'LOGI'
         LOGI("Two files are not equal :  byte poistion at which two files differ is %d\n", ftell(fp1)+1);
         ^
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
19:55:52 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
19:57:11 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
19:57:55 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
20:00:59 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
20:08:55 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNet.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
20:11:45 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayer.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
20:13:38 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNet.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
20:53:05 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCLNative <= transferCLinterface.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= train.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= predict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetdefToNet.cpp
In file included from jni/trainEngine/../TransferCL/src/TransferCL.h:6:0,
                 from jni/trainEngine/train.cpp:11:
jni/trainEngine/train.cpp: In member function 'void TrainModel::compare_two_binary_files(FILE*, FILE*)':
jni/trainEngine/../TransferCL/src/dependencies.h:11:85: warning: format '%d' expects argument of type 'int', but argument 4 has type 'long int' [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/trainEngine/train.cpp:775:9: note: in expansion of macro 'LOGI'
         LOGI("Two files are not equal :  byte poistion at which two files differ is %d\n", ftell(fp1)+1);
         ^
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ManifestLoaderv1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Loader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv1Wrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= JpegHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FileHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= stringhelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= RandomSingleton.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainable.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNetMould.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNet.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TransferCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemandv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchData.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp: In member function 'virtual void NetLearnerOnDemandv2::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:186:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: postEpochTesting: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:193:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= EpochMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcherv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchProcess.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearner.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayerMaker.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp: In member function 'virtual void NetLearnerOnDemand::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:183:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:188:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CrossEntropyLoss.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayerPredict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SquareLossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= IAcceptsLabels.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Layer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainingContext.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGD.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsPersister.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OriginalInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= UniformInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CppRuntimeBoundary.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackpropWeightsNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerDimensions.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= deviceinfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DevicesInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DeviceInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= EasyCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TemplatedKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= platforminfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLWrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConfigManager.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= MnistLoader.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
20:55:50 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCLNative <= transferCLinterface.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= train.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= predict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetdefToNet.cpp
In file included from jni/trainEngine/../TransferCL/src/TransferCL.h:6:0,
                 from jni/trainEngine/train.cpp:11:
jni/trainEngine/train.cpp: In member function 'void TrainModel::compare_two_binary_files(FILE*, FILE*)':
jni/trainEngine/../TransferCL/src/dependencies.h:11:85: warning: format '%d' expects argument of type 'int', but argument 4 has type 'long int' [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/trainEngine/train.cpp:775:9: note: in expansion of macro 'LOGI'
         LOGI("Two files are not equal :  byte poistion at which two files differ is %d\n", ftell(fp1)+1);
         ^
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ManifestLoaderv1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Loader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv1Wrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= JpegHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FileHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= stringhelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= RandomSingleton.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainable.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNetMould.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNet.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TransferCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemandv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchData.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp: In member function 'virtual void NetLearnerOnDemandv2::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:186:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: postEpochTesting: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:193:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= EpochMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcherv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchProcess.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearner.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayer.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp: In member function 'virtual void NetLearnerOnDemand::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:183:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:188:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CrossEntropyLoss.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayerPredict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SquareLossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= IAcceptsLabels.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Layer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainingContext.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGD.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsPersister.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OriginalInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CppRuntimeBoundary.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= UniformInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackpropWeightsNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerDimensions.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= deviceinfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DevicesInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DeviceInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= EasyCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TemplatedKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= platforminfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLWrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConfigManager.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] Compile++ arm  : transferCL <= MnistLoader.cpp
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
22:58:51 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= train.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= predict.cpp
[armeabi-v7a] Compile++ arm  : transferCLNative <= transferCLinterface.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetdefToNet.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ManifestLoaderv1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Loader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv1Wrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoader.cpp
In file included from jni/trainEngine/../TransferCL/src/TransferCL.h:6:0,
                 from jni/trainEngine/train.cpp:11:
jni/trainEngine/train.cpp: In member function 'void TrainModel::compare_two_binary_files(FILE*, FILE*)':
jni/trainEngine/../TransferCL/src/dependencies.h:11:85: warning: format '%d' expects argument of type 'int', but argument 4 has type 'long int' [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/trainEngine/train.cpp:775:9: note: in expansion of macro 'LOGI'
         LOGI("Two files are not equal :  byte poistion at which two files differ is %d\n", ftell(fp1)+1);
         ^
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= JpegHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FileHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= stringhelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= RandomSingleton.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNetMould.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainable.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNet.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TransferCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemandv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchData.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= EpochMaker.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp: In member function 'virtual void NetLearnerOnDemandv2::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:186:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: postEpochTesting: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:193:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcherv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchProcess.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearner.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayer.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp: In member function 'virtual void NetLearnerOnDemand::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:183:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:188:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CrossEntropyLoss.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayerPredict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SquareLossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= IAcceptsLabels.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Layer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainingContext.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGD.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsPersister.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OriginalInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= UniformInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackpropWeightsNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CppRuntimeBoundary.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerDimensions.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= deviceinfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DevicesInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DeviceInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= EasyCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TemplatedKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= platforminfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLWrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConfigManager.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= MnistLoader.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
23:47:01 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= train.cpp
[armeabi-v7a] Compile++ arm  : transferCLNative <= transferCLinterface.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetdefToNet.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= predict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ManifestLoaderv1.cpp
In file included from jni/trainEngine/../TransferCL/src/TransferCL.h:6:0,
                 from jni/trainEngine/train.cpp:11:
jni/trainEngine/train.cpp: In member function 'void TrainModel::compare_two_binary_files(FILE*, FILE*)':
jni/trainEngine/../TransferCL/src/dependencies.h:11:85: warning: format '%d' expects argument of type 'int', but argument 4 has type 'long int' [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/trainEngine/train.cpp:775:9: note: in expansion of macro 'LOGI'
         LOGI("Two files are not equal :  byte poistion at which two files differ is %d\n", ftell(fp1)+1);
         ^
[armeabi-v7a] Compile++ arm  : transferCL <= Loader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv1Wrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= JpegHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FileHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= stringhelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainable.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= RandomSingleton.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNetMould.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNet.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TransferCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemandv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchData.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= EpochMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp: In member function 'virtual void NetLearnerOnDemandv2::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:186:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: postEpochTesting: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:193:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcherv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchProcess.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearner.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayerMaker.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp: In member function 'virtual void NetLearnerOnDemand::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:183:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:188:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CrossEntropyLoss.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SquareLossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayerPredict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= IAcceptsLabels.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Layer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainingContext.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGD.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsPersister.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OriginalInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= UniformInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CppRuntimeBoundary.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackpropWeightsNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerDimensions.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= deviceinfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DevicesInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= EasyCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DeviceInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TemplatedKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= platforminfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLWrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConfigManager.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= MnistLoader.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
23:50:36 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= predict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= train.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetdefToNet.cpp
[armeabi-v7a] Compile++ arm  : transferCLNative <= transferCLinterface.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ManifestLoaderv1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Loader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv1Wrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardCpu.cpp
In file included from jni/trainEngine/../TransferCL/src/TransferCL.h:6:0,
                 from jni/trainEngine/train.cpp:11:
jni/trainEngine/train.cpp: In member function 'void TrainModel::compare_two_binary_files(FILE*, FILE*)':
jni/trainEngine/../TransferCL/src/dependencies.h:11:85: warning: format '%d' expects argument of type 'int', but argument 4 has type 'long int' [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/trainEngine/train.cpp:775:9: note: in expansion of macro 'LOGI'
         LOGI("Two files are not equal :  byte poistion at which two files differ is %d\n", ftell(fp1)+1);
         ^
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= JpegHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FileHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= stringhelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= RandomSingleton.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainable.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNetMould.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNet.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TransferCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemandv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchData.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= EpochMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp: In member function 'virtual void NetLearnerOnDemandv2::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:186:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: postEpochTesting: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:193:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcherv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchProcess.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearner.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayer.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp: In member function 'virtual void NetLearnerOnDemand::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:183:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:188:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CrossEntropyLoss.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayerPredict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SquareLossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= IAcceptsLabels.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Layer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainingContext.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGD.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsPersister.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OriginalInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= UniformInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CppRuntimeBoundary.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackpropWeightsNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerDimensions.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= deviceinfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DevicesInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DeviceInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= EasyCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TemplatedKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= platforminfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLWrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConfigManager.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= MnistLoader.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
02:10:16 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCLNative <= transferCLinterface.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= train.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= predict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetdefToNet.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ManifestLoaderv1.cpp
In file included from jni/trainEngine/../TransferCL/src/TransferCL.h:6:0,
                 from jni/trainEngine/train.cpp:11:
jni/trainEngine/train.cpp: In member function 'void TrainModel::compare_two_binary_files(FILE*, FILE*)':
jni/trainEngine/../TransferCL/src/dependencies.h:11:85: warning: format '%d' expects argument of type 'int', but argument 4 has type 'long int' [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/trainEngine/train.cpp:775:9: note: in expansion of macro 'LOGI'
         LOGI("Two files are not equal :  byte poistion at which two files differ is %d\n", ftell(fp1)+1);
         ^
[armeabi-v7a] Compile++ arm  : transferCL <= Loader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv1Wrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= JpegHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FileHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= stringhelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= RandomSingleton.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainable.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNetMould.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNet.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TransferCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemandv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchData.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp: In member function 'virtual void NetLearnerOnDemandv2::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:186:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: postEpochTesting: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:193:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= EpochMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcherv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchProcess.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearner.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayer.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp: In member function 'virtual void NetLearnerOnDemand::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:183:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:188:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CrossEntropyLoss.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayerPredict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SquareLossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= IAcceptsLabels.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Layer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainingContext.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGD.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsPersister.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= UniformInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OriginalInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CppRuntimeBoundary.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackpropWeightsNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerDimensions.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= deviceinfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DevicesInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DeviceInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= EasyCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TemplatedKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= platforminfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLWrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConfigManager.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= MnistLoader.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
02:18:01 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
02:18:18 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCLNative <= transferCLinterface.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= predict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= train.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetdefToNet.cpp
In file included from jni/trainEngine/../TransferCL/src/TransferCL.h:6:0,
                 from jni/trainEngine/train.cpp:11:
jni/trainEngine/train.cpp: In member function 'void TrainModel::compare_two_binary_files(FILE*, FILE*)':
jni/trainEngine/../TransferCL/src/dependencies.h:11:85: warning: format '%d' expects argument of type 'int', but argument 4 has type 'long int' [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/trainEngine/train.cpp:775:9: note: in expansion of macro 'LOGI'
         LOGI("Two files are not equal :  byte poistion at which two files differ is %d\n", ftell(fp1)+1);
         ^
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ManifestLoaderv1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Loader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv1Wrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= JpegHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FileHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= stringhelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= RandomSingleton.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainable.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNetMould.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNet.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TransferCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemandv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchData.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp: In member function 'virtual void NetLearnerOnDemandv2::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:186:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: postEpochTesting: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:193:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= EpochMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcherv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchProcess.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearner.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayer.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp: In member function 'virtual void NetLearnerOnDemand::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:183:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:188:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CrossEntropyLoss.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayerPredict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SquareLossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= IAcceptsLabels.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Layer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainingContext.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGD.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsPersister.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OriginalInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CppRuntimeBoundary.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= UniformInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackpropWeightsNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerDimensions.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= deviceinfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DevicesInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DeviceInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= EasyCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TemplatedKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= platforminfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLWrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConfigManager.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= MnistLoader.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
02:33:54 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCLNative <= transferCLinterface.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= train.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= predict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetdefToNet.cpp
In file included from jni/trainEngine/../TransferCL/src/TransferCL.h:6:0,
                 from jni/trainEngine/train.cpp:11:
jni/trainEngine/train.cpp: In member function 'void TrainModel::compare_two_binary_files(FILE*, FILE*)':
jni/trainEngine/../TransferCL/src/dependencies.h:11:85: warning: format '%d' expects argument of type 'int', but argument 4 has type 'long int' [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/trainEngine/train.cpp:775:9: note: in expansion of macro 'LOGI'
         LOGI("Two files are not equal :  byte poistion at which two files differ is %d\n", ftell(fp1)+1);
         ^
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ManifestLoaderv1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Loader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv1Wrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= JpegHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FileHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= stringhelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= RandomSingleton.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainable.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNetMould.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNet.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TransferCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemandv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchData.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp: In member function 'virtual void NetLearnerOnDemandv2::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:186:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: postEpochTesting: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:193:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= EpochMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcherv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchProcess.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearner.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayer.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp: In member function 'virtual void NetLearnerOnDemand::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:183:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:188:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CrossEntropyLoss.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayerPredict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SquareLossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= IAcceptsLabels.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Layer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainingContext.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGD.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsPersister.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OriginalInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= UniformInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CppRuntimeBoundary.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackpropWeightsNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerDimensions.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= deviceinfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DevicesInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DeviceInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= EasyCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TemplatedKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= platforminfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLWrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConfigManager.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= MnistLoader.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
02:35:06 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
02:40:24 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCLNative <= transferCLinterface.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= train.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= predict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetdefToNet.cpp
In file included from jni/trainEngine/../TransferCL/src/TransferCL.h:6:0,
                 from jni/trainEngine/train.cpp:11:
jni/trainEngine/train.cpp: In member function 'void TrainModel::compare_two_binary_files(FILE*, FILE*)':
jni/trainEngine/../TransferCL/src/dependencies.h:11:85: warning: format '%d' expects argument of type 'int', but argument 4 has type 'long int' [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/trainEngine/train.cpp:775:9: note: in expansion of macro 'LOGI'
         LOGI("Two files are not equal :  byte poistion at which two files differ is %d\n", ftell(fp1)+1);
         ^
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ManifestLoaderv1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Loader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv1Wrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= JpegHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FileHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= stringhelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= RandomSingleton.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainable.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNetMould.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNet.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TransferCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemandv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchData.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp: In member function 'virtual void NetLearnerOnDemandv2::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:186:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: postEpochTesting: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:193:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= EpochMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcherv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchProcess.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearner.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayer.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp: In member function 'virtual void NetLearnerOnDemand::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:183:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:188:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CrossEntropyLoss.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayerPredict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SquareLossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= IAcceptsLabels.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Layer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainingContext.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGD.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsPersister.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OriginalInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= UniformInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CppRuntimeBoundary.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackpropWeightsNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerDimensions.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= deviceinfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DevicesInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DeviceInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TemplatedKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= EasyCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= platforminfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLWrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConfigManager.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= MnistLoader.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
02:56:25 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCLNative <= transferCLinterface.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= predict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= train.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetdefToNet.cpp
In file included from jni/trainEngine/../TransferCL/src/TransferCL.h:6:0,
                 from jni/trainEngine/train.cpp:11:
jni/trainEngine/train.cpp: In member function 'void TrainModel::compare_two_binary_files(FILE*, FILE*)':
jni/trainEngine/../TransferCL/src/dependencies.h:11:85: warning: format '%d' expects argument of type 'int', but argument 4 has type 'long int' [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/trainEngine/train.cpp:775:9: note: in expansion of macro 'LOGI'
         LOGI("Two files are not equal :  byte poistion at which two files differ is %d\n", ftell(fp1)+1);
         ^
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ManifestLoaderv1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Loader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv1Wrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= JpegHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FileHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= stringhelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= RandomSingleton.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainable.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNetMould.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNet.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TransferCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemandv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchData.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp: In member function 'virtual void NetLearnerOnDemandv2::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:186:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: postEpochTesting: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:193:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= EpochMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcherv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchProcess.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearner.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayer.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp: In member function 'virtual void NetLearnerOnDemand::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:183:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:188:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CrossEntropyLoss.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayerPredict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SquareLossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= IAcceptsLabels.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Layer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainingContext.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGD.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsPersister.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OriginalInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= UniformInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CppRuntimeBoundary.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackpropWeightsNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerDimensions.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= deviceinfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DevicesInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DeviceInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= EasyCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TemplatedKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= platforminfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLWrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConfigManager.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= MnistLoader.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
02:57:39 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
02:57:52 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
02:58:08 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
03:09:05 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCLNative <= transferCLinterface.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= train.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= predict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetdefToNet.cpp
In file included from jni/trainEngine/../TransferCL/src/TransferCL.h:6:0,
                 from jni/trainEngine/train.cpp:11:
jni/trainEngine/train.cpp: In member function 'void TrainModel::compare_two_binary_files(FILE*, FILE*)':
jni/trainEngine/../TransferCL/src/dependencies.h:11:85: warning: format '%d' expects argument of type 'int', but argument 4 has type 'long int' [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/trainEngine/train.cpp:775:9: note: in expansion of macro 'LOGI'
         LOGI("Two files are not equal :  byte poistion at which two files differ is %d\n", ftell(fp1)+1);
         ^
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ManifestLoaderv1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Loader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv1Wrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= JpegHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FileHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= stringhelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= RandomSingleton.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainable.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNetMould.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNet.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TransferCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemandv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchData.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= EpochMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp: In member function 'virtual void NetLearnerOnDemandv2::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:186:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: postEpochTesting: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:193:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcherv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchProcess.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearner.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayer.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp: In member function 'virtual void NetLearnerOnDemand::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:183:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:188:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CrossEntropyLoss.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayerPredict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SquareLossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= IAcceptsLabels.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Layer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainingContext.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGD.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsPersister.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= UniformInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OriginalInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CppRuntimeBoundary.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackpropWeightsNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerDimensions.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= deviceinfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DevicesInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DeviceInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= EasyCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TemplatedKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= platforminfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLWrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConfigManager.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= MnistLoader.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
03:12:22 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
03:14:16 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
03:16:21 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayer.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
03:21:17 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCLNative <= transferCLinterface.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= predict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetdefToNet.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= train.cpp
In file included from jni/trainEngine/../TransferCL/src/TransferCL.h:6:0,
                 from jni/trainEngine/train.cpp:11:
jni/trainEngine/train.cpp: In member function 'void TrainModel::compare_two_binary_files(FILE*, FILE*)':
jni/trainEngine/../TransferCL/src/dependencies.h:11:85: warning: format '%d' expects argument of type 'int', but argument 4 has type 'long int' [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/trainEngine/train.cpp:775:9: note: in expansion of macro 'LOGI'
         LOGI("Two files are not equal :  byte poistion at which two files differ is %d\n", ftell(fp1)+1);
         ^
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ManifestLoaderv1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Loader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv1Wrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= JpegHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FileHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= stringhelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= RandomSingleton.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainable.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNetMould.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNet.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TransferCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemandv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchData.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp: In member function 'virtual void NetLearnerOnDemandv2::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:186:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: postEpochTesting: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:193:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= EpochMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcherv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchProcess.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearner.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayerMaker.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp: In member function 'virtual void NetLearnerOnDemand::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:183:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:188:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CrossEntropyLoss.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SquareLossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayerPredict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= IAcceptsLabels.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Layer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainingContext.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGD.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsPersister.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OriginalInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= UniformInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CppRuntimeBoundary.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackpropWeightsNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerDimensions.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= deviceinfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DevicesInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DeviceInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= EasyCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TemplatedKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= platforminfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLWrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConfigManager.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= MnistLoader.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
03:24:14 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
03:30:42 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCLNative <= transferCLinterface.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= predict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= train.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetdefToNet.cpp
In file included from jni/trainEngine/../TransferCL/src/TransferCL.h:6:0,
                 from jni/trainEngine/train.cpp:11:
jni/trainEngine/train.cpp: In member function 'void TrainModel::compare_two_binary_files(FILE*, FILE*)':
jni/trainEngine/../TransferCL/src/dependencies.h:11:85: warning: format '%d' expects argument of type 'int', but argument 4 has type 'long int' [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/trainEngine/train.cpp:775:9: note: in expansion of macro 'LOGI'
         LOGI("Two files are not equal :  byte poistion at which two files differ is %d\n", ftell(fp1)+1);
         ^
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ManifestLoaderv1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Loader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv1Wrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= JpegHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FileHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= stringhelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= RandomSingleton.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainable.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNetMould.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNet.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TransferCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemandv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchData.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp: In member function 'virtual void NetLearnerOnDemandv2::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:186:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: postEpochTesting: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:193:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= EpochMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcherv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchProcess.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearner.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayer.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp: In member function 'virtual void NetLearnerOnDemand::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:183:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:188:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CrossEntropyLoss.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayerPredict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SquareLossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= IAcceptsLabels.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Layer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainingContext.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGD.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsPersister.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= UniformInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OriginalInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CppRuntimeBoundary.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackpropWeightsNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerDimensions.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= deviceinfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DevicesInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DeviceInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= EasyCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TemplatedKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= platforminfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLWrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConfigManager.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= MnistLoader.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
03:32:37 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCLNative <= transferCLinterface.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= train.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetdefToNet.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= predict.cpp
In file included from jni/trainEngine/../TransferCL/src/TransferCL.h:6:0,
                 from jni/trainEngine/train.cpp:11:
jni/trainEngine/train.cpp: In member function 'void TrainModel::compare_two_binary_files(FILE*, FILE*)':
jni/trainEngine/../TransferCL/src/dependencies.h:11:85: warning: format '%d' expects argument of type 'int', but argument 4 has type 'long int' [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/trainEngine/train.cpp:775:9: note: in expansion of macro 'LOGI'
         LOGI("Two files are not equal :  byte poistion at which two files differ is %d\n", ftell(fp1)+1);
         ^
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ManifestLoaderv1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Loader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv1Wrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= JpegHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FileHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= stringhelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= RandomSingleton.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainable.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNetMould.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNet.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TransferCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemandv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchData.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp: In member function 'virtual void NetLearnerOnDemandv2::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:186:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: postEpochTesting: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:193:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= EpochMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcherv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchProcess.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearner.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayerMaker.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp: In member function 'virtual void NetLearnerOnDemand::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:183:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:188:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CrossEntropyLoss.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayerPredict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SquareLossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= IAcceptsLabels.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Layer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainingContext.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGD.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsPersister.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OriginalInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= UniformInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CppRuntimeBoundary.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackpropWeightsNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerDimensions.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= deviceinfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DevicesInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DeviceInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= EasyCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TemplatedKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLWrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= platforminfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConfigManager.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= MnistLoader.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
10:02:56 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
10:11:18 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCLNative <= transferCLinterface.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= train.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetdefToNet.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= predict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv2.cpp
In file included from jni/trainEngine/../TransferCL/src/TransferCL.h:6:0,
                 from jni/trainEngine/train.cpp:11:
jni/trainEngine/train.cpp: In member function 'void TrainModel::compare_two_binary_files(FILE*, FILE*)':
jni/trainEngine/../TransferCL/src/dependencies.h:11:85: warning: format '%d' expects argument of type 'int', but argument 4 has type 'long int' [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/trainEngine/train.cpp:775:9: note: in expansion of macro 'LOGI'
         LOGI("Two files are not equal :  byte poistion at which two files differ is %d\n", ftell(fp1)+1);
         ^
[armeabi-v7a] Compile++ arm  : transferCL <= ManifestLoaderv1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Loader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv1Wrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= JpegHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FileHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= stringhelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= RandomSingleton.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainable.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNetMould.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNet.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TransferCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemandv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchData.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= EpochMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp: In member function 'virtual void NetLearnerOnDemandv2::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:186:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: postEpochTesting: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:193:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= BatchLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcherv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchProcess.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearner.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayer.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp: In member function 'virtual void NetLearnerOnDemand::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:183:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:188:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CrossEntropyLoss.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayerPredict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SquareLossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= IAcceptsLabels.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Layer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainingContext.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGD.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsPersister.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OriginalInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= UniformInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CppRuntimeBoundary.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackpropWeightsNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerDimensions.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= deviceinfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DevicesInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= EasyCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DeviceInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TemplatedKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= platforminfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLWrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConfigManager.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= MnistLoader.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
10:22:29 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= train.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackpropWeightsNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
In file included from jni/trainEngine/../TransferCL/src/TransferCL.h:6:0,
                 from jni/trainEngine/train.cpp:11:
jni/trainEngine/train.cpp: In member function 'void TrainModel::compare_two_binary_files(FILE*, FILE*)':
jni/trainEngine/../TransferCL/src/dependencies.h:11:85: warning: format '%d' expects argument of type 'int', but argument 4 has type 'long int' [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/trainEngine/train.cpp:775:9: note: in expansion of macro 'LOGI'
         LOGI("Two files are not equal :  byte poistion at which two files differ is %d\n", ftell(fp1)+1);
         ^
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
10:27:51 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= train.cpp
[armeabi-v7a] Compile++ arm  : transferCLNative <= transferCLinterface.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= predict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetdefToNet.cpp
In file included from jni/trainEngine/../TransferCL/src/TransferCL.h:6:0,
                 from jni/trainEngine/train.cpp:11:
jni/trainEngine/train.cpp: In member function 'void TrainModel::compare_two_binary_files(FILE*, FILE*)':
jni/trainEngine/../TransferCL/src/dependencies.h:11:85: warning: format '%d' expects argument of type 'int', but argument 4 has type 'long int' [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/trainEngine/train.cpp:775:9: note: in expansion of macro 'LOGI'
         LOGI("Two files are not equal :  byte poistion at which two files differ is %d\n", ftell(fp1)+1);
         ^
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ManifestLoaderv1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Loader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv1Wrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= JpegHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FileHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= stringhelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= RandomSingleton.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainable.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNetMould.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNet.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TransferCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemandv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchData.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= EpochMaker.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp: In member function 'virtual void NetLearnerOnDemandv2::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:186:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: postEpochTesting: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:193:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcherv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchProcess.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearner.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayer.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp: In member function 'virtual void NetLearnerOnDemand::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:183:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:188:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CrossEntropyLoss.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayerPredict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SquareLossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= IAcceptsLabels.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Layer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainingContext.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGD.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsPersister.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OriginalInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= UniformInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CppRuntimeBoundary.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackpropWeightsNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerDimensions.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= deviceinfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DevicesInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DeviceInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= EasyCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TemplatedKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= platforminfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLWrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConfigManager.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= MnistLoader.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
10:30:41 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCLNative <= transferCLinterface.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= train.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= predict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetdefToNet.cpp
In file included from jni/trainEngine/../TransferCL/src/TransferCL.h:6:0,
                 from jni/trainEngine/train.cpp:11:
jni/trainEngine/train.cpp: In member function 'void TrainModel::compare_two_binary_files(FILE*, FILE*)':
jni/trainEngine/../TransferCL/src/dependencies.h:11:85: warning: format '%d' expects argument of type 'int', but argument 4 has type 'long int' [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/trainEngine/train.cpp:775:9: note: in expansion of macro 'LOGI'
         LOGI("Two files are not equal :  byte poistion at which two files differ is %d\n", ftell(fp1)+1);
         ^
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ManifestLoaderv1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Loader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv1Wrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= JpegHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FileHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= stringhelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= RandomSingleton.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainable.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNetMould.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNet.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TransferCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemandv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchData.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp: In member function 'virtual void NetLearnerOnDemandv2::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:186:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: postEpochTesting: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:193:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= EpochMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcherv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchProcess.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearner.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayer.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp: In member function 'virtual void NetLearnerOnDemand::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:183:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:188:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CrossEntropyLoss.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayerPredict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SquareLossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= IAcceptsLabels.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Layer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainingContext.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGD.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsPersister.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OriginalInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= UniformInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CppRuntimeBoundary.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackpropWeightsNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerDimensions.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= deviceinfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DevicesInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DeviceInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= EasyCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TemplatedKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= platforminfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLWrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConfigManager.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= MnistLoader.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
10:33:53 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
10:38:09 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
10:38:26 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
10:40:09 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
10:47:00 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
10:48:04 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
10:54:19 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
make.exe: *** Access is denied.

.  Stop.
make.exe: *** Waiting for unfinished jobs....
Command canceled
11:00:13 **** Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
Command canceled
11:00:17 **** Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
11:03:19 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCLNative <= transferCLinterface.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= train.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= predict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetdefToNet.cpp
In file included from jni/trainEngine/../TransferCL/src/TransferCL.h:6:0,
                 from jni/trainEngine/train.cpp:11:
jni/trainEngine/train.cpp: In member function 'void TrainModel::compare_two_binary_files(FILE*, FILE*)':
jni/trainEngine/../TransferCL/src/dependencies.h:11:85: warning: format '%d' expects argument of type 'int', but argument 4 has type 'long int' [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/trainEngine/train.cpp:775:9: note: in expansion of macro 'LOGI'
         LOGI("Two files are not equal :  byte poistion at which two files differ is %d\n", ftell(fp1)+1);
         ^
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Loader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv1Wrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ManifestLoaderv1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= JpegHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= stringhelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FileHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= RandomSingleton.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainable.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNetMould.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNet.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TransferCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemandv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchData.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= EpochMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp: In member function 'virtual void NetLearnerOnDemandv2::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:186:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: postEpochTesting: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:193:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcherv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchProcess.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearner.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayer.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp: In member function 'virtual void NetLearnerOnDemand::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:183:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:188:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CrossEntropyLoss.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SquareLossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayerPredict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= IAcceptsLabels.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Layer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainingContext.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGD.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsPersister.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OriginalInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= UniformInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CppRuntimeBoundary.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackpropWeightsNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerDimensions.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= deviceinfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DevicesInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DeviceInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= EasyCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TemplatedKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= platforminfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLWrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConfigManager.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= MnistLoader.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
11:07:23 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
11:11:09 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
11:13:27 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNet.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
11:20:16 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCLNative <= transferCLinterface.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= train.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= predict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetdefToNet.cpp
In file included from jni/trainEngine/../TransferCL/src/TransferCL.h:6:0,
                 from jni/trainEngine/train.cpp:11:
jni/trainEngine/train.cpp: In member function 'void TrainModel::compare_two_binary_files(FILE*, FILE*)':
jni/trainEngine/../TransferCL/src/dependencies.h:11:85: warning: format '%d' expects argument of type 'int', but argument 4 has type 'long int' [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/trainEngine/train.cpp:775:9: note: in expansion of macro 'LOGI'
         LOGI("Two files are not equal :  byte poistion at which two files differ is %d\n", ftell(fp1)+1);
         ^
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ManifestLoaderv1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Loader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv1Wrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FileHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= JpegHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= stringhelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainable.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= RandomSingleton.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNetMould.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNet.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TransferCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemandv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchData.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp: In member function 'virtual void NetLearnerOnDemandv2::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:186:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: postEpochTesting: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:193:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= EpochMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcherv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchProcess.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearner.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayer.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp: In member function 'virtual void NetLearnerOnDemand::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:183:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:188:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CrossEntropyLoss.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayerPredict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SquareLossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= IAcceptsLabels.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Layer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainingContext.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGD.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsPersister.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OriginalInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= UniformInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CppRuntimeBoundary.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackpropWeightsNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerDimensions.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= deviceinfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DevicesInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= EasyCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DeviceInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TemplatedKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= platforminfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLWrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConfigManager.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= MnistLoader.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
11:22:40 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCLNative <= transferCLinterface.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= predict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= train.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetdefToNet.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv2.cpp
In file included from jni/trainEngine/../TransferCL/src/TransferCL.h:6:0,
                 from jni/trainEngine/train.cpp:11:
jni/trainEngine/train.cpp: In member function 'void TrainModel::compare_two_binary_files(FILE*, FILE*)':
jni/trainEngine/../TransferCL/src/dependencies.h:11:85: warning: format '%d' expects argument of type 'int', but argument 4 has type 'long int' [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/trainEngine/train.cpp:775:9: note: in expansion of macro 'LOGI'
         LOGI("Two files are not equal :  byte poistion at which two files differ is %d\n", ftell(fp1)+1);
         ^
[armeabi-v7a] Compile++ arm  : transferCL <= Loader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ManifestLoaderv1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv1Wrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= JpegHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FileHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= stringhelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= RandomSingleton.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainable.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNetMould.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TransferCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNet.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemandv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchData.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= EpochMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp: In member function 'virtual void NetLearnerOnDemandv2::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:186:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: postEpochTesting: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:193:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcherv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchProcess.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearner.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayer.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp: In member function 'virtual void NetLearnerOnDemand::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:183:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:188:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CrossEntropyLoss.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayerPredict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= IAcceptsLabels.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SquareLossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Layer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainingContext.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGD.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsPersister.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OriginalInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= UniformInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CppRuntimeBoundary.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackpropWeightsNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerDimensions.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= deviceinfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DevicesInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DeviceInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= EasyCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TemplatedKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= platforminfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLWrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConfigManager.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= MnistLoader.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
11:35:40 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
11:40:52 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
11:41:54 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCLNative <= transferCLinterface.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= train.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= predict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetdefToNet.cpp
In file included from jni/trainEngine/../TransferCL/src/TransferCL.h:6:0,
                 from jni/trainEngine/train.cpp:11:
jni/trainEngine/train.cpp: In member function 'void TrainModel::compare_two_binary_files(FILE*, FILE*)':
jni/trainEngine/../TransferCL/src/dependencies.h:11:85: warning: format '%d' expects argument of type 'int', but argument 4 has type 'long int' [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/trainEngine/train.cpp:775:9: note: in expansion of macro 'LOGI'
         LOGI("Two files are not equal :  byte poistion at which two files differ is %d\n", ftell(fp1)+1);
         ^
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ManifestLoaderv1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Loader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv1Wrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= JpegHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FileHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= stringhelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= RandomSingleton.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainable.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNetMould.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNet.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TransferCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemandv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchData.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp: In member function 'virtual void NetLearnerOnDemandv2::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:186:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: postEpochTesting: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:193:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= EpochMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcherv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchProcess.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearner.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayer.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp: In member function 'virtual void NetLearnerOnDemand::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:183:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:188:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CrossEntropyLoss.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayerPredict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SquareLossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= IAcceptsLabels.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Layer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainingContext.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGD.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsPersister.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= UniformInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CppRuntimeBoundary.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OriginalInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackpropWeightsNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerDimensions.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= deviceinfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DevicesInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DeviceInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= EasyCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TemplatedKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= platforminfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLWrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConfigManager.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= MnistLoader.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
11:47:25 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
11:50:10 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
11:55:21 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCLNative <= transferCLinterface.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetdefToNet.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= predict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= train.cpp
In file included from jni/trainEngine/../TransferCL/src/TransferCL.h:6:0,
                 from jni/trainEngine/train.cpp:11:
jni/trainEngine/train.cpp: In member function 'void TrainModel::compare_two_binary_files(FILE*, FILE*)':
jni/trainEngine/../TransferCL/src/dependencies.h:11:85: warning: format '%d' expects argument of type 'int', but argument 4 has type 'long int' [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/trainEngine/train.cpp:775:9: note: in expansion of macro 'LOGI'
         LOGI("Two files are not equal :  byte poistion at which two files differ is %d\n", ftell(fp1)+1);
         ^
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ManifestLoaderv1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Loader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv1Wrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= JpegHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FileHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= stringhelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= RandomSingleton.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainable.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNet.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNetMould.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TransferCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemandv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchData.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= EpochMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp: In member function 'virtual void NetLearnerOnDemandv2::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:186:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: postEpochTesting: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:193:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcherv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchProcess.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearner.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayerMaker.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp: In member function 'virtual void NetLearnerOnDemand::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:183:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:188:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CrossEntropyLoss.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayerPredict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SquareLossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= IAcceptsLabels.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Layer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainingContext.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGD.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsPersister.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OriginalInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= UniformInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CppRuntimeBoundary.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackpropWeightsNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalMaker.cpp
jni/TransferCL/src/conv/ConvolutionalLayer.cpp:1799:2: error: #endif without #if
 #endif
  ^
make.exe: *** [obj/local/armeabi-v7a/objs/transferCL/TransferCL/src/conv/ConvolutionalLayer.o] Error 1
make.exe: *** Waiting for unfinished jobs....
11:58:38 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerDimensions.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= deviceinfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DevicesInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DeviceInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= EasyCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TemplatedKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= platforminfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLWrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConfigManager.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= MnistLoader.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
12:00:55 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
12:02:59 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
12:03:42 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
12:04:09 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
12:06:24 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
12:06:58 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayer.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
12:08:36 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
12:09:30 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
12:12:00 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayer.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
12:12:58 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayer.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
12:14:05 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayer.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
12:17:10 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayer.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
12:18:12 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCLNative <= transferCLinterface.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= predict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= train.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetdefToNet.cpp
In file included from jni/trainEngine/../TransferCL/src/TransferCL.h:6:0,
                 from jni/trainEngine/train.cpp:11:
jni/trainEngine/train.cpp: In member function 'void TrainModel::compare_two_binary_files(FILE*, FILE*)':
jni/trainEngine/../TransferCL/src/dependencies.h:11:85: warning: format '%d' expects argument of type 'int', but argument 4 has type 'long int' [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/trainEngine/train.cpp:775:9: note: in expansion of macro 'LOGI'
         LOGI("Two files are not equal :  byte poistion at which two files differ is %d\n", ftell(fp1)+1);
         ^
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ManifestLoaderv1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Loader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv1Wrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= JpegHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FileHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= stringhelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= RandomSingleton.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainable.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNetMould.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNet.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TransferCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemandv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchData.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp: In member function 'virtual void NetLearnerOnDemandv2::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:186:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: postEpochTesting: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:193:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= EpochMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcherv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchProcess.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearner.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayer.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp: In member function 'virtual void NetLearnerOnDemand::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:183:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:188:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CrossEntropyLoss.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayerPredict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SquareLossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= IAcceptsLabels.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Layer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainingContext.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGD.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsPersister.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OriginalInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= UniformInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CppRuntimeBoundary.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackpropWeightsNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerDimensions.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= deviceinfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DevicesInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DeviceInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= EasyCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TemplatedKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= platforminfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLWrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConfigManager.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= MnistLoader.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
12:20:26 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= train.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackpropWeightsNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
In file included from jni/trainEngine/../TransferCL/src/TransferCL.h:6:0,
                 from jni/trainEngine/train.cpp:11:
jni/trainEngine/train.cpp: In member function 'void TrainModel::compare_two_binary_files(FILE*, FILE*)':
jni/trainEngine/../TransferCL/src/dependencies.h:11:85: warning: format '%d' expects argument of type 'int', but argument 4 has type 'long int' [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/trainEngine/train.cpp:775:9: note: in expansion of macro 'LOGI'
         LOGI("Two files are not equal :  byte poistion at which two files differ is %d\n", ftell(fp1)+1);
         ^
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
12:27:07 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= train.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackpropWeightsNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
jni/TransferCL/src/conv/ConvolutionalLayer.cpp: In constructor 'ConvolutionalLayer::ConvolutionalLayer(EasyCL*, Layer*, ConvolutionalMaker*)':
jni/TransferCL/src/conv/ConvolutionalLayer.cpp:253:34: error: missing template arguments before '+' token
     float const*newbias0 = array + getWeightsSize();
                                  ^
make.exe: *** [obj/local/armeabi-v7a/objs/transferCL/TransferCL/src/conv/ConvolutionalLayer.o] Error 1
make.exe: *** Waiting for unfinished jobs....
In file included from jni/trainEngine/../TransferCL/src/TransferCL.h:6:0,
                 from jni/trainEngine/train.cpp:11:
jni/trainEngine/train.cpp: In member function 'void TrainModel::compare_two_binary_files(FILE*, FILE*)':
jni/trainEngine/../TransferCL/src/dependencies.h:11:85: warning: format '%d' expects argument of type 'int', but argument 4 has type 'long int' [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/trainEngine/train.cpp:775:9: note: in expansion of macro 'LOGI'
         LOGI("Two files are not equal :  byte poistion at which two files differ is %d\n", ftell(fp1)+1);
         ^
12:31:04 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
12:33:00 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
12:33:55 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
12:34:39 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
12:35:51 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
12:38:57 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
12:39:28 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
12:40:30 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
12:40:45 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
12:41:32 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= train.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
In file included from jni/trainEngine/../TransferCL/src/TransferCL.h:6:0,
                 from jni/trainEngine/train.cpp:11:
jni/trainEngine/train.cpp: In member function 'void TrainModel::compare_two_binary_files(FILE*, FILE*)':
jni/trainEngine/../TransferCL/src/dependencies.h:11:85: warning: format '%d' expects argument of type 'int', but argument 4 has type 'long int' [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/trainEngine/train.cpp:775:9: note: in expansion of macro 'LOGI'
         LOGI("Two files are not equal :  byte poistion at which two files differ is %d\n", ftell(fp1)+1);
         ^
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
12:45:15 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= train.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
In file included from jni/trainEngine/../TransferCL/src/TransferCL.h:6:0,
                 from jni/trainEngine/train.cpp:11:
jni/trainEngine/train.cpp: In member function 'void TrainModel::compare_two_binary_files(FILE*, FILE*)':
jni/trainEngine/../TransferCL/src/dependencies.h:11:85: warning: format '%d' expects argument of type 'int', but argument 4 has type 'long int' [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/trainEngine/train.cpp:775:9: note: in expansion of macro 'LOGI'
         LOGI("Two files are not equal :  byte poistion at which two files differ is %d\n", ftell(fp1)+1);
         ^
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
12:54:17 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
12:55:35 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
13:03:10 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
13:04:17 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
13:05:23 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
13:07:31 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= train.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackpropWeightsNaive.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
In file included from jni/trainEngine/../TransferCL/src/TransferCL.h:6:0,
                 from jni/trainEngine/train.cpp:11:
jni/trainEngine/train.cpp: In member function 'void TrainModel::compare_two_binary_files(FILE*, FILE*)':
jni/trainEngine/../TransferCL/src/dependencies.h:11:85: warning: format '%d' expects argument of type 'int', but argument 4 has type 'long int' [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/trainEngine/train.cpp:775:9: note: in expansion of macro 'LOGI'
         LOGI("Two files are not equal :  byte poistion at which two files differ is %d\n", ftell(fp1)+1);
         ^
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
13:08:44 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCLNative <= transferCLinterface.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= predict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= train.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetdefToNet.cpp
In file included from jni/trainEngine/../TransferCL/src/TransferCL.h:6:0,
                 from jni/trainEngine/train.cpp:11:
jni/trainEngine/train.cpp: In member function 'void TrainModel::compare_two_binary_files(FILE*, FILE*)':
jni/trainEngine/../TransferCL/src/dependencies.h:11:85: warning: format '%d' expects argument of type 'int', but argument 4 has type 'long int' [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/trainEngine/train.cpp:775:9: note: in expansion of macro 'LOGI'
         LOGI("Two files are not equal :  byte poistion at which two files differ is %d\n", ftell(fp1)+1);
         ^
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ManifestLoaderv1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Loader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv1Wrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= JpegHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FileHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= stringhelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= RandomSingleton.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainable.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNetMould.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNet.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TransferCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemandv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchData.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp: In member function 'virtual void NetLearnerOnDemandv2::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:186:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: postEpochTesting: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:193:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= EpochMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcherv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchProcess.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearner.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayer.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp: In member function 'virtual void NetLearnerOnDemand::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:183:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:188:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CrossEntropyLoss.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayerPredict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SquareLossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= IAcceptsLabels.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Layer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainingContext.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGD.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsPersister.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OriginalInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= UniformInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CppRuntimeBoundary.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackpropWeightsNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerDimensions.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= deviceinfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DevicesInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DeviceInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= EasyCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TemplatedKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= platforminfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLWrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConfigManager.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= MnistLoader.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
13:10:54 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
13:11:59 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCLNative <= transferCLinterface.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= train.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= predict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetdefToNet.cpp
In file included from jni/trainEngine/../TransferCL/src/TransferCL.h:6:0,
                 from jni/trainEngine/train.cpp:11:
jni/trainEngine/train.cpp: In member function 'void TrainModel::compare_two_binary_files(FILE*, FILE*)':
jni/trainEngine/../TransferCL/src/dependencies.h:11:85: warning: format '%d' expects argument of type 'int', but argument 4 has type 'long int' [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/trainEngine/train.cpp:775:9: note: in expansion of macro 'LOGI'
         LOGI("Two files are not equal :  byte poistion at which two files differ is %d\n", ftell(fp1)+1);
         ^
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ManifestLoaderv1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Loader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv1Wrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= JpegHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FileHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= stringhelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= RandomSingleton.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainable.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNetMould.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNet.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TransferCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemandv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchData.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp: In member function 'virtual void NetLearnerOnDemandv2::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:186:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: postEpochTesting: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:193:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= EpochMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcherv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchProcess.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearner.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayer.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp: In member function 'virtual void NetLearnerOnDemand::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:183:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:188:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CrossEntropyLoss.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayerPredict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SquareLossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= IAcceptsLabels.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Layer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainingContext.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGD.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsPersister.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OriginalInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= UniformInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CppRuntimeBoundary.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackpropWeightsNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerDimensions.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= deviceinfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DevicesInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DeviceInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= EasyCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TemplatedKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= platforminfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLWrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConfigManager.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= MnistLoader.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
13:14:46 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCLNative <= transferCLinterface.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= train.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= predict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetdefToNet.cpp
In file included from jni/trainEngine/../TransferCL/src/TransferCL.h:6:0,
                 from jni/trainEngine/train.cpp:11:
jni/trainEngine/train.cpp: In member function 'void TrainModel::compare_two_binary_files(FILE*, FILE*)':
jni/trainEngine/../TransferCL/src/dependencies.h:11:85: warning: format '%d' expects argument of type 'int', but argument 4 has type 'long int' [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/trainEngine/train.cpp:775:9: note: in expansion of macro 'LOGI'
         LOGI("Two files are not equal :  byte poistion at which two files differ is %d\n", ftell(fp1)+1);
         ^
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ManifestLoaderv1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Loader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv1Wrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= JpegHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FileHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= stringhelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= RandomSingleton.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainable.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNetMould.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNet.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TransferCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemandv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchData.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp: In member function 'virtual void NetLearnerOnDemandv2::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:186:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: postEpochTesting: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:193:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= EpochMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcherv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchProcess.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearner.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayer.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp: In member function 'virtual void NetLearnerOnDemand::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:183:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayerMaker.cpp
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:188:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CrossEntropyLoss.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SquareLossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayerPredict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= IAcceptsLabels.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Layer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainingContext.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGD.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsPersister.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OriginalInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= UniformInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CppRuntimeBoundary.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackpropWeightsNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerDimensions.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= deviceinfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DevicesInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DeviceInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= EasyCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TemplatedKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= platforminfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLWrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConfigManager.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= MnistLoader.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
13:17:32 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCLNative <= transferCLinterface.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= predict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetdefToNet.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= train.cpp
In file included from jni/trainEngine/../TransferCL/src/TransferCL.h:6:0,
                 from jni/trainEngine/train.cpp:11:
jni/trainEngine/train.cpp: In member function 'void TrainModel::compare_two_binary_files(FILE*, FILE*)':
jni/trainEngine/../TransferCL/src/dependencies.h:11:85: warning: format '%d' expects argument of type 'int', but argument 4 has type 'long int' [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/trainEngine/train.cpp:775:9: note: in expansion of macro 'LOGI'
         LOGI("Two files are not equal :  byte poistion at which two files differ is %d\n", ftell(fp1)+1);
         ^
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ManifestLoaderv1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Loader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv1Wrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= JpegHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FileHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= stringhelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainable.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= RandomSingleton.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNetMould.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNet.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TransferCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemandv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchData.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp: In member function 'virtual void NetLearnerOnDemandv2::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:186:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: postEpochTesting: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:193:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= EpochMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcherv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchProcess.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearner.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayer.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp: In member function 'virtual void NetLearnerOnDemand::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:183:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:188:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CrossEntropyLoss.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayerPredict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SquareLossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= IAcceptsLabels.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Layer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainingContext.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGD.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsPersister.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OriginalInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= UniformInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CppRuntimeBoundary.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackpropWeightsNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerDimensions.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= deviceinfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DevicesInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DeviceInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TemplatedKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= EasyCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= platforminfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLWrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConfigManager.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= MnistLoader.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
13:19:22 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
13:20:38 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCLNative <= transferCLinterface.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= predict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= train.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetdefToNet.cpp
In file included from jni/trainEngine/../TransferCL/src/TransferCL.h:6:0,
                 from jni/trainEngine/train.cpp:11:
jni/trainEngine/train.cpp: In member function 'void TrainModel::compare_two_binary_files(FILE*, FILE*)':
jni/trainEngine/../TransferCL/src/dependencies.h:11:85: warning: format '%d' expects argument of type 'int', but argument 4 has type 'long int' [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/trainEngine/train.cpp:775:9: note: in expansion of macro 'LOGI'
         LOGI("Two files are not equal :  byte poistion at which two files differ is %d\n", ftell(fp1)+1);
         ^
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ManifestLoaderv1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Loader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv1Wrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= JpegHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FileHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= stringhelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainable.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= RandomSingleton.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNetMould.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNet.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TransferCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemandv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchData.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp: In member function 'virtual void NetLearnerOnDemandv2::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:186:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: postEpochTesting: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:193:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= EpochMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcherv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchProcess.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearner.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayer.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp: In member function 'virtual void NetLearnerOnDemand::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:183:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:188:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CrossEntropyLoss.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayerPredict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SquareLossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= IAcceptsLabels.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Layer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainingContext.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGD.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsPersister.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OriginalInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= UniformInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CppRuntimeBoundary.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackpropWeightsNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerDimensions.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= deviceinfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DevicesInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DeviceInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= EasyCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TemplatedKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= platforminfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLWrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConfigManager.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= MnistLoader.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
13:22:05 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayer.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
13:24:57 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= train.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
In file included from jni/trainEngine/../TransferCL/src/TransferCL.h:6:0,
                 from jni/trainEngine/train.cpp:11:
jni/trainEngine/train.cpp: In member function 'void TrainModel::compare_two_binary_files(FILE*, FILE*)':
jni/trainEngine/../TransferCL/src/dependencies.h:11:85: warning: format '%d' expects argument of type 'int', but argument 4 has type 'long int' [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/trainEngine/train.cpp:775:9: note: in expansion of macro 'LOGI'
         LOGI("Two files are not equal :  byte poistion at which two files differ is %d\n", ftell(fp1)+1);
         ^
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
13:25:44 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
13:26:38 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= BackpropWeightsNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
13:27:59 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
13:28:35 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
13:29:18 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayer.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
13:30:18 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
13:31:16 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= CLWrapper.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
13:31:41 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= CLWrapper.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
13:32:42 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= CLWrapper.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
13:33:48 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
13:34:24 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= CLWrapper.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
13:36:41 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCLNative <= transferCLinterface.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= train.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= predict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetdefToNet.cpp
In file included from jni/trainEngine/../TransferCL/src/TransferCL.h:6:0,
                 from jni/trainEngine/train.cpp:11:
jni/trainEngine/train.cpp: In member function 'void TrainModel::compare_two_binary_files(FILE*, FILE*)':
jni/trainEngine/../TransferCL/src/dependencies.h:11:85: warning: format '%d' expects argument of type 'int', but argument 4 has type 'long int' [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/trainEngine/train.cpp:775:9: note: in expansion of macro 'LOGI'
         LOGI("Two files are not equal :  byte poistion at which two files differ is %d\n", ftell(fp1)+1);
         ^
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ManifestLoaderv1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Loader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv1Wrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= JpegHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FileHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= stringhelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= RandomSingleton.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainable.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNetMould.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNet.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TransferCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemandv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchData.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp: In member function 'virtual void NetLearnerOnDemandv2::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:186:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: postEpochTesting: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:193:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= EpochMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcherv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchProcess.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearner.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayerMaker.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp: In member function 'virtual void NetLearnerOnDemand::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:183:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:188:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CrossEntropyLoss.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayerPredict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SquareLossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= IAcceptsLabels.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Layer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainingContext.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGD.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsPersister.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OriginalInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= UniformInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CppRuntimeBoundary.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackpropWeightsNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerDimensions.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= deviceinfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DevicesInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DeviceInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= EasyCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TemplatedKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= platforminfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLWrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConfigManager.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= MnistLoader.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
13:40:08 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
13:41:58 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCLNative <= transferCLinterface.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= train.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= predict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetdefToNet.cpp
In file included from jni/trainEngine/../TransferCL/src/TransferCL.h:6:0,
                 from jni/trainEngine/train.cpp:11:
jni/trainEngine/train.cpp: In member function 'void TrainModel::compare_two_binary_files(FILE*, FILE*)':
jni/trainEngine/../TransferCL/src/dependencies.h:11:85: warning: format '%d' expects argument of type 'int', but argument 4 has type 'long int' [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/trainEngine/train.cpp:775:9: note: in expansion of macro 'LOGI'
         LOGI("Two files are not equal :  byte poistion at which two files differ is %d\n", ftell(fp1)+1);
         ^
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ManifestLoaderv1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Loader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv1Wrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= JpegHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FileHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= stringhelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= RandomSingleton.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNetMould.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainable.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNet.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TransferCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemandv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchData.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp: In member function 'virtual void NetLearnerOnDemandv2::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:186:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: postEpochTesting: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:193:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= EpochMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcherv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchProcess.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearner.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayer.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp: In member function 'virtual void NetLearnerOnDemand::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:183:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:188:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CrossEntropyLoss.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayerPredict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SquareLossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= IAcceptsLabels.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Layer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainingContext.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGD.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsPersister.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OriginalInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= UniformInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CppRuntimeBoundary.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackpropWeightsNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerDimensions.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= deviceinfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DevicesInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DeviceInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= EasyCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TemplatedKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= platforminfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLWrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConfigManager.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= MnistLoader.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
13:43:44 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCLNative <= transferCLinterface.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= train.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= predict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetdefToNet.cpp
In file included from jni/trainEngine/../TransferCL/src/TransferCL.h:6:0,
                 from jni/trainEngine/train.cpp:11:
jni/trainEngine/train.cpp: In member function 'void TrainModel::compare_two_binary_files(FILE*, FILE*)':
jni/trainEngine/../TransferCL/src/dependencies.h:11:85: warning: format '%d' expects argument of type 'int', but argument 4 has type 'long int' [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/trainEngine/train.cpp:775:9: note: in expansion of macro 'LOGI'
         LOGI("Two files are not equal :  byte poistion at which two files differ is %d\n", ftell(fp1)+1);
         ^
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ManifestLoaderv1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Loader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv1Wrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= JpegHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FileHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= stringhelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= RandomSingleton.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainable.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNetMould.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNet.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TransferCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemandv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchData.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp: In member function 'virtual void NetLearnerOnDemandv2::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:186:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: postEpochTesting: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:193:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= EpochMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcherv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchProcess.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearner.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayer.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp: In member function 'virtual void NetLearnerOnDemand::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:183:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:188:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CrossEntropyLoss.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayerPredict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SquareLossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= IAcceptsLabels.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Layer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainingContext.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGD.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsPersister.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OriginalInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= UniformInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CppRuntimeBoundary.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackpropWeightsNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerDimensions.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= deviceinfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DevicesInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DeviceInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= EasyCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TemplatedKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= platforminfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLWrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConfigManager.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= MnistLoader.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
13:49:35 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
13:51:57 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
jni/TransferCL/src/conv/Forward1.cpp: In member function 'virtual void Forward1::forward8bit(int, CLWrapper*, CLWrapper*, CLWrapper*, CLWrapper*, CLWrapper*, CLWrapper*)':
jni/TransferCL/src/conv/Forward1.cpp:1491:41: error: 'LOFI' was not declared in this scope
   LOFI("%d %d", globalSize,workgroupsize);
                                         ^
make.exe: *** [obj/local/armeabi-v7a/objs/transferCL/TransferCL/src/conv/Forward1.o] Error 1
13:52:14 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
13:54:06 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
13:55:13 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
13:56:36 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
13:57:25 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
13:59:05 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
14:01:28 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
14:03:04 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
14:06:01 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
14:25:13 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCLNative <= transferCLinterface.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= train.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetdefToNet.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= predict.cpp
In file included from jni/trainEngine/../TransferCL/src/TransferCL.h:6:0,
                 from jni/trainEngine/train.cpp:11:
jni/trainEngine/train.cpp: In member function 'void TrainModel::compare_two_binary_files(FILE*, FILE*)':
jni/trainEngine/../TransferCL/src/dependencies.h:11:85: warning: format '%d' expects argument of type 'int', but argument 4 has type 'long int' [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/trainEngine/train.cpp:775:9: note: in expansion of macro 'LOGI'
         LOGI("Two files are not equal :  byte poistion at which two files differ is %d\n", ftell(fp1)+1);
         ^
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ManifestLoaderv1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Loader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv1Wrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= JpegHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FileHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= stringhelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= RandomSingleton.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainable.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNetMould.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNet.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TransferCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemandv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchData.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp: In member function 'virtual void NetLearnerOnDemandv2::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:186:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: postEpochTesting: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:193:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= EpochMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcherv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchProcess.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearner.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayer.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp: In member function 'virtual void NetLearnerOnDemand::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:183:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:188:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CrossEntropyLoss.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayerPredict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= IAcceptsLabels.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SquareLossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Layer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainingContext.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGD.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsPersister.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OriginalInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= UniformInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CppRuntimeBoundary.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackpropWeightsNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerDimensions.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= deviceinfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DevicesInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DeviceInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TemplatedKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= EasyCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= platforminfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLWrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConfigManager.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= MnistLoader.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
14:29:56 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
14:33:00 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
14:36:30 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
jni/TransferCL/src/conv/Forward1.cpp: In member function 'void Forward1::buildKernelConvolve(int)':
jni/TransferCL/src/conv/Forward1.cpp:2231:10: error: 'binariesManager' was not declared in this scope
  if (not binariesManager.alreadyCompiledKernel("convolve_imagecubes_float2Half","",identifier3,filepath2)){
          ^
make.exe: *** [obj/local/armeabi-v7a/objs/transferCL/TransferCL/src/conv/Forward1.o] Error 1
14:37:08 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
14:41:04 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
14:44:10 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
14:45:49 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
14:46:42 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
14:51:57 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
14:58:43 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= train.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackpropWeightsNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
In file included from jni/trainEngine/../TransferCL/src/TransferCL.h:6:0,
                 from jni/trainEngine/train.cpp:11:
jni/trainEngine/train.cpp: In member function 'void TrainModel::compare_two_binary_files(FILE*, FILE*)':
jni/trainEngine/../TransferCL/src/dependencies.h:11:85: warning: format '%d' expects argument of type 'int', but argument 4 has type 'long int' [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/trainEngine/train.cpp:775:9: note: in expansion of macro 'LOGI'
         LOGI("Two files are not equal :  byte poistion at which two files differ is %d\n", ftell(fp1)+1);
         ^
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
15:00:06 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
15:01:01 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
15:02:14 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
15:08:31 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
jni/TransferCL/src/conv/Forward1.cpp:62:1: error: expected declaration before '}' token
 }
 ^
make.exe: *** [obj/local/armeabi-v7a/objs/transferCL/TransferCL/src/conv/Forward1.o] Error 1
15:10:23 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
02:11:20 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
02:11:36 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCLNative <= transferCLinterface.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= train.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= predict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetdefToNet.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv2.cpp
In file included from jni/trainEngine/../TransferCL/src/TransferCL.h:6:0,
                 from jni/trainEngine/train.cpp:11:
jni/trainEngine/train.cpp: In member function 'void TrainModel::compare_two_binary_files(FILE*, FILE*)':
jni/trainEngine/../TransferCL/src/dependencies.h:11:85: warning: format '%d' expects argument of type 'int', but argument 4 has type 'long int' [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/trainEngine/train.cpp:775:9: note: in expansion of macro 'LOGI'
         LOGI("Two files are not equal :  byte poistion at which two files differ is %d\n", ftell(fp1)+1);
         ^
[armeabi-v7a] Compile++ arm  : transferCL <= ManifestLoaderv1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Loader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv1Wrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= JpegHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FileHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= stringhelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= RandomSingleton.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainable.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNetMould.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNet.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TransferCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemandv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchData.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp: In member function 'virtual void NetLearnerOnDemandv2::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:186:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: postEpochTesting: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:193:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= EpochMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcherv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchProcess.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearner.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayerMaker.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp: In member function 'virtual void NetLearnerOnDemand::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:183:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:188:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CrossEntropyLoss.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayerPredict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SquareLossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= IAcceptsLabels.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Layer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainingContext.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGD.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsPersister.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OriginalInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= UniformInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CppRuntimeBoundary.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackpropWeightsNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerDimensions.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= deviceinfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DevicesInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DeviceInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= EasyCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TemplatedKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= platforminfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLWrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConfigManager.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= MnistLoader.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
02:13:59 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
02:21:30 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
02:24:25 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= train.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
In file included from jni/trainEngine/../TransferCL/src/TransferCL.h:6:0,
                 from jni/trainEngine/train.cpp:11:
jni/trainEngine/train.cpp: In member function 'void TrainModel::compare_two_binary_files(FILE*, FILE*)':
jni/trainEngine/../TransferCL/src/dependencies.h:11:85: warning: format '%d' expects argument of type 'int', but argument 4 has type 'long int' [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/trainEngine/train.cpp:775:9: note: in expansion of macro 'LOGI'
         LOGI("Two files are not equal :  byte poistion at which two files differ is %d\n", ftell(fp1)+1);
         ^
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
02:26:03 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
16:33:04 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
16:39:59 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
16:42:49 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
16:44:15 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
16:45:36 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
16:48:14 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
16:50:02 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
16:51:28 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
16:54:07 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
16:57:00 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
16:58:24 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCLNative <= transferCLinterface.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= train.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= predict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetdefToNet.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ManifestLoaderv1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Loader.cpp
In file included from jni/trainEngine/../TransferCL/src/TransferCL.h:6:0,
                 from jni/trainEngine/train.cpp:11:
jni/trainEngine/train.cpp: In member function 'void TrainModel::compare_two_binary_files(FILE*, FILE*)':
jni/trainEngine/../TransferCL/src/dependencies.h:11:85: warning: format '%d' expects argument of type 'int', but argument 4 has type 'long int' [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/trainEngine/train.cpp:775:9: note: in expansion of macro 'LOGI'
         LOGI("Two files are not equal :  byte poistion at which two files differ is %d\n", ftell(fp1)+1);
         ^
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv1Wrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= JpegHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FileHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= stringhelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= RandomSingleton.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainable.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNetMould.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TransferCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNet.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemandv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchData.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= EpochMaker.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp: In member function 'virtual void NetLearnerOnDemandv2::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:186:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: postEpochTesting: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:193:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcherv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchProcess.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearner.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayer.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp: In member function 'virtual void NetLearnerOnDemand::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:183:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:188:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CrossEntropyLoss.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayerPredict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SquareLossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= IAcceptsLabels.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Layer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainingContext.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGD.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsPersister.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OriginalInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= UniformInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CppRuntimeBoundary.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackpropWeightsNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerDimensions.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= deviceinfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DevicesInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DeviceInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= EasyCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TemplatedKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= platforminfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLWrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConfigManager.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= MnistLoader.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
17:02:05 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
17:03:29 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
17:04:23 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
17:09:07 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
17:10:27 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
17:12:25 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
17:13:35 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
17:14:36 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= BackpropWeightsNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
17:20:18 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
17:21:06 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
17:22:16 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
17:23:36 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= BackpropWeightsNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
17:42:48 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
17:45:52 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= BackpropWeightsNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
17:48:22 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
17:55:56 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
17:58:52 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= train.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
In file included from jni/trainEngine/../TransferCL/src/TransferCL.h:6:0,
                 from jni/trainEngine/train.cpp:11:
jni/trainEngine/train.cpp: In member function 'void TrainModel::compare_two_binary_files(FILE*, FILE*)':
jni/trainEngine/../TransferCL/src/dependencies.h:11:85: warning: format '%d' expects argument of type 'int', but argument 4 has type 'long int' [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/trainEngine/train.cpp:775:9: note: in expansion of macro 'LOGI'
         LOGI("Two files are not equal :  byte poistion at which two files differ is %d\n", ftell(fp1)+1);
         ^
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
18:00:39 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
18:05:46 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackpropWeightsNaive.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
18:12:07 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
18:13:38 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= train.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
In file included from jni/trainEngine/../TransferCL/src/TransferCL.h:6:0,
                 from jni/trainEngine/train.cpp:11:
jni/trainEngine/train.cpp: In member function 'void TrainModel::compare_two_binary_files(FILE*, FILE*)':
jni/trainEngine/../TransferCL/src/dependencies.h:11:85: warning: format '%d' expects argument of type 'int', but argument 4 has type 'long int' [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/trainEngine/train.cpp:775:9: note: in expansion of macro 'LOGI'
         LOGI("Two files are not equal :  byte poistion at which two files differ is %d\n", ftell(fp1)+1);
         ^
Command canceled
18:14:02 **** Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
18:18:50 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
18:24:21 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCLNative <= transferCLinterface.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= train.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= predict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetdefToNet.cpp
In file included from jni/trainEngine/../TransferCL/src/TransferCL.h:6:0,
                 from jni/trainEngine/train.cpp:11:
jni/trainEngine/train.cpp: In member function 'void TrainModel::compare_two_binary_files(FILE*, FILE*)':
jni/trainEngine/../TransferCL/src/dependencies.h:11:85: warning: format '%d' expects argument of type 'int', but argument 4 has type 'long int' [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/trainEngine/train.cpp:775:9: note: in expansion of macro 'LOGI'
         LOGI("Two files are not equal :  byte poistion at which two files differ is %d\n", ftell(fp1)+1);
         ^
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ManifestLoaderv1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Loader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv1Wrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= JpegHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FileHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= stringhelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= RandomSingleton.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainable.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNetMould.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNet.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TransferCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemandv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchData.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= EpochMaker.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp: In member function 'virtual void NetLearnerOnDemandv2::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:186:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: postEpochTesting: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:193:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcherv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchProcess.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearner.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayerMaker.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp: In member function 'virtual void NetLearnerOnDemand::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:183:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:188:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= CrossEntropyLoss.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayerPredict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SquareLossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= IAcceptsLabels.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Layer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainingContext.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGD.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsPersister.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OriginalInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= UniformInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackpropWeightsNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CppRuntimeBoundary.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerDimensions.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= deviceinfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DevicesInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DeviceInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= EasyCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TemplatedKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= platforminfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLWrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConfigManager.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= MnistLoader.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
18:26:36 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCLNative <= transferCLinterface.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= train.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetdefToNet.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= predict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv2.cpp
In file included from jni/trainEngine/../TransferCL/src/TransferCL.h:6:0,
                 from jni/trainEngine/train.cpp:11:
jni/trainEngine/train.cpp: In member function 'void TrainModel::compare_two_binary_files(FILE*, FILE*)':
jni/trainEngine/../TransferCL/src/dependencies.h:11:85: warning: format '%d' expects argument of type 'int', but argument 4 has type 'long int' [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/trainEngine/train.cpp:775:9: note: in expansion of macro 'LOGI'
         LOGI("Two files are not equal :  byte poistion at which two files differ is %d\n", ftell(fp1)+1);
         ^
[armeabi-v7a] Compile++ arm  : transferCL <= ManifestLoaderv1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Loader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv1Wrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FileHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= JpegHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= stringhelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= RandomSingleton.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainable.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNetMould.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNet.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TransferCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemandv2.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp: In member function 'virtual void NetLearnerOnDemandv2::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:186:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: postEpochTesting: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:193:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchData.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= EpochMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcherv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearner.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchProcess.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayer.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp: In member function 'virtual void NetLearnerOnDemand::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:183:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:188:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CrossEntropyLoss.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayerPredict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SquareLossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= IAcceptsLabels.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Layer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainingContext.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGD.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsPersister.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OriginalInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= UniformInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CppRuntimeBoundary.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackpropWeightsNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerDimensions.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= deviceinfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DevicesInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= EasyCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DeviceInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TemplatedKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= platforminfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLWrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConfigManager.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= MnistLoader.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
12:31:02 **** Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
12:31:55 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
12:32:09 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
12:33:15 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
12:37:44 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
12:44:52 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= predict.cpp
[armeabi-v7a] Compile++ arm  : transferCLNative <= transferCLinterface.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= train.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetdefToNet.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ManifestLoaderv1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Loader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv1Wrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardGpuNaive.cpp
In file included from jni/trainEngine/../TransferCL/src/TransferCL.h:6:0,
                 from jni/trainEngine/train.cpp:11:
jni/trainEngine/train.cpp: In member function 'void TrainModel::compare_two_binary_files(FILE*, FILE*)':
jni/trainEngine/../TransferCL/src/dependencies.h:11:85: warning: format '%d' expects argument of type 'int', but argument 4 has type 'long int' [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/trainEngine/train.cpp:775:9: note: in expansion of macro 'LOGI'
         LOGI("Two files are not equal :  byte poistion at which two files differ is %d\n", ftell(fp1)+1);
         ^
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= JpegHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FileHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= stringhelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= RandomSingleton.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainable.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNetMould.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNet.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TransferCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemandv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchData.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp: In member function 'virtual void NetLearnerOnDemandv2::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:186:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: postEpochTesting: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:193:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= EpochMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcherv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchProcess.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearner.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayer.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp: In member function 'virtual void NetLearnerOnDemand::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:183:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:188:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CrossEntropyLoss.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayerPredict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SquareLossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= IAcceptsLabels.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Layer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainingContext.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGD.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsPersister.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OriginalInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= UniformInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CppRuntimeBoundary.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackpropWeightsNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerDimensions.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= deviceinfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DevicesInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DeviceInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TemplatedKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= EasyCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= platforminfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLWrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConfigManager.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= MnistLoader.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
12:47:31 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= train.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
In file included from jni/trainEngine/../TransferCL/src/TransferCL.h:6:0,
                 from jni/trainEngine/train.cpp:11:
jni/trainEngine/train.cpp: In member function 'void TrainModel::compare_two_binary_files(FILE*, FILE*)':
jni/trainEngine/../TransferCL/src/dependencies.h:11:85: warning: format '%d' expects argument of type 'int', but argument 4 has type 'long int' [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/trainEngine/train.cpp:775:9: note: in expansion of macro 'LOGI'
         LOGI("Two files are not equal :  byte poistion at which two files differ is %d\n", ftell(fp1)+1);
         ^
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
12:54:54 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= train.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackpropWeightsNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
In file included from jni/trainEngine/../TransferCL/src/TransferCL.h:6:0,
                 from jni/trainEngine/train.cpp:11:
jni/trainEngine/train.cpp: In member function 'void TrainModel::compare_two_binary_files(FILE*, FILE*)':
jni/trainEngine/../TransferCL/src/dependencies.h:11:85: warning: format '%d' expects argument of type 'int', but argument 4 has type 'long int' [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/trainEngine/train.cpp:775:9: note: in expansion of macro 'LOGI'
         LOGI("Two files are not equal :  byte poistion at which two files differ is %d\n", ftell(fp1)+1);
         ^
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
12:56:16 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= train.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackpropWeightsNaive.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
In file included from jni/trainEngine/../TransferCL/src/TransferCL.h:6:0,
                 from jni/trainEngine/train.cpp:11:
jni/trainEngine/train.cpp: In member function 'void TrainModel::compare_two_binary_files(FILE*, FILE*)':
jni/trainEngine/../TransferCL/src/dependencies.h:11:85: warning: format '%d' expects argument of type 'int', but argument 4 has type 'long int' [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/trainEngine/train.cpp:775:9: note: in expansion of macro 'LOGI'
         LOGI("Two files are not equal :  byte poistion at which two files differ is %d\n", ftell(fp1)+1);
         ^
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
13:49:18 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCLNative <= transferCLinterface.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= train.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= predict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetdefToNet.cpp
In file included from jni/trainEngine/../TransferCL/src/TransferCL.h:6:0,
                 from jni/trainEngine/train.cpp:11:
jni/trainEngine/train.cpp: In member function 'void TrainModel::compare_two_binary_files(FILE*, FILE*)':
jni/trainEngine/../TransferCL/src/dependencies.h:11:85: warning: format '%d' expects argument of type 'int', but argument 4 has type 'long int' [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/trainEngine/train.cpp:775:9: note: in expansion of macro 'LOGI'
         LOGI("Two files are not equal :  byte poistion at which two files differ is %d\n", ftell(fp1)+1);
         ^
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ManifestLoaderv1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Loader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv1Wrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= JpegHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FileHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= stringhelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= RandomSingleton.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainable.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNetMould.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNet.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TransferCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemandv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchData.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= EpochMaker.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp: In member function 'virtual void NetLearnerOnDemandv2::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:186:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: postEpochTesting: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:193:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcherv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchProcess.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearner.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayer.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp: In member function 'virtual void NetLearnerOnDemand::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:183:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:188:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CrossEntropyLoss.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayerPredict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SquareLossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= IAcceptsLabels.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Layer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainingContext.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGD.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsPersister.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OriginalInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= UniformInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CppRuntimeBoundary.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackpropWeightsNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerDimensions.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= deviceinfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DevicesInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DeviceInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= EasyCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TemplatedKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= platforminfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLWrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConfigManager.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= MnistLoader.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
13:54:00 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCLNative <= transferCLinterface.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= train.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= predict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetdefToNet.cpp
In file included from jni/trainEngine/../TransferCL/src/TransferCL.h:6:0,
                 from jni/trainEngine/train.cpp:11:
jni/trainEngine/train.cpp: In member function 'void TrainModel::compare_two_binary_files(FILE*, FILE*)':
jni/trainEngine/../TransferCL/src/dependencies.h:11:85: warning: format '%d' expects argument of type 'int', but argument 4 has type 'long int' [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/trainEngine/train.cpp:775:9: note: in expansion of macro 'LOGI'
         LOGI("Two files are not equal :  byte poistion at which two files differ is %d\n", ftell(fp1)+1);
         ^
[armeabi-v7a] Compile++ arm  : transferCL <= ManifestLoaderv1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Loader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv1Wrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= JpegHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FileHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= stringhelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= RandomSingleton.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainable.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNetMould.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNet.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TransferCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemandv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchData.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= EpochMaker.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp: In member function 'virtual void NetLearnerOnDemandv2::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:186:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: postEpochTesting: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:193:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcherv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchProcess.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearner.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayer.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp: In member function 'virtual void NetLearnerOnDemand::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:183:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:188:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CrossEntropyLoss.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayerPredict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SquareLossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= IAcceptsLabels.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Layer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainingContext.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGD.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsPersister.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OriginalInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= UniformInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CppRuntimeBoundary.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackpropWeightsNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerDimensions.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= deviceinfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DevicesInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DeviceInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= EasyCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TemplatedKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= platforminfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLWrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConfigManager.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= MnistLoader.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
13:59:21 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCLNative <= transferCLinterface.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= train.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= predict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetdefToNet.cpp
In file included from jni/trainEngine/../TransferCL/src/TransferCL.h:6:0,
                 from jni/trainEngine/train.cpp:11:
jni/trainEngine/train.cpp: In member function 'void TrainModel::compare_two_binary_files(FILE*, FILE*)':
jni/trainEngine/../TransferCL/src/dependencies.h:11:85: warning: format '%d' expects argument of type 'int', but argument 4 has type 'long int' [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/trainEngine/train.cpp:775:9: note: in expansion of macro 'LOGI'
         LOGI("Two files are not equal :  byte poistion at which two files differ is %d\n", ftell(fp1)+1);
         ^
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ManifestLoaderv1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Loader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv1Wrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= JpegHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FileHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= stringhelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= RandomSingleton.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainable.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNetMould.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNet.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TransferCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemandv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchData.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= EpochMaker.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp: In member function 'virtual void NetLearnerOnDemandv2::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:186:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: postEpochTesting: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:193:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcherv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchProcess.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearner.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayer.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp: In member function 'virtual void NetLearnerOnDemand::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:183:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:188:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CrossEntropyLoss.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayerPredict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SquareLossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= IAcceptsLabels.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Layer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainingContext.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGD.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsPersister.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OriginalInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= UniformInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CppRuntimeBoundary.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackpropWeightsNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerDimensions.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= deviceinfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DevicesInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DeviceInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= EasyCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TemplatedKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= platforminfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLWrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConfigManager.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= MnistLoader.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
14:02:36 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
14:05:58 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= train.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
In file included from jni/trainEngine/../TransferCL/src/TransferCL.h:6:0,
                 from jni/trainEngine/train.cpp:11:
jni/trainEngine/train.cpp: In member function 'void TrainModel::compare_two_binary_files(FILE*, FILE*)':
jni/trainEngine/../TransferCL/src/dependencies.h:11:85: warning: format '%d' expects argument of type 'int', but argument 4 has type 'long int' [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/trainEngine/train.cpp:775:9: note: in expansion of macro 'LOGI'
         LOGI("Two files are not equal :  byte poistion at which two files differ is %d\n", ftell(fp1)+1);
         ^
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
14:07:40 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCLNative <= transferCLinterface.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= train.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= predict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetdefToNet.cpp
In file included from jni/trainEngine/../TransferCL/src/TransferCL.h:6:0,
                 from jni/trainEngine/train.cpp:11:
jni/trainEngine/train.cpp: In member function 'void TrainModel::compare_two_binary_files(FILE*, FILE*)':
jni/trainEngine/../TransferCL/src/dependencies.h:11:85: warning: format '%d' expects argument of type 'int', but argument 4 has type 'long int' [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/trainEngine/train.cpp:775:9: note: in expansion of macro 'LOGI'
         LOGI("Two files are not equal :  byte poistion at which two files differ is %d\n", ftell(fp1)+1);
         ^
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ManifestLoaderv1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Loader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv1Wrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= JpegHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FileHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= stringhelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= RandomSingleton.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainable.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNetMould.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNet.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TransferCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemandv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchData.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= EpochMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp: In member function 'virtual void NetLearnerOnDemandv2::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:186:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: postEpochTesting: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:193:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcherv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchProcess.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearner.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayer.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp: In member function 'virtual void NetLearnerOnDemand::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:183:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:188:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CrossEntropyLoss.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SquareLossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayerPredict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= IAcceptsLabels.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Layer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainingContext.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGD.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsPersister.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OriginalInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= UniformInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CppRuntimeBoundary.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackpropWeightsNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerDimensions.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= deviceinfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DevicesInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DeviceInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= EasyCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TemplatedKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= platforminfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLWrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConfigManager.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= MnistLoader.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
14:12:34 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
19:10:58 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Command canceled
19:26:43 **** Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= train.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
In file included from jni/trainEngine/../TransferCL/src/TransferCL.h:6:0,
                 from jni/trainEngine/train.cpp:11:
jni/trainEngine/train.cpp: In member function 'void TrainModel::compare_two_binary_files(FILE*, FILE*)':
jni/trainEngine/../TransferCL/src/dependencies.h:11:85: warning: format '%d' expects argument of type 'int', but argument 4 has type 'long int' [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/trainEngine/train.cpp:776:9: note: in expansion of macro 'LOGI'
         LOGI("Two files are not equal :  byte poistion at which two files differ is %d\n", ftell(fp1)+1);
         ^
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
19:36:10 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
19:37:14 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
19:38:15 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
19:38:35 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
19:39:43 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
19:46:57 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCLNative <= transferCLinterface.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= train.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= predict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetdefToNet.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv2.cpp
In file included from jni/trainEngine/../TransferCL/src/TransferCL.h:6:0,
                 from jni/trainEngine/train.cpp:11:
jni/trainEngine/train.cpp: In member function 'void TrainModel::compare_two_binary_files(FILE*, FILE*)':
jni/trainEngine/../TransferCL/src/dependencies.h:11:85: warning: format '%d' expects argument of type 'int', but argument 4 has type 'long int' [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/trainEngine/train.cpp:776:9: note: in expansion of macro 'LOGI'
         LOGI("Two files are not equal :  byte poistion at which two files differ is %d\n", ftell(fp1)+1);
         ^
[armeabi-v7a] Compile++ arm  : transferCL <= ManifestLoaderv1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Loader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv1Wrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= JpegHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FileHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= stringhelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= RandomSingleton.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainable.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNet.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNetMould.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TransferCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemandv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchData.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= EpochMaker.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp: In member function 'virtual void NetLearnerOnDemandv2::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:186:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: postEpochTesting: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:193:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcherv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchProcess.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearner.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayerMaker.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp: In member function 'virtual void NetLearnerOnDemand::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:183:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:188:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CrossEntropyLoss.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayerPredict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SquareLossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= IAcceptsLabels.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Layer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainingContext.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGD.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsPersister.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OriginalInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= UniformInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CppRuntimeBoundary.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackpropWeightsNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerDimensions.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= deviceinfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DevicesInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DeviceInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= EasyCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TemplatedKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= platforminfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLWrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConfigManager.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= MnistLoader.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
19:50:31 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCLNative <= transferCLinterface.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= train.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= predict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetdefToNet.cpp
In file included from jni/trainEngine/../TransferCL/src/TransferCL.h:6:0,
                 from jni/trainEngine/train.cpp:11:
jni/trainEngine/train.cpp: In member function 'void TrainModel::compare_two_binary_files(FILE*, FILE*)':
jni/trainEngine/../TransferCL/src/dependencies.h:11:85: warning: format '%d' expects argument of type 'int', but argument 4 has type 'long int' [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/trainEngine/train.cpp:776:9: note: in expansion of macro 'LOGI'
         LOGI("Two files are not equal :  byte poistion at which two files differ is %d\n", ftell(fp1)+1);
         ^
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ManifestLoaderv1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Loader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv1Wrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= JpegHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FileHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= stringhelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= RandomSingleton.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainable.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNetMould.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNet.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TransferCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemandv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchData.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= EpochMaker.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp: In member function 'virtual void NetLearnerOnDemandv2::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:186:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: postEpochTesting: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:193:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcherv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchProcess.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearner.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayerMaker.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp: In member function 'virtual void NetLearnerOnDemand::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:183:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:188:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CrossEntropyLoss.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayerPredict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SquareLossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= IAcceptsLabels.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Layer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainingContext.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGD.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsPersister.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OriginalInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= UniformInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CppRuntimeBoundary.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackpropWeightsNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerDimensions.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= deviceinfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DevicesInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= EasyCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DeviceInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TemplatedKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= platforminfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLWrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConfigManager.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= MnistLoader.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
19:57:23 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayer.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
19:58:21 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayer.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
20:08:10 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingLayer.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
jni/TransferCL/src/pooling/PoolingLayer.cpp:191:14: error: missing binary operator before token "0"
 #if TRANSFER 0
              ^
make.exe: *** [obj/local/armeabi-v7a/objs/transferCL/TransferCL/src/pooling/PoolingLayer.o] Error 1
20:08:24 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingLayer.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
20:09:20 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
20:23:06 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= SGDState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
20:31:03 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
20:32:50 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
20:36:11 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
20:42:25 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= SGD.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
20:44:23 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= SGD.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
20:45:34 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= SGD.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
20:48:35 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCLNative <= transferCLinterface.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= train.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= predict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetdefToNet.cpp
In file included from jni/trainEngine/../TransferCL/src/TransferCL.h:6:0,
                 from jni/trainEngine/train.cpp:11:
jni/trainEngine/train.cpp: In member function 'void TrainModel::compare_two_binary_files(FILE*, FILE*)':
jni/trainEngine/../TransferCL/src/dependencies.h:11:85: warning: format '%d' expects argument of type 'int', but argument 4 has type 'long int' [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/trainEngine/train.cpp:776:9: note: in expansion of macro 'LOGI'
         LOGI("Two files are not equal :  byte poistion at which two files differ is %d\n", ftell(fp1)+1);
         ^
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ManifestLoaderv1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Loader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv1Wrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= JpegHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FileHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= stringhelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= RandomSingleton.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainable.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNetMould.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNet.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TransferCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemandv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchData.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= EpochMaker.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp: In member function 'virtual void NetLearnerOnDemandv2::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:186:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: postEpochTesting: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:193:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcherv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchProcess.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearner.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayer.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp: In member function 'virtual void NetLearnerOnDemand::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:183:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:188:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CrossEntropyLoss.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayerPredict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SquareLossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= IAcceptsLabels.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Layer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainingContext.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGD.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsPersister.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OriginalInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= UniformInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CppRuntimeBoundary.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackpropWeightsNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerDimensions.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= deviceinfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DevicesInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DeviceInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TemplatedKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= EasyCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLWrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= platforminfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConfigManager.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= MnistLoader.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
20:50:31 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
20:55:12 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= train.cpp
[armeabi-v7a] Compile++ arm  : transferCLNative <= transferCLinterface.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetdefToNet.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= predict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv2.cpp
In file included from jni/trainEngine/../TransferCL/src/TransferCL.h:6:0,
                 from jni/trainEngine/train.cpp:11:
jni/trainEngine/train.cpp: In member function 'void TrainModel::compare_two_binary_files(FILE*, FILE*)':
jni/trainEngine/../TransferCL/src/dependencies.h:11:85: warning: format '%d' expects argument of type 'int', but argument 4 has type 'long int' [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/trainEngine/train.cpp:776:9: note: in expansion of macro 'LOGI'
         LOGI("Two files are not equal :  byte poistion at which two files differ is %d\n", ftell(fp1)+1);
         ^
[armeabi-v7a] Compile++ arm  : transferCL <= ManifestLoaderv1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv1Wrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Loader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= JpegHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FileHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= stringhelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= RandomSingleton.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainable.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNetMould.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNet.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TransferCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemandv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchData.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= EpochMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp: In member function 'virtual void NetLearnerOnDemandv2::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:186:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: postEpochTesting: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:193:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcherv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchProcess.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearner.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayer.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp: In member function 'virtual void NetLearnerOnDemand::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:183:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:188:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CrossEntropyLoss.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayerPredict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SquareLossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= IAcceptsLabels.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Layer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainingContext.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGD.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsPersister.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OriginalInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= UniformInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CppRuntimeBoundary.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackpropWeightsNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerDimensions.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= deviceinfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DevicesInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DeviceInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= EasyCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TemplatedKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= platforminfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLWrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConfigManager.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= MnistLoader.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
20:58:40 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCLNative <= transferCLinterface.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= predict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetdefToNet.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= train.cpp
In file included from jni/trainEngine/../TransferCL/src/TransferCL.h:6:0,
                 from jni/trainEngine/train.cpp:11:
jni/trainEngine/train.cpp: In member function 'void TrainModel::compare_two_binary_files(FILE*, FILE*)':
jni/trainEngine/../TransferCL/src/dependencies.h:11:85: warning: format '%d' expects argument of type 'int', but argument 4 has type 'long int' [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/trainEngine/train.cpp:776:9: note: in expansion of macro 'LOGI'
         LOGI("Two files are not equal :  byte poistion at which two files differ is %d\n", ftell(fp1)+1);
         ^
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ManifestLoaderv1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Loader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv1Wrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= JpegHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FileHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= stringhelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= RandomSingleton.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainable.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNetMould.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNet.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TransferCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemandv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchData.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp: In member function 'virtual void NetLearnerOnDemandv2::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:186:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: postEpochTesting: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:193:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= EpochMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcherv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchProcess.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearner.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayer.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp: In member function 'virtual void NetLearnerOnDemand::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:183:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:188:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CrossEntropyLoss.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayerPredict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SquareLossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= IAcceptsLabels.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Layer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainingContext.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGD.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsPersister.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OriginalInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= UniformInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CppRuntimeBoundary.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackpropWeightsNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerDimensions.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= deviceinfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DevicesInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DeviceInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= EasyCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TemplatedKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= platforminfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLWrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConfigManager.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= MnistLoader.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
21:02:09 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCLNative <= transferCLinterface.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= train.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetdefToNet.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= predict.cpp
In file included from jni/trainEngine/../TransferCL/src/TransferCL.h:6:0,
                 from jni/trainEngine/train.cpp:11:
jni/trainEngine/train.cpp: In member function 'void TrainModel::compare_two_binary_files(FILE*, FILE*)':
jni/trainEngine/../TransferCL/src/dependencies.h:11:85: warning: format '%d' expects argument of type 'int', but argument 4 has type 'long int' [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/trainEngine/train.cpp:776:9: note: in expansion of macro 'LOGI'
         LOGI("Two files are not equal :  byte poistion at which two files differ is %d\n", ftell(fp1)+1);
         ^
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ManifestLoaderv1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Loader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv1Wrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= JpegHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FileHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= stringhelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= RandomSingleton.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainable.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNetMould.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNet.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TransferCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemandv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchData.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp: In member function 'virtual void NetLearnerOnDemandv2::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:186:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: postEpochTesting: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:193:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= EpochMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcherv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchProcess.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearner.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayerMaker.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp: In member function 'virtual void NetLearnerOnDemand::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:183:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:188:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CrossEntropyLoss.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayerPredict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SquareLossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= IAcceptsLabels.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Layer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainingContext.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGD.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsPersister.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OriginalInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= UniformInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CppRuntimeBoundary.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackpropWeightsNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerDimensions.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= deviceinfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DevicesInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DeviceInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= EasyCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TemplatedKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLWrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= platforminfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConfigManager.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= MnistLoader.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
21:04:44 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCLNative <= transferCLinterface.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= predict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= train.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetdefToNet.cpp
In file included from jni/trainEngine/../TransferCL/src/TransferCL.h:6:0,
                 from jni/trainEngine/train.cpp:11:
jni/trainEngine/train.cpp: In member function 'void TrainModel::compare_two_binary_files(FILE*, FILE*)':
jni/trainEngine/../TransferCL/src/dependencies.h:11:85: warning: format '%d' expects argument of type 'int', but argument 4 has type 'long int' [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/trainEngine/train.cpp:776:9: note: in expansion of macro 'LOGI'
         LOGI("Two files are not equal :  byte poistion at which two files differ is %d\n", ftell(fp1)+1);
         ^
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ManifestLoaderv1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv1Wrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Loader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= JpegHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FileHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= stringhelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= RandomSingleton.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainable.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNetMould.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNet.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TransferCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemandv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchData.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= EpochMaker.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp: In member function 'virtual void NetLearnerOnDemandv2::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:186:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: postEpochTesting: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:193:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcherv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearner.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchProcess.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayer.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp: In member function 'virtual void NetLearnerOnDemand::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:183:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:188:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CrossEntropyLoss.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayerPredict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SquareLossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= IAcceptsLabels.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Layer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainingContext.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGD.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsPersister.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OriginalInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= UniformInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CppRuntimeBoundary.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackpropWeightsNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerDimensions.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= deviceinfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DevicesInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DeviceInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= EasyCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TemplatedKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= platforminfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLWrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= MnistLoader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConfigManager.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
21:06:31 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCLNative <= transferCLinterface.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= train.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= predict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetdefToNet.cpp
In file included from jni/trainEngine/../TransferCL/src/TransferCL.h:6:0,
                 from jni/trainEngine/train.cpp:11:
jni/trainEngine/train.cpp: In member function 'void TrainModel::compare_two_binary_files(FILE*, FILE*)':
jni/trainEngine/../TransferCL/src/dependencies.h:11:85: warning: format '%d' expects argument of type 'int', but argument 4 has type 'long int' [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/trainEngine/train.cpp:776:9: note: in expansion of macro 'LOGI'
         LOGI("Two files are not equal :  byte poistion at which two files differ is %d\n", ftell(fp1)+1);
         ^
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ManifestLoaderv1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Loader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv1Wrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= JpegHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FileHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= stringhelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= RandomSingleton.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainable.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNetMould.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNet.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TransferCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemandv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchData.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcher.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp: In member function 'virtual void NetLearnerOnDemandv2::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:186:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: postEpochTesting: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:193:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= EpochMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcherv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchProcess.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearner.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayerMaker.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp: In member function 'virtual void NetLearnerOnDemand::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:183:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:188:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CrossEntropyLoss.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayerPredict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SquareLossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= IAcceptsLabels.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Layer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainingContext.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGD.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsPersister.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CppRuntimeBoundary.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= UniformInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OriginalInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackpropWeightsNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerDimensions.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= deviceinfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DevicesInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DeviceInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= EasyCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TemplatedKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= platforminfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLWrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConfigManager.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= MnistLoader.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
21:08:52 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= train.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
In file included from jni/trainEngine/../TransferCL/src/TransferCL.h:6:0,
                 from jni/trainEngine/train.cpp:11:
jni/trainEngine/train.cpp: In member function 'void TrainModel::compare_two_binary_files(FILE*, FILE*)':
jni/trainEngine/../TransferCL/src/dependencies.h:11:85: warning: format '%d' expects argument of type 'int', but argument 4 has type 'long int' [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/trainEngine/train.cpp:776:9: note: in expansion of macro 'LOGI'
         LOGI("Two files are not equal :  byte poistion at which two files differ is %d\n", ftell(fp1)+1);
         ^
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
21:14:42 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= train.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
In file included from jni/trainEngine/../TransferCL/src/TransferCL.h:6:0,
                 from jni/trainEngine/train.cpp:11:
jni/trainEngine/train.cpp: In member function 'void TrainModel::compare_two_binary_files(FILE*, FILE*)':
jni/trainEngine/../TransferCL/src/dependencies.h:11:85: warning: format '%d' expects argument of type 'int', but argument 4 has type 'long int' [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/trainEngine/train.cpp:776:9: note: in expansion of macro 'LOGI'
         LOGI("Two files are not equal :  byte poistion at which two files differ is %d\n", ftell(fp1)+1);
         ^
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
21:17:01 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
21:26:05 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= train.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackpropWeightsNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
In file included from jni/trainEngine/../TransferCL/src/TransferCL.h:6:0,
                 from jni/trainEngine/train.cpp:11:
jni/trainEngine/train.cpp: In member function 'void TrainModel::compare_two_binary_files(FILE*, FILE*)':
jni/trainEngine/../TransferCL/src/dependencies.h:11:85: warning: format '%d' expects argument of type 'int', but argument 4 has type 'long int' [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/trainEngine/train.cpp:776:9: note: in expansion of macro 'LOGI'
         LOGI("Two files are not equal :  byte poistion at which two files differ is %d\n", ftell(fp1)+1);
         ^
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
21:28:46 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCLNative <= transferCLinterface.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= train.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= predict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetdefToNet.cpp
In file included from jni/trainEngine/../TransferCL/src/TransferCL.h:6:0,
                 from jni/trainEngine/train.cpp:11:
jni/trainEngine/train.cpp: In member function 'void TrainModel::compare_two_binary_files(FILE*, FILE*)':
jni/trainEngine/../TransferCL/src/dependencies.h:11:85: warning: format '%d' expects argument of type 'int', but argument 4 has type 'long int' [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/trainEngine/train.cpp:776:9: note: in expansion of macro 'LOGI'
         LOGI("Two files are not equal :  byte poistion at which two files differ is %d\n", ftell(fp1)+1);
         ^
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ManifestLoaderv1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Loader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv1Wrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= JpegHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= stringhelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FileHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= RandomSingleton.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainable.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNetMould.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNet.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TransferCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemandv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchData.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp: In member function 'virtual void NetLearnerOnDemandv2::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:186:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: postEpochTesting: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:193:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= EpochMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcherv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchProcess.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearner.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayer.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp: In member function 'virtual void NetLearnerOnDemand::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:183:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:188:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CrossEntropyLoss.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayerPredict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SquareLossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= IAcceptsLabels.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Layer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainingContext.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGD.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsPersister.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OriginalInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= UniformInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CppRuntimeBoundary.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackpropWeightsNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerDimensions.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= deviceinfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DevicesInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DeviceInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= EasyCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TemplatedKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= platforminfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLWrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConfigManager.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= MnistLoader.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
21:34:03 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCLNative <= transferCLinterface.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= train.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetdefToNet.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= predict.cpp
In file included from jni/trainEngine/../TransferCL/src/TransferCL.h:6:0,
                 from jni/trainEngine/train.cpp:11:
jni/trainEngine/train.cpp: In member function 'void TrainModel::compare_two_binary_files(FILE*, FILE*)':
jni/trainEngine/../TransferCL/src/dependencies.h:11:85: warning: format '%d' expects argument of type 'int', but argument 4 has type 'long int' [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/trainEngine/train.cpp:776:9: note: in expansion of macro 'LOGI'
         LOGI("Two files are not equal :  byte poistion at which two files differ is %d\n", ftell(fp1)+1);
         ^
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ManifestLoaderv1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Loader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv1Wrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= JpegHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FileHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= stringhelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= RandomSingleton.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainable.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNetMould.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TransferCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNet.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemandv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchData.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= EpochMaker.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp: In member function 'virtual void NetLearnerOnDemandv2::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:186:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: postEpochTesting: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:193:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcherv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchProcess.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearner.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayerMaker.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp: In member function 'virtual void NetLearnerOnDemand::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:183:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:188:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CrossEntropyLoss.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayerPredict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= IAcceptsLabels.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SquareLossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Layer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainingContext.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGD.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsPersister.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= UniformInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OriginalInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CppRuntimeBoundary.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackpropWeightsNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerDimensions.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= deviceinfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DevicesInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DeviceInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= EasyCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TemplatedKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= platforminfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLWrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConfigManager.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= MnistLoader.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
21:39:39 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= BackpropWeightsNaive.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
21:42:08 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= NetdefToNet.cpp
[armeabi-v7a] Compile++ arm  : transferCLNative <= transferCLinterface.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= predict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= train.cpp
In file included from jni/trainEngine/../TransferCL/src/TransferCL.h:6:0,
                 from jni/trainEngine/train.cpp:11:
jni/trainEngine/train.cpp: In member function 'void TrainModel::compare_two_binary_files(FILE*, FILE*)':
jni/trainEngine/../TransferCL/src/dependencies.h:11:85: warning: format '%d' expects argument of type 'int', but argument 4 has type 'long int' [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/trainEngine/train.cpp:776:9: note: in expansion of macro 'LOGI'
         LOGI("Two files are not equal :  byte poistion at which two files differ is %d\n", ftell(fp1)+1);
         ^
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ManifestLoaderv1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Loader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv1Wrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= JpegHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FileHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= stringhelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainable.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= RandomSingleton.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNet.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TransferCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNetMould.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemandv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchData.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= EpochMaker.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp: In member function 'virtual void NetLearnerOnDemandv2::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:186:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: postEpochTesting: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:193:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcherv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchProcess.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearner.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayer.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp: In member function 'virtual void NetLearnerOnDemand::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:183:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:188:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CrossEntropyLoss.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayerPredict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SquareLossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= IAcceptsLabels.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Layer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainingContext.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGD.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsPersister.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OriginalInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= UniformInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CppRuntimeBoundary.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackpropWeightsNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerDimensions.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= deviceinfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DevicesInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= EasyCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DeviceInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TemplatedKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLWrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= platforminfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConfigManager.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= MnistLoader.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
21:44:41 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
21:46:26 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= BackpropWeightsNaive.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
21:52:33 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
12:31:40 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= BackpropWeightsNaive.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
12:32:14 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= BackpropWeightsNaive.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
12:33:41 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
12:37:20 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= BackpropWeightsNaive.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
12:38:32 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= BackpropWeightsNaive.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
12:40:11 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= BackpropWeightsNaive.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
12:43:52 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= BackpropWeightsNaive.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
12:47:46 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= BackpropWeightsNaive.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
12:54:07 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
12:55:11 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
12:56:15 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
12:59:16 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= train.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackpropWeightsNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
In file included from jni/trainEngine/../TransferCL/src/TransferCL.h:6:0,
                 from jni/trainEngine/train.cpp:11:
jni/trainEngine/train.cpp: In member function 'void TrainModel::compare_two_binary_files(FILE*, FILE*)':
jni/trainEngine/../TransferCL/src/dependencies.h:11:85: warning: format '%d' expects argument of type 'int', but argument 4 has type 'long int' [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/trainEngine/train.cpp:776:9: note: in expansion of macro 'LOGI'
         LOGI("Two files are not equal :  byte poistion at which two files differ is %d\n", ftell(fp1)+1);
         ^
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
13:11:02 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayer.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
13:12:54 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCLNative <= transferCLinterface.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= train.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= predict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetdefToNet.cpp
In file included from jni/trainEngine/../TransferCL/src/TransferCL.h:6:0,
                 from jni/trainEngine/train.cpp:11:
jni/trainEngine/train.cpp: In member function 'void TrainModel::compare_two_binary_files(FILE*, FILE*)':
jni/trainEngine/../TransferCL/src/dependencies.h:11:85: warning: format '%d' expects argument of type 'int', but argument 4 has type 'long int' [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/trainEngine/train.cpp:776:9: note: in expansion of macro 'LOGI'
         LOGI("Two files are not equal :  byte poistion at which two files differ is %d\n", ftell(fp1)+1);
         ^
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ManifestLoaderv1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Loader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv1Wrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= JpegHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FileHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= stringhelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= RandomSingleton.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainable.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNetMould.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TransferCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNet.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemandv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchData.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= EpochMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp: In member function 'virtual void NetLearnerOnDemandv2::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:186:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: postEpochTesting: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:193:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcherv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchProcess.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearner.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayerMaker.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp: In member function 'virtual void NetLearnerOnDemand::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:183:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:188:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= LossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CrossEntropyLoss.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayerPredict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SquareLossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= IAcceptsLabels.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Layer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainingContext.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGD.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsPersister.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OriginalInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= UniformInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CppRuntimeBoundary.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackpropWeightsNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerDimensions.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= deviceinfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DevicesInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DeviceInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= EasyCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TemplatedKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= platforminfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLWrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConfigManager.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= MnistLoader.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
13:22:09 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCLNative <= transferCLinterface.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= train.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetdefToNet.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= predict.cpp
In file included from jni/trainEngine/../TransferCL/src/TransferCL.h:6:0,
                 from jni/trainEngine/train.cpp:11:
jni/trainEngine/train.cpp: In member function 'void TrainModel::compare_two_binary_files(FILE*, FILE*)':
jni/trainEngine/../TransferCL/src/dependencies.h:11:85: warning: format '%d' expects argument of type 'int', but argument 4 has type 'long int' [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/trainEngine/train.cpp:776:9: note: in expansion of macro 'LOGI'
         LOGI("Two files are not equal :  byte poistion at which two files differ is %d\n", ftell(fp1)+1);
         ^
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ManifestLoaderv1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Loader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoaderv1Wrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= GenericLoader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardCpu.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingForward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= JpegHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FileHelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= stringhelper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainable.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= RandomSingleton.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNetMould.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNet.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TransferCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetAction2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemandv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchData.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= EpochMaker.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp: In member function 'virtual void NetLearnerOnDemandv2::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:186:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: postEpochTesting: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemandv2.cpp:193:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemandv2.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OnDemandBatcherv2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Batcher2.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BatchProcess.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearner.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NetLearnerOnDemand.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= InputLayer.cpp
In file included from jni/TransferCL/src/batch/../util/Timer.h:10:0,
                 from jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:10:
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp: In member function 'virtual void NetLearnerOnDemand::postEpochTesting()':
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:183:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: train accuracy: %d/%d %f \%", learnBatcher->getNumRight() , learnBatcher->getN() , (learnBatcher->getNumRight() * 100.0f/ learnBatcher->getN()));
     ^
jni/TransferCL/src/batch/../util/../dependencies.h:11:85: warning: spurious trailing '%' in format [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/TransferCL/src/batch/NetLearnerOnDemand.cpp:188:5: note: in expansion of macro 'LOGI'
     LOGI("DeepCL/src/batch/NetLearnerOnDemand.cpp: test accuracy: %d/%d %f \%", testBatcher->getNumRight() , testBatcher->getN() , ((testBatcher->getNumRight() * 100.0f / testBatcher->getN())));
     ^
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NormalizationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CrossEntropyLoss.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayerPredict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SquareLossLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= IAcceptsLabels.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Layer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainingContext.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Trainer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerStateMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGD.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDState.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TrainerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsPersister.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= WeightsInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= OriginalInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= UniformInitializer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CppRuntimeBoundary.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackpropWeightsNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= BackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerDimensions.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= deviceinfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DevicesInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= DeviceInfo.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= EasyCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TemplatedKernel.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= platforminfo_helper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= CLWrapper.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= MnistLoader.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConfigManager.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
13:33:28 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCLNative <= transferCLinterface.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= train.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= predict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingLayer.cpp
In file included from jni/trainEngine/../TransferCL/src/TransferCL.h:6:0,
                 from jni/trainEngine/train.cpp:11:
jni/trainEngine/train.cpp: In member function 'void TrainModel::compare_two_binary_files(FILE*, FILE*)':
jni/trainEngine/../TransferCL/src/dependencies.h:11:85: warning: format '%d' expects argument of type 'int', but argument 4 has type 'long int' [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/trainEngine/train.cpp:776:9: note: in expansion of macro 'LOGI'
         LOGI("Two files are not equal :  byte poistion at which two files differ is %d\n", ftell(fp1)+1);
         ^
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardGpuNaive.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNet.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TransferCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGD.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedMaker.cpp
jni/TransferCL/src/conv/Forward1.cpp: In member function 'virtual void Forward1::forwardHalf(int, CLWrapper*, CLWrapper*, CLWrapper*, CLWrapper*, CLWrapper*, CLWrapper*)':
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedLayer.cpp
jni/TransferCL/src/conv/Forward1.cpp:210:19: error: 'test' was not declared in this scope
   workgroupsize = test->get_kernel_work_group_size();
                   ^
jni/TransferCL/src/conv/Forward1.cpp:248:5: error: 'test' was not declared in this scope
     test->run_1d(globalSize, workgroupsize);
     ^
jni/TransferCL/src/conv/Forward1.cpp: In member function 'void Forward1::testHalf(int, CLWrapper*, CLWrapper*, CLWrapper*, CLWrapper*, CLWrapper*, CLWrapper*, CLWrapper*, CLWrapper*)':
jni/TransferCL/src/conv/Forward1.cpp:284:44: error: 'test2' was not declared in this scope
    int testf = getWorkgroupSize(globalSize,test2->get_kernel_work_group_size());
                                            ^
jni/TransferCL/src/conv/Forward1.cpp:331:3: error: 'test2' was not declared in this scope
   test2->run_1d(globalSize, workgroupsize);
   ^
jni/TransferCL/src/conv/Forward1.cpp: In member function 'void Forward1::getLastFCKernel(CLWrapper*)':
jni/TransferCL/src/conv/Forward1.cpp:645:8: error: 'class Forward1' has no member named 'test3'
  this->test3 = builderHalf.buildKernelOnline(
        ^
jni/TransferCL/src/conv/Forward1.cpp: In member function 'void Forward1::testFloat(int, CLWrapper*, CLWrapper*, CLWrapper*, CLWrapper*, CLWrapper*, CLWrapper*, CLWrapper*, CLWrapper*)':
jni/TransferCL/src/conv/Forward1.cpp:857:43: error: 'test' was not declared in this scope
   int testf = getWorkgroupSize(globalSize,test->get_kernel_work_group_size());
                                           ^
jni/TransferCL/src/conv/Forward1.cpp:901:5: error: 'test' was not declared in this scope
     test->run_1d(globalSize, workgroupsize);
     ^
jni/TransferCL/src/conv/Forward1.cpp: In member function 'virtual void Forward1::forward8bitTestVersion(int, CLWrapper*, CLWrapper*, CLWrapper*, CLWrapper*, CLWrapper*, CLWrapper*, CLWrapper*, CLWrapper*)':
jni/TransferCL/src/conv/Forward1.cpp:1233:43: error: 'test' was not declared in this scope
   int testf = getWorkgroupSize(globalSize,test->get_kernel_work_group_size());
                                           ^
make.exe: *** [obj/local/armeabi-v7a/objs/transferCL/TransferCL/src/conv/Forward1.o] Error 1
make.exe: *** Waiting for unfinished jobs....
13:34:29 **** Incremental Build of configuration Default for project test9withDeepCL ****
"C:\\Users\\olivier\\Desktop\\previous_computer\\adt-bundle-windows-x86_64-20140321\\crystax-ndk-10.2.1\\ndk-build.cmd" -j4 all 
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDFLAGS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: LOCAL_LDLIBS is always ignored for static libraries    
Android NDK: WARNING:jni/Android.mk:transferCL: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
Android NDK: WARNING:jni/Android.mk:transferCLNative: non-system libraries in linker flags: jni/../extra_libs/libOpenCL.so    
Android NDK:     This is likely to result in incorrect builds. Try using LOCAL_STATIC_LIBRARIES    
Android NDK:     or LOCAL_SHARED_LIBRARIES instead to list the library dependencies of the    
Android NDK:     current module    
[armeabi-v7a] Compile++ arm  : transferCLNative <= transferCLinterface.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= train.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= predict.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackwardGpuNaive.cpp
In file included from jni/trainEngine/../TransferCL/src/TransferCL.h:6:0,
                 from jni/trainEngine/train.cpp:11:
jni/trainEngine/train.cpp: In member function 'void TrainModel::compare_two_binary_files(FILE*, FILE*)':
jni/trainEngine/../TransferCL/src/dependencies.h:11:85: warning: format '%d' expects argument of type 'int', but argument 4 has type 'long int' [-Wformat=]
 #define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, app_name, __VA_ARGS__))
                                                                                     ^
jni/trainEngine/train.cpp:776:9: note: in expansion of macro 'LOGI'
         LOGI("Two files are not equal :  byte poistion at which two files differ is %d\n", ftell(fp1)+1);
         ^
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= PoolingBackward.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= NeuralNet.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= TransferCL.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SoftMaxLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= LayerMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGD.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= SGDMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ActivationMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalLayer.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= ConvolutionalMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= Forward1.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedMaker.cpp
[armeabi-v7a] Compile++ arm  : transferCL <= FullyConnectedLayer.cpp
[armeabi-v7a] Install        : libcrystax.so => libs/armeabi-v7a/libcrystax.so
[armeabi-v7a] StaticLibrary  : libtransferCL.a
[armeabi-v7a] SharedLibrary  : libtransferCLNative.so
[armeabi-v7a] Install        : libtransferCLNative.so => libs/armeabi-v7a/libtransferCLNative.so
